[{"title":"3D點雲的最小二乘法求解-數學推導","date":"2023-04-23T16:00:00.000Z","url":"/2023/04/23/3D%E9%BB%9E%E9%9B%B2%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95%E6%B1%82%E8%A7%A3-%E6%95%B8%E5%AD%B8%E6%8E%A8%E5%B0%8E/","tags":["筆記","資料科學","數據分析"],"content":"平面方程式 如果有一群 3D 的點，要如何 regression 一個平面出來？ 平面方程式： 但是把 Cz 移動到等號另一邊，C 就可以消掉，所以實際上只有三個未知數： C 可以是除了0或者無限大以外的任何實數，因此，在這裡就不重要了。 為了簡化，重寫平面方程式： 以下就用 Ax + By + C = z 推導 誤差方程式 無誤差情況：Ax + By + C = z 實際上情況：Ax + By + C = f(x, y) 也就是說，存在誤差：z - f(x, y) 為了同時消除方向性、逞罰大誤差，所以將誤差平方：( z - f(x, y) )^2 將誤差方程式寫出來，求出微分=0的極值點，就能得到此方程式參數。 求誤差方程式極值點 有多個未知數 A, B, C，因此需要分別對 A, B, C 微分： （ x, y, z 都是已有的點雲數據集，都有值！所以未知數是 A, B, C！不是 x, y, z！別搞錯了！） （我自己寫的時候都搞錯了！寫成「對 x, y, z 微分」，囧） 根據我們的需要與期望，要找出誤差變化率為0的點。這一點的誤差，不是最大就是最小。 把 chain rule 長出來的這一項乘進去 把已知項移到等號左邊 最後一條剛好就是原本的平面方程式 第一條就是原本的平面方程式同乘x 第二條就是原本的平面方程式同乘y 寫成矩陣形式 矩陣計算沒有除法，只能用反矩陣搬移。兩邊同時左乘A的逆矩陣 由此解得所有未知數。 逆矩陣計算也是超複雜的，我忘光了，工程數學課本都有，在此不贅述。 以調包的角度來看，到這裡已經可以輕易使用現成工具實現了。 應該沒有哪種程式語言，找不到現成逆矩陣算法的（雖然有的語言比較難找，比如 C#，官方有 System.Numerics.Matrix4x4.Invert，但知名度還遠不如需要另外安裝的第三方套件來得高）。 下一篇文章會說如何用 Python 底層實現這個演算法，不使用np.linalg.lstsq、scipy.optimize.leastsq這些已經寫好的方法。"},{"title":"3D點雲的最小二乘法求解-Python實現","date":"2023-04-23T16:00:00.000Z","url":"/2023/04/23/3D%E9%BB%9E%E9%9B%B2%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95%E6%B1%82%E8%A7%A3-Python%E5%AF%A6%E7%8F%BE/","tags":["筆記","資料科學","數據分析"],"content":"仿造各種 Python 機器學習類別的風格，建立一個 class，並且實作 fit() 與 predict() 方法。 pts 就是所有的三維點，pts[0] 就是第一個點，pts[0][0] 就是第一個點的 x 座標，依此類推。 fit() 就是重現上一篇文章以 Ax=b 求解的過程。 首先初始化矩陣 A 再來初始化矩陣 b 最後求A的反矩陣，並且乘上 b，就是最後的結果，把係數 A,B,C 存在 self.coeficient 。 NumPy 還提供了更強的實現 predict() 這個部分最簡單，就是把所有的點帶入方程式，得到預測的 z 座標。 就只是寫 z = Ax + By + C。 不過要注意的是，最好用向量化寫法，不要用迴圈，這樣會比較快。 範例 我用 Free3D 的一個人體模型來做範例。 "},{"title":"用 NumPy 向量化加速 Python：條件式卷積，變快 250 倍","date":"2023-03-08T16:00:00.000Z","url":"/2023/03/08/%E7%94%A8%20NumPy%20%E5%90%91%E9%87%8F%E5%8C%96%E5%8A%A0%E9%80%9F%20Python%EF%BC%9A%E6%A2%9D%E4%BB%B6%E5%BC%8F%E5%8D%B7%E7%A9%8D%EF%BC%8C%E8%AE%8A%E5%BF%AB%20250%20%E5%80%8D/","tags":["筆記","資料科學","數據分析"],"content":"如果你能看到這篇文章，應該知道什麼叫做「卷積(Convolution)」，我就不解釋了。 難的是什麼？如果我卷積的演算法，是有條件的、不能用 NumPy 的convolve函式、不能用 OpenCV 的filter2D函式、不能用一個 MxN 的卷積核描述，那我該怎麼辦？ 要是用迴圈，大家都會寫啊。可是效能很差，怎麼辦？ 這篇文章，我要介紹一個技巧，讓你自定義有條件的卷積演算法，變快 250 倍。 需求： 訪問每一個像素點，根據周圍的像素點的中位數，來決定自己的值 如果周圍的中位數大於自己就+1，小於則就-1，自己就是中位數的話不變 為了說明簡潔，以下說明不會放完整程式碼，完整程式碼會放在最後連結。 入門 for loop 寫法，速度定義為 1x 上面這個程式碼，就是一般初學者最直覺，用 for loop 寫出來的程式碼，但是效能很差，因為 for 迴圈一次只能處理一個數，數據頻繁的進出往來 RAM 與 CPU，效能也很差。 用 NumPy 向量化計算，速度 250x 上面這個程式碼，的概念是什麼？ 我個人對卷積的理解，就是「以我自己為中心，對周圍的 MxN 個點做處理」，通常 M 與 N 皆為奇數。 那為了向量化，我就這樣做： 生成一個 MxN 層與原本相同大小的陣列。 把原本的陣列，旋轉梯式的shift，整片賦值。裡面的每一層，都有「原本陣列的副本＋空的邊界」。 裁掉邊界。 不論是要計算中位數或是其他演算法，就像一把槍，一次射穿所有的 MxN 層，就可以得到結果。 如何在向量化的同時，實現條件式演算法？： 對於條件式的演算法(就是你寫成for loop時會有if的那種)，就用 np.where() 來寫，每種 case 都是一個向量化的運算。 不滿足條件的設定，要比較小心，看是要不變、或給 0。反正向量化計算，不管是否符合條件，一定要給值！不能留空。 每種 case 的結果再組合起來，可能是 +、and、or、max、min、sum 等等，看情況決定。 這篇文章主要是介紹了 NumPy 的向量化計算，用一個…很不生活化（暫時想不到卷積如何生活化）的簡單案例，來說明 NumPy 向量化計算的優點。 這篇文章的完整程式碼，可以在這裡找到： 旋轉梯圖片：该图片由Wolfgang Eckert在Pixabay上发布"},{"title":"用 NumPy 向量化加速 Python：顏色過濾快 200 倍","date":"2023-03-07T16:00:00.000Z","url":"/2023/03/07/%E7%94%A8%20NumPy%20%E5%90%91%E9%87%8F%E5%8C%96%E5%8A%A0%E9%80%9F%20Python%EF%BC%9A%E9%A1%8F%E8%89%B2%E9%81%8E%E6%BF%BE%E5%BF%AB%20200%20%E5%80%8D/","tags":["筆記","資料科學","數據分析"],"content":"上一篇已經介紹過用「Boolean array indexing」的技巧，快速過濾一維陣列。 這一篇我們要用顏色過濾的需求，來示範快速過濾三維陣列。 需求：把圖片中的膚色去除，只留下其他顏色 入門 for loop 寫法，速度定義為 1x 輸出如下： 上面這個程式碼，就是一般初學者最直覺，用 for loop 寫出來的程式碼，但是效能很差，for 迴圈一次只能處理一個數，數據頻繁的進出往來 RAM 與 CPU，拖慢很多時間。 用 NumPy 向量化計算，速度 200x 輸出如下： 技巧上的大方向，跟上一篇是一樣的。 我們不逐一比較，而是先產生一個篩子，一個與樣本數量同樣長度的篩子，直接拿這個篩子去一次過濾所有樣本，只要一次！ 只是這一次需求更加複雜。上只有一個條件，這一次有六個條件取交集，所以用 np.bitwise_and.reduce() 來產生篩子。 我用以下程式碼，給六個條件都產生與樣本數量同樣維度的篩子 把這六個篩子放進一個陣列。 為什麼用 np.bitwise_and.reduce()？ bitwise_and 就是取交集、reduce 就是把陣列裡面的元素做某種「化N合1」的運算。 所以這六個篩子就會化簡成一個，篩出所有符合條件的樣本。 最後可以用 img_vectorlize[skin_mask] = 0 一次對符合六個條件的樣本，改顏色。 在我完整的程式碼中，還用了 np.array_equal() 來驗證兩種方法的結果是否一樣。 原圖： 膚色換黑色 膚色換綠色 這篇文章主要是介紹了 NumPy 的向量化計算，用一個生活化簡單案例，來說明 NumPy 向量化計算的快速。 這篇文章的完整程式碼，可以在這裡找到："},{"title":"用 NumPy 向量化加速 Python：從3千萬剩男中找出比我高 16 倍","date":"2023-03-07T16:00:00.000Z","url":"/2023/03/07/%E7%94%A8%20NumPy%20%E5%90%91%E9%87%8F%E5%8C%96%E5%8A%A0%E9%80%9F%20Python%EF%BC%9A%E5%BE%9E3%E5%8D%83%E8%90%AC%E5%89%A9%E7%94%B7%E4%B8%AD%E6%89%BE%E5%87%BA%E6%AF%94%E6%88%91%E9%AB%98%E8%AE%8A%E5%BF%AB%2016%20%E5%80%8D/","tags":["筆記","資料科學","數據分析"],"content":"Python 簡單易用，可以很快速的驗證各種演算法。但是到了真的要實際應用時，Python 的毛病就會凸顯，往往就是慢！而且慢的很難受。 我也熟悉 Go 或 C# 這些靜態型別的語言，但是欠缺各式各樣方便好用的套件，難以快速的驗證各種演算法。 這篇文章我們來看看如何用 NumPy 來加速 Python 的效能，並且用一個簡單的例子來說明。 本文要介紹的是 NumPy 當中一種叫做「Boolean array indexing」的技巧，官方文件的連結如下： Boolean array indexing 需求: 找出身高大於 178 cm 的資料 入門 for loop 寫法，速度定義為 1x 輸出如下： 上面這個程式碼，就是一般初學者最直覺，用 for loop 寫出來的程式碼，但是效能很差，因為: Python 是動態型別，所以每次迴圈都要去判斷型別，並且要去做型別轉換。 而且 for 迴圈一次只能處理一個數，數據頻繁的進出往來 RAM 與 CPU，效能也很差。 用 NumPy 向量化計算，速度 16x 輸出如下： 上面這個程式碼，直接把整個陣列的數值都拿出來比較，然後再把結果存回陣列，這樣就不用一個一個比較了，效能就會快很多。 這樣可能比較難懂，我寫個分解動作的範例，讓大家可以更清楚的理解： 輸出如下： 如果在 debug console 查看 is_above_178，會看到一個很長的陣列，裡面的值都是 True 或 False，代表每個數字是否大於 178。結果如下： 所以真正的動作是： 先取得一個 boolean 陣列，裡面的值都是 True 或 False，代表每個數字是否大於 178。 再用這個 boolean 陣列，去取得原本的陣列，只取出 True 的部分。 我們不逐一比較，而是先產生一個篩子，一個與樣本數量同樣長度的篩子，直接拿這個篩子去一次過濾所有樣本，只要一次！ 從計算機原理講，為什麼快？ 因為 NumPy 是靜態型別，所以不用每次迴圈都去判斷型別，並且不用去做型別轉換。 一次處理多個數字，數據不用頻繁的進出 RAM 與 CPU，效能更好。 當演算法被正確地向量化時，CPU 僅需一條指令完成這行程式碼，而不是對每個 i 進行獨立操作。理想情況下，array[boolean_mask]操作將只發生於 CPU 內部而不用將數據傳回 RAM。 這篇文章主要是介紹了 NumPy 的向量化計算，用一個生活化簡單案例，來說明 NumPy 向量化計算的優點。 這篇文章的完整程式碼，可以在這裡找到："},{"title":"用 NumPy 向量化加速 Python：千萬級矩形面積計算變快 16~177 倍","date":"2023-03-04T16:00:00.000Z","url":"/2023/03/04/%E7%94%A8%20NumPy%20%E5%90%91%E9%87%8F%E5%8C%96%E5%8A%A0%E9%80%9F%20Python%EF%BC%9A%E5%8D%83%E8%90%AC%E7%B4%9A%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A9%8D%E8%A8%88%E7%AE%97%E8%AE%8A%E5%BF%AB%2016~177%20%E5%80%8D/","tags":["筆記","資料科學","數據分析"],"content":"Python 簡單易用，可以很快速的驗證各種演算法。但是到了真的要實際應用時，Python 的毛病就會凸顯，往往就是慢！而且慢的很難受。 我也熟悉 Go 或 C# 這些靜態型別的語言，但是欠缺各式各樣方便好用的套件，難以快速的驗證各種演算法。 這篇文章我們來看看如何用 NumPy 來加速 Python 的效能，並且用一個簡單的例子來說明。 需求是：計算 1780 萬個矩形的面積 入門的人怎麼寫？速度定義為 1x 輸出如下： 上面這個程式碼，就是一般初學者最直覺，用 for loop 寫出來的程式碼，但是效能很差，因為: Python 是動態型別，所以每次迴圈都要去判斷型別，並且要去做型別轉換。 而且 for 迴圈一次只能處理一個矩形，數據頻繁的進出往來 RAM 與 CPU，效能也很差。 用 NumPy 向量化計算(簡單版)，速度 16x 輸出如下： 上面這個程式碼，直接把矩形的兩個對角點座標的XY值，分別按照大小取出來，成為四個 Nx1 矩陣。然後只做1次矩陣化的面積運算，就算完了 N 個矩形的面積，效能提升了 16 倍。 為什麼快？ 因為 NumPy 是靜態型別，所以不用每次迴圈都去判斷型別，並且不用去做型別轉換。 一次處理多個矩形，數據不用頻繁的進出 RAM 與 CPU，效能更好。 當演算法被正確地向量化時，CPU 僅需一條指令完成這行程式碼，而不是對每個 i 進行獨立操作。理想情況下，any(result)操作將只發生於 CPU 內部而不用將數據傳回 RAM。 用 NumPy 向量化計算(進階版，使用np.ptp)，速度 22x 輸出如下： 上面這個程式碼，就是用 NumPy 向量化計算的方式，效能提升了 22 倍。 為什麼又更快？ 因為 np.ptp 的意思就是「peak to peak」，把「最大值、最小值、取差值」的計算合併成一個函式，所以效能更好。 用 NumPy 向量化計算(進階版，直接取差值，然後絕對值相乘)，速度 177x 輸出如下： 上面這個程式碼，就是用 NumPy 向量化計算的方式，效能提升了 177 倍。 為什麼又更快？ 老實說，到這裡已經到了我的知識盲區了。 不論是 slicing 或者進出 RAM 與 CPU 的次數，與前一種方法看起來都一樣，但是效能卻可以從 22 倍提升到 177 倍。我猜測可能是因為 np.ptp 有些限制導致速度比較慢。 用 NumPy 就是這樣，通常會比只用單純的 Python 快很多，但是各種不同用法的效能差異卻很大。 想達到最好的效能，有沒有一次到位的方法？除非有時間仔細鑽研 NumPy 的底層原理，不然我覺得沒有，只能一步一步的嘗試，並且不斷的優化。 更快的方法，要注意其他的風險 可以看到，在最後一段程式碼中，有一行被我註解的地方。 用 np.diff 也可以達到同樣的效果，還更快一點，而且我完全想不出原因是什麼？ 但是我開了 Docker 之後，就會發生爆記憶體的錯誤： 可以看到 np.diff 跟記憶體要了一塊 N x N 的空間，而 N 高達 17800000，這對許多系統來說是無法承受的。而且你開發時可能不會出現這個問題，但是到了生產環境才發現，那就踩了大坑了。 總結 三種向量化計算的效能，與原本的 for-loop 效能比較如下： 這篇文章主要是介紹了 NumPy 的向量化計算，用一個工作上實際遇過的簡單案例，來說明 NumPy 向量化計算的優點。 這篇文章的程式碼，可以在這裡找到："},{"title":"中國大陸 Apple Trade In 過程全記錄，委託第三方的服務果然翻車","date":"2021-08-03T16:00:00.000Z","url":"/2021/08/03/AppleTrade-in%E9%81%8E%E7%A8%8B/","content":"換 Apple Silicon，出清 Intel 由於買了新的 M1 MacBook Air，做完數據移轉、相容性驗證之後，舊的 Intel MacBook Air 就「食之無味、棄之可惜」了。 算一算賣給蘋果官方還有 3000 元可以拿！於是就開啟了人生第一次 Apple Trade In。 這輩子換過這麼多電腦，為什麼這是第一次 trade-in？ 要是還在台灣，處理舊機的首選通常是上 PTT 或蝦皮賣掉，自己搓合賣家，能拿到比較好的價錢。例如我的 Intel MacBook 當初就是在 PTT 上買到的；確認可用以後，又在蝦皮上把 ThinkPad 賣掉。 但中國大陸有特殊的民情，自己上閒魚等平台找買家，過程非常耗時耗力噁心人，所以第三方收二手機的情況很發達，願意買二手機的情況也比台灣少很多，甚至買二手機被認為是丟臉的事。 申請 Apple Trade In 線上申請完以後，就會看到如下畫面： \b好尷尬啊，台灣人沒有中國大陸身份證，不知道 Apple 會怎麼處理？ 當天就會收到這個簡訊： 點連結進去，挑選收件時間。 收件前一天還會收到這個提醒簡訊： 收件當天早上還會收到這個提醒簡訊： 整個過程的提醒，都相當貼心到位。 交機給順豐小哥 在 FindMy 上目送我的筆電最後一程 交機前，我先刪除一些敏感數據、登出服務，但是我故意沒有登出 Apple ID、關閉 Find My，我想看能不能在路上追蹤到？因為蘋果裝置本身就如同一個 AirTag，感覺會挺好玩的。 果然，當天下午就一路從廣州移動到深圳寶安區。 隔天早上出現在鄭州。 但中間會有很長的間斷，我猜可能是這樣： 送貨車廂為金屬外殼，所以遮蔽了 WiFi 與藍牙訊號。 在高速公路、郊區等路段，路上距離別的車比較遠，送貨小哥自己又不是用 iPhone，所以就長時間沒辦法連線定位。 偶爾在中途收件、轉運的時候，貨物可以暴露在 iDeviec 的訊號之下，就能把位置傳回來我手中。 工廠打電話來要機器登入密碼 這也算是有點在我預期中的，所以我就把密碼告訴他們，然後在 Find My 上執行清除數據。並且在大約一個小時後顯示清除完成（只是顯示，後面會詳述）。 沒想到，事情並不如我想得這麼順利。 工廠又反覆打電話來，說我沒有清除數據，多次要求我重做 第二天，是一個操北方口音的女人打電話來，要我執行清除數據，我說： 「昨天下午就做過了啊！你們打來要密碼之後我就主動清除了。」 「你們有聯網嗎？是不是沒有聯網？」 她表示不太清楚狀況，會轉告工廠。 第三天，是一個男人打電話來，聽起來應該是第一線執行的員工，又說我沒有清除數據，並且為了證明，說可以登入我的電腦，看到哪些數據等等（我不太擔心，敏感數據交付順豐之前都已經刪除）。 我再次確認，他說已經聯網。 這一次，我半信半疑的拿出手機照做，看到畫面上顯示這台電腦的狀態是「Erased now」（如下圖），而且我沒辦法再做更多操控的動作，只能看到這台電腦的「電量、是否充電中、位置」。至於「電量、是否充電中、位置」，是不是暫存的歷史訊息？我跟電話中的小哥核對後，都與現況相符，巧合的機率不高，應該是即時訊息。 也就是說，透過 Find My 清除自己電腦中的數據後，唯一能掌握的訊息應該就是「電量、是否充電中、位置」。 我把狀況轉告給電話中的小哥，他又做出以下要求： 「你還有其他蘋果裝置嗎？」 「其他蘋果裝置也顯示已抹除嗎？」 「你用瀏覽器登入 iCloud 看看，是不是也已清除？」 此時，我已經非常的不耐煩，但是怕 trade-in 失敗造成更多麻煩，只好先照做。 我用不同的裝置在瀏覽器上登入 iCloud（如下圖），結果也是一樣，已經清除過，不能再清除。只多了「播放聲音」的功能。 我反覆描述這個狀況後，電話另一端的小哥才放棄，說再看看怎麼辦。 第三天，是一個週六早上，我正在外頭忙，他們又打電話來。這次電話中又是不同人，似乎把狀況搞得比較清楚了，說我之前做的那些動作需要「電腦當下聯網」才會生效，請我重新做一次。（難道前幾次電話處理，都不是當下聯網？） 這次我又不耐煩地拿出平板打開 Find My，終於有點「新東西」了！顯示出在鄭州工廠的那台電腦，並且是未清除的狀態，可以進行所有常規操作。 這一次清除，電話中的小哥立刻就說有在清除了。但我在忙、可能也沒耐心了，沒把之前的清除訊息再打一次。之後就按照指示把電腦從 Find My 中移除。 到這邊，麻煩的溝通才算告一段落。 收到確認簡訊、上傳證件、錢到帳 接下來幾天就陸續收到這些簡訊。 週日下午3點： 週日下午5點： 幸好上傳沒有阻擋台胞證，有跳出視窗說是人工審核，要等。 週一下午5點： 結語1：電話通知清除與移除的過程，極不專業，帶給用戶很多麻煩 這部分過程都寫了，就不再詳述。 畢竟回收舊機器還是比較髒的事，原廠摸透流程後，大多就會包給第三方做，就難免有這些小缺點。 結語2：作為台灣人特別需要噴 Apple 有缺失的地方 整個流程都說要「二代身份证」，這對於在中國大陸各種日常生活系統上，經常因為證件不符，習慣被拒絕使用的台灣人來說，是特別不友善的用詞。 真的考慮的夠，就不會寫「上传您的二代身份证正反面照片」，因為在字面上已經排除收其他證件的可能。應該寫「有效身分證件」。 都寫了要「二代身份证」還拿台胞證硬闖，我在中國大陸生活兩年多，這是第一次成功！一般遇到這種情況，我都會基於成功率太低的經驗放棄，這次是憑著對蘋果的信任，還有果粉朋友的話，才硬著頭皮把流程走到底。 果粉朋友的話是這麼說的： 那放心，水果对第三方要求很高，会考虑到港台中国居民 只有 sb 私企才不考虑港澳台的中国居民，你又懒得投诉 所以转人工审核了，我不信他们只收内地身份证的 （我也不確定，是不是這樣才轉人工審核？或許不論什麼證件都人工審核？） 換句話說，蘋果只寫了收「二代身份证」，卻還讓台胞證硬闖成功，也是變相鼓勵在中國大陸生活卻沒有「二代身份证」的人，不去遵守字面上的系統規範，鼓勵試探規則底限與漏洞，這種作風非常的不蘋果，也不是高端品牌應該有的作法。"},{"title":"如何在 Apple Silicon 上安裝 OpenCV 4.5.3 與 TensorFlow 2.5 給 Python 用？","date":"2021-07-25T16:00:00.000Z","url":"/2021/07/25/%E5%A6%82%E4%BD%95%E5%9C%A8Apple%20Silicon%E4%B8%8A%E5%AE%89%E8%A3%9DOpenCV%E8%88%87TensorFlow%E7%B5%A6Python%E7%94%A8%EF%BC%9F/","tags":["資料科學","數據分析","機器學習","AI"],"content":"我來證明 Apple Silicon 現在也可以煉丹了！ 下圖是筆者在 Apple Silicon 上跑起了 OpenCV 4.5.3 與 TensorFlow 2.5.0。 在朋友推坑之下，筆者入手了 Apple Silicon (以下簡稱M1) MacBook。 這兩天做完相容性驗證之後，準備把舊的 Intel MacBook 賣掉。 \b（好尷尬啊，台灣人沒有中國大陸身份證，不知道 Apple 會怎麼處理？） 相容性驗證有哪些項目？主要驗證我常用的 OpenCV、scikit、numpy、TensorFlow 等套件如何安裝？能不能正常跑？ 經過大量苦逼無聊的工作後，發現目前還是不能常規無痛安裝，必須以 workaround 的手段安裝。 坑有哪些？ 目前網上充斥各種過時、有錯誤的野生安裝方法。 就算最多人參考的國外大神帖子，也有過時或出錯的地方，造成安裝完全失敗。 經過我徹夜摸索後，修正國外大神帖子中部分問題，終於跑通一套可以正確安裝 OpenCV 當下最新版（4.5.3）與 TensorFlow 2.5.0（僅限 Apple 分支） 的流程。 以從頭乾淨安裝來說，目前各種 Python 的數據科學 package 幾乎只能走 conda 安裝，疑似還是要依賴 Rostta2？這部分我就不懂，有請熟悉編譯器或虛擬機器的大神補充。 Step 0: 安裝 Xcode 與 brew 這步驟我覺得對 macOS 上的開發者來說是必備且熟練了，所以懶得寫。 記得 brew 要安裝 Apple Silicon 用的版本。 Apple Silicon 用的 brew 版本，路徑是 opt 開頭的。 Step 1: 安裝 Conda 這個連結，下載並執行：  這裡就會包含有針對 Apple Silicon 最佳化的 Python 3.9，也一併安裝。 我沒有要做環境隔離，所以直接 conda activate 進入到名為 base 的 conda env。 你嘗試下圖的指令，看是不是跟我一樣？ 這代表成功切換虛擬環境，並用上 Python 3.9 Step 2: 安裝 Numpy（in tensorflow-deps） 小心有坑！ 按照國外大神提供的步驟，在這一步就出錯，走不下去，原因是內容有些過時了。 你照做就會看到以下的錯誤： 原因：這個 numpy 包的「cp38」代表是給 Python 3.8，版本號多或少一點都不行！可是最多也只出到 3.8，但指定的 conda 環境已經變成 Python 3.9，而且為了 M1 優化也是從 Python 3.9 開始，所以這邊就衝突了。那這個坑怎麼辦呢？ 我已出坑 不論只安裝 OpenCV 與 TensorFlow 其中哪一個，這一步都是必要的前置步驟。 這邊直接安裝 Apple 官方提供的 tensorflow-deps，會聯同 numpy 一起搞定。上面單獨安裝一個 .whl 的步驟就不用了。 conda install -c apple tensorflow-deps 安裝完以後測試看看，有 numpy 版本號出現就是可以了。 python -c &quot;import numpy as np;print(np.__version__)&quot; Step 3: 編譯 OpenCV 通常說到編譯，就會想到等很久。還好我們用的是 Apple Silicon，所以這次很快，我記得開始編譯之後就去洗澡，洗完出來剛好完成。 在家目錄下載 OpenCV 與他的延伸套件、解壓縮、進入編譯資料夾。 然後 cmake 小心有坑！ 外國大神提供的指令這邊有錯，照做會得到這個錯誤。 我已出坑 我撞牆多次後，已經為大家修正。 首先在 conda 環境下輸入 which python，得到以下結果： 然後把輸出的路徑放到以下 cmake 指令中，PYTHON3_EXECUTABLE 後面那串 接著輸入 make -j8，這就是編譯的步驟。 j8 就是用八個核心，目前能買到的 Apple Silicon 都是八個核心，所以也沒有改多的空間了。 給大家看看我編譯的過程： 編譯完成後，執行 sudo make install，這一步就算完成了。 Step 4: 連結 OpenCV 將 macOS 上的 OpenCV 4 符號鏈接到虛擬環境 site-packages 輸入 mdfind cv2.cpython 應該能看到這兩行以「.so」結尾的路徑，其他的路徑不管他 我們要在虛擬環境的 site-packages 中產生一個假的「cv2.so」，實際上是連結到剛才編譯出來的那個「cv2.cpython-39-darwin.so」 這一步做完，OpenCV 應該就安裝到 Python 能用了。來測試一下： 結果應該要出現「4.5.3」。 Step 5: 安裝 TensorFlow 這一步做完，TensorFlow 應該就安裝到 Python 能用了。來測試一下： 結果應該要出現「2.5.0」還有以下隨機內容的 Tensor： 到這裡，以下這些套件就安裝完成： 針對 Apple Silicon 最佳化的 Python 3.9 OpenCV 4.5.3 TensorFlow 2.5.0 另外這些常用的 package 都這樣安裝： 以後使用之前，都必須要先 conda activate 進入虛擬環境，這是目前還有一點不完美的地方。 參考資料 國外大神  Apple 官方的 TensorFlow 插件  "},{"title":"Docker部署測試用文章","date":"2021-07-24T16:00:00.000Z","url":"/2021/07/24/Docker%E9%83%A8%E7%BD%B2%E6%B8%AC%E8%A9%A6%E7%94%A8%E6%96%87%E7%AB%A0/","tags":["docker"],"content":"驗證是不是可以 Docker 部署？ 成功的話，我就不用在新電腦上搞麻煩的 node 與 hexo 環境了。 這一條拖了一年多的 to do list，終於在今天完成了（淚～） 但其實寫之前就想很久了，真要算下來都不只兩年了。 原始碼："},{"title":"近期機器學習工作踩到的5個坑","date":"2021-05-18T16:00:00.000Z","url":"/2021/05/18/%E8%BF%91%E6%9C%9F%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92%E5%B7%A5%E4%BD%9C%E8%B8%A9%E5%88%B0%E7%9A%845%E5%80%8B%E5%9D%91/","tags":["資料科學","數據分析","機器學習","AI"],"content":"最近主管突然想要大家識別某種生活物品，然後大家就卯起來幹了。 第一坑：數據少 一開始的問題是樣本極少，第一天還不到10張，之後也可預見的不好蒐集，所以其他人一頭熱用 YOLO 之類的演算法同時，我評估深度學習不是好方法。越老舊的方法雖然上限越低，但可解釋性比較好，一般來說需要的數據量比較少。 都用一些比較傳統的方法，一開始先用 Cascade（就是 Viola–Jones 那個） 第二坑：老演算法被新版棄用 這裡就來了第一個大坑，OpenCV 4.X 已經拿掉了 Cascade 相關的東西，網路上一找可以看到很多人抱怨，當然抱怨大本營是 Github issue，官方建議大家改用 DNN，但還是很多人想要用復古的東西。 好吧，我只好降低版本到 3.X，這連帶讓我找適合的 docker image 基底都變得困難（因為編譯 OpenCV 太久，不能每次都編譯），還好最後還是找到了。 然後隨著樣本增加到幾百個，效果也不是很好。中間還做了哪些努力？因為我自己的 MacBook Air 很慢，所以花了很多時間寫 Dockerfile 還有一些部署相關的 bash，讓計算可以在公司的服務器上跑。但 docker build 與 debug 還是吃自己電腦上的算力，電腦不夠快的影響還是有。 後來覺得為了 debug 而 docker build 的次數太多了、太浪費時間，所以決定： Dockerfile 只做 apt install 或 pip install 之類的事，所有的程式碼、數據全都用 mount 的。 所有的流程都寫在 docker run 最後面的指令（/bin/bash -c “…”） docker image、程式碼、數據集，各用一個 bash deploy 到 GPU server。 第三坑：用錯特徵 後來我就發現，預設的特徵擷取法是 Haar，那個是針對人臉的明暗變化擷取特徵，不太適合現在的檢測目標。另外兩種可選特徵是 LBP 與 HoG，這兩種我都在寫論文或寫作業自乾過了，HoG 應該是最佳選擇。理論上，這只要改個參數就可以看到辨識率爆炸性的推進了吧？我以為看到了一條很棒的近路。 第四坑：適合的特徵又被 Python 版棄用 結果發現 OpenCV 3.X 可以訓練基於 HoG 的 Cascade 模型，但是卻不能 load 基於 HoG 的 XML model？必須要 2.X 才能，那我就再度降低版本到 2.X 吧！這次更慘，發現沒得降低了，因為 Python 的 OpenCV 最低就是從 3.X 開始，如果降低到 OpenCV 2.X 那從 load XML model 以後的所有事情我都要用 CPP 寫，太累了！  搜一下發現很多人用 HoG + SVM 的組合做目標檢測，尤其行人與車輛，感覺還蠻適合現在的目標。發現用的函式庫有兩大派別，老的 OpenCV 與新的 scikit-image。 第五坑：造好的輪子還是要自己補胎 然後就找一下 Github 現成的輪子，發現有一個看起來寫得不錯、夠規整、文件夠清楚，有把一些設定獨立在 config.cfg。clone 下來之後發現是除了 Python2 之外，還有一些錯字、一些API過時了，改了將近一天才跑起來。 跑起來之後有坑啊，一直跑出「array has an inhomogeneous shape after 1 dimensions.」，原來是我的訓練圖片大小都不一樣，沒有經過正規化。給模型的所有數據維度都要一樣大，這其實應該是個機器學習常識才對，甚至也是統計常識，只是現成的工具太方便了，習慣都被養壞了。 接下又要繼續解這個不是坑的坑…（待續） （還有一些數據視覺化的坑沒寫，不過我懶了，下次再寫）"},{"title":"如何用Docker高效部署Python寫的機器學習推論服務","date":"2021-05-01T16:00:00.000Z","url":"/2021/05/01/%E5%A6%82%E4%BD%95%E7%94%A8Docker%E9%AB%98%E6%95%88%E9%83%A8%E7%BD%B2Python%E5%AF%AB%E7%9A%84%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92%E6%8E%A8%E8%AB%96%E6%9C%8D%E5%8B%99/","tags":["機器學習","後端"],"content":"這一篇是我個人近期的經驗總結。個人感覺與 Docker 相見恨晚，要是早點懂，以前做的機器學工具，效果都能放大很多倍了。 以前總覺得把程式碼放到別的 server、別的電腦上跑，要搞定各種環境細節上的差異，是一件骯髒的苦差事。自從有了 Docker，一切都變得輕鬆快速無負擔。 每次一鍵部署（如上圖）都覺得很爽快！從改完程式碼到上線生效，就只有一行指令的距離（前提是網路穩定、指令編寫正確）。 準備 必須： 開發機＆目標機，都要安裝 Docker 至少需要寫一個簡單 server（建議 Python+Flask），方便推論數據進出虛擬機 建議：盡可能不要把只有訓練才用到的東西（程式碼、數據、函式庫）部署出去，所以能做以下這些事： 「訓練＆推論」數據分離 不必分開放。兩種數據不在同一個文件內，路徑能區分清楚就好。 「訓練＆推論」城市碼分離 前提：模型能存檔，可用 pickle r/w。 pip install 加速與減負 –no-cache-dir 映像是免洗筷環境，不快取，爭取輕量 中國大陸內 proxy pip3 install XXX -i  requirements.txt 定向瘦身 pip3 install pipreqs pipreqs .（在要部署的repo內） 效果？ 1.54GB VS 424MB 大的已經手動刪除很多 package，還是這麼大。手動刪除效果比不上自動工具。 觀念 Docker 虛擬機是一個小黑屋 人可以用，但不能親自操作 一切操作都要寫在一張紙上，請 Docker 管家代辦 這張紙叫做 Dockerfile （第一個字母必須大寫） Dockerfile 上的交辦事項分兩大類： 如何裝修？（一次性設置） 以後每次進門的慣例？（重複使用） Dockerfile 的好處＆不足： 強迫開發者把環境設定寫成程式碼，可標準化、可輕易重復。 對機器學習來說，Dockerfile 只能標準化推論與部署。訓練與演算法的內涵 Docker 管不到，還是要主動寫才會留下。（這句看起來很像「一分鐘有60秒」之類的廢話，但很真的很多主管不懂機器學習） Dockerfile 將會與 Python 程式碼一起維護，是整個 repo 程式碼的一部分。 Dockerfile 的寫法，就是打包服務的重點。 操作 撰寫 Dockerfile docker build（裝修） docker run（執行慣例） 上述操作失敗的應對方式：說清楚太麻煩，我靠大量練習與肌肉記憶 延伸 Python官方鏡像各版本差異  Image_Variants 製作運行 Python 的 docker image 前，如何選擇 docker 基底鏡像？  bash 一鍵部署 如何撰寫 bash Linux 子帳號權限設置 put ssh pub key to the server log 或其他 container 產生數據 container 如免洗餐具，隨時消失、隨時可棄，不應該留存數據。 數據保存應該用 mount 或 volume。 待解決問題： Python 演算法或模型，是否應該用 mount 做到彈性更新？ 多個虛擬機連動：docker compose "},{"title":"為什麼物聯網落地困難、賣點稀少、有價值數據獲取困難，大多只能作為噱頭？談我的經驗","date":"2020-12-09T16:00:00.000Z","url":"/2020/12/09/%E7%82%BA%E4%BB%80%E9%BA%BC%E7%89%A9%E8%81%AF%E7%B6%B2%E8%90%BD%E5%9C%B0%E5%9B%B0%E9%9B%A3%E3%80%81%E8%B3%A3%E9%BB%9E%E7%A8%80%E5%B0%91%E3%80%81%E6%9C%89%E5%83%B9%E5%80%BC%E6%95%B8%E6%93%9A%E7%8D%B2%E5%8F%96%E5%9B%B0%E9%9B%A3%EF%BC%8C%E5%A4%A7%E5%A4%9A%E5%8F%AA%E8%83%BD%E4%BD%9C%E7%82%BA%E5%99%B1%E9%A0%AD%EF%BC%9F%E8%AB%87%E6%88%91%E7%9A%84%E7%B6%93%E9%A9%97/","tags":["運動","資料科學","數據分析","靠盃","批判","技術","YouBike","公共運輸","單車","韌體"],"content":"裝置電力短缺 物聯網裝置通常都是吃電池，很少有插電的機會。新硬件設計的時候，最大瓶頸是裝置的電力有限，但各部門都想在裝置上加入對自己有利的耗電項目。 行銷部門想放廣告、GIS 部門想裝 GPS、維運部門想寫入更多的 log、跟醫院合作的部門想裝運動感測器等等，這些需求都在爭搶極其有限的電力。給這些裝置充電，比給自己的手機半天一充還要困難。 為了裝更多的感測器，我連「用 DMA 節省 CPU 耗電」、「常態休眠，等感測器發出中斷再喚醒」這些很韌體技巧都提出來了，我還自己去查感測器的 datasheet 想辦法找出耗電量比較少的型號。 數據孤島 這個問題已經在網上被介紹過很多次，就不詳述。數據孤島有企業與企業之間的、也有部門與部門之間的，沒有統一的標準、沒有流通的數據，也會降低的數據的價值。一但被認定數據的價值不夠，在上一點「裝置電力短缺」就會被否決安裝感測器的需求。 通常數據價值已經被管理層看到的時候，都是別家企業已經拿數據做出應用、講出故事的時候，這時候想在營運中的系統加上感測器已經來不及，就算裝了，應用場域的機會與話語權，也早已經被先行的企業拿下。 .center { display: block; margin-left: auto; margin-right: auto; width: 50%; } 上圖是我參與過初期規劃階段的產品，我離職時： 參考了很多中國大陸共享單車的方案，呼聲最高是類似現在中國大陸實行的虛擬停車柱/停車區，最後不知道為什麼沒採用，但不論開發商或當局政府都採取很保守的態度，很多先進的提案都沒實施，估計是被「單車墳場」的文章嚇到了。 當時落地營運的還只有 1.0，1.0 上沒有任何感測器或長距離通訊裝置，只有一組向停車柱回報車 ID，類似 NFC 的線圈。 2.0 版連塗裝都是我離職多年後才在路上看到，也不知道當年提案的感測器到底裝了哪些… "},{"title":"我在微信公眾號上的文章清單(滾動更新)","date":"2020-09-12T16:00:00.000Z","url":"/2020/09/12/%E6%88%91%E5%9C%A8%E5%BE%AE%E4%BF%A1%E5%85%AC%E7%9C%BE%E8%99%9F%E4%B8%8A%E7%9A%84%E6%96%87%E7%AB%A0%E6%B8%85%E5%96%AE_%E6%BB%BE%E5%8B%95%E6%9B%B4%E6%96%B0/","tags":["大陸"],"content":"由於在微信的資料池裡面，搜尋我自己的名字，會被某個同名同姓的乒乓球選手新聞淹沒，所以我特地把自己發表在微信公眾號上的文章做一個清單，方便我自己查閱。 技術 Go语言中文网 2020-09-13 面试官：这个经典的并发问题用 Go 语言如何实现？ 2020-04-03 LeetCode Go 并发题详解：交替打印字符串 2020-02-19 只在我计算机上能跑的代码：select-case-default 忘记让出 CPU 的坑 2020-02-16 面试题实战：给一个数 n，使用 Go 打印交替顺序零与奇偶数 2020-02-11 多 Goroutine 的并发程序如何保证按序输出？channel 的使用是关键 2020-02-04 LeetCode上并发题目无Go版本：台湾同胞试水 — 交替打印FooBar 非技術 2020-02-14 在台湾亲身经历约口罩抢购热潮… 2020-02-11 我在台湾亲历口罩抢购潮 | 人在书店×2002"},{"title":"LeetCode Concurrency Go 語言詳解：經典哲學家吃飯問題：碰運氣解法","date":"2020-09-01T16:00:00.000Z","url":"/2020/09/01/LeetCode_Concurrency_Go%E8%AA%9E%E8%A8%80%E8%A9%B3%E8%A7%A3_%E7%B6%93%E5%85%B8%E5%93%B2%E5%AD%B8%E5%AE%B6%E5%90%83%E9%A3%AF%E5%95%8F%E9%A1%8C_%E7%A2%B0%E9%81%8B%E6%B0%A3%E8%A7%A3%E6%B3%95/","tags":["Go語言"],"content":"前言：由於 LeetCode Concurrency(併發) 還沒有 Go 語言版本，我先自行用 Go 語言來解題。為了能在 LeetCode 以外的平台獲得討論，所以我打算逐漸把自己的解題思路寫下。 本題 LeetCode 連結：  本題題目 「哲學家吃飯問題」是一個作業系統中的經典問題，所以抽象題幹我就不再贅述，直接說實作要求。 The philosophers’ ids are numbered from 0 to 4 in a clockwise order. Implement the function void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork) where: 有幾位哲學家，他們的 ID 順時針由 0~4，實作一個函數 void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork)，其中… philosopher is the id of the philosopher who wants to eat. 參數 philosopher 代表想要吃飯的哲學家的 ID。 pickLeftFork and pickRightFork are functions you can call to pick the corresponding forks of that philosopher. 參數 pickLeftFork and pickRightFork 是函數，你必須呼叫他們來使哲學家拿起對應的叉子。 eat is a function you can call to let the philosopher eat once he has picked both forks. 當哲學家拿起兩隻叉子後，你必須呼叫 eat 這個函數讓哲學家吃一次。 putLeftFork and pickRightFork are functions you can call to put down the corresponding forks of that philosopher. 參數 putLeftFork and pickRightFork 是函式，你必須呼叫他們來使哲學家放下手中的叉子。 The philosophers are assumed to be thinking as long as they are not asking to eat (the function is not being called with their number). 假設哲學家們都會思考很久，中間都不會要求吃東西（呼叫函式 thinking() 不必使用哲學家們的 ID） Five threads, each representing a philosopher, will simultaneously use one object of your class to simulate the process. It is possible that the function will be called for the same philosopher more than once, even before the last call ends. 五個執行緒，每一個執行緒代表都一個哲學家，用一個類(在 Go 語言是 struct)模擬這個 process。這個函式可能被同一個哲學家呼叫多次，甚至在最後一次呼叫結束前的途中都有可能。 「叉子」與「筷子」 最早課本裡都是說「叉子」。但我大學上 OS 的時候老師就提過一個疑問：「用叉子吃義大利麵，一隻就夠了，沒必要用到兩隻吧？所以，改成用筷子是不是更合理一點？但沒辦法，誰叫這門學問是西方先發明的？我們就當作筷子吧」。 於是，本文也決定照改，以下都用「筷子」代替「叉子」。 本題考核難點？「拿得起放不下」造成死結、「無限輪迴」造成活結飢餓至死 在過去的 LeetCode Concurrency 詳解中，我提到過很多次： goroutine 若不刻意控制，將無法保證執行的先後順序，因此本題就是要考核對 goroutine 順序控制的能力。 但前面幾題的解法，大多是把判斷責任中心化，方便控管順序。這次，與前面幾題不同的是，這一題要求把判斷責任分散到每一位哲學家 thread 身上，哲學家彼此之間並不溝通，因此很容易發生資源互卡，也就是 deadlock。本文所示範的 channel 使用方法已經完全避免了死結(deadlock)。但這樣就沒問題了嗎？不，還有可能發生活結(livelock)。 這邊我為了示範 goroutine，先用最笨的碰運氣解法，也就是不刻意做任何資源配置，要在運氣很壞的情況下才會遇上 livelock。什麼是「運氣很壞的情況」？就是所有哲學家剛好在同一時間拿起同一邊的叉子。但實作上，由於我給每位哲學家一個隨機的思考時間 50mS（如下列程式碼），碰撞的機會是(1/50)^5，所以絕大部分情況下不會發生 livelock。 Wiki 上有介紹不需要碰運氣，保證不會讓 thread 飢餓致死的演算法，但我自己也沒搞懂，請容我日後再介紹。 解法與思路： 1. 所用 Channel 型態與定位？ 本題採用 5 個 buffered channel，分別代表 5 支筷子 初始化 這邊開始計時後，是一個 foreach。 老方法，用 sync.WaitGroup 同步 5 個哲學家 goroutine 結束時間。 給每一位哲學家起一個「WantToEat」的 goroutine，告訴他 i 你是幾號？又給入「PickLeftFork, PickRightFork, Eat, PutLeftFork, PutRightFork」五個函式的的 function reference。 2. 五個 goroutine 之間，如何交接棒？ 沒有交接棒問題，每位哲學家就憑運氣去搶左右邊的兩隻筷子。 要注意的只有三件事情： 無法同時搶到兩隻筷子的哲學家，必須先放棄到手的一支筷子。 已經同時搶到兩隻筷子的哲學家，吃完就必須退出餐桌。 還沒吃到的哲學家，可以無限次搶。 自循環 &amp; 外部啟動注意事項 這次解題沒有實作這些協調機制，5 個 goroutine 只靠前述的三條規範野蠻生長。 實作前述的三條規範的 WantToEat() 本質上就是代表「還沒吃到的哲學家，可以無限次搶」的無限迴圈。 「已經同時搶到兩隻筷子的哲學家，吃完就必須退出餐桌」是此迴圈的結束條件。 「無法同時搶到兩隻筷子的哲學家，必須先放棄到手的一支筷子。」是此迴圈其中一個分支。 有一行「return //吃飽離開」，整個流程最終目的就是要走到這一行。 這邊對於每一隻筷子的具體表現就是一個 buffered channel，迴圈流程如下： 先嘗試把自己的號碼塞入左邊的 buffered channel 成功了，就是搶到一隻筷子，往下。 失敗了，跳到「default: //無法拿起左邊筷子」，思考一下，然後從頭開始。 再嘗試把自己的號碼塞入右邊的 buffered channel 成功了，就是搶到兩隻筷子，開始吃，吃飽離開，退出餐桌。 失敗了，跳到「default: //無法拿起右邊筷子」，把已經搶到的左邊筷子還回去，思考一下，然後從頭開始。 在 console 輸出，可以看到代表每一位哲學家的 goroutine 詳細動作過程，錯過筷子次數並不多，大部分執行結果的錯過次數在 3~5 次（點擊以下的「完整解題程式碼」就能體驗）。 完整解題程式碼：  示意圖： "},{"title":"眾說紛紜的生長激素調控因子整理","date":"2020-06-29T16:00:00.000Z","url":"/2020/06/29/%E7%9C%BE%E8%AA%AA%E7%B4%9B%E7%B4%9C%E7%9A%84%E7%94%9F%E9%95%B7%E6%BF%80%E7%B4%A0%E8%AA%BF%E6%8E%A7%E5%9B%A0%E5%AD%90/","tags":["運動科學"],"content":"生長激素（Growth Hormone；GH）對於想要健身長肌肉的人來說，是特別重要的一項荷爾蒙，因為他能促進肌肉生長、又加速消耗脂肪，對於想要明顯線條好身材的人來說是好朋友。 所以，我們得知道怎樣可以讓生長激素更多？又怎樣避免生長激素減少？這是很多營養健身 YouTuber 會介紹的主題，但是營養健身 YouTuber 偶爾講到有些地方會與課本衝突，所以這邊地特整理: 我在教科書上找到的生長激素調控因子，讓我們有來源更明確、更權威的根據，掌握自己的生長激素。 YouTuber 講得比較有疑問之處，留待日後釐清。 解剖生理學，許世昌著，民國98年永大出版 比較特別的是，這邊寫到胺基酸的增減會影響到生長激素，這是我在其他地方都沒看到的調控因子。 運動生理學，林正常校閱，2002年麥格羅希爾出版（黑人跑步封面） 這張圖用很清楚的方塊來表示各個因子之間的調控關係， 生長激素並不是直接增肌，而是傳遞給肝臟，肝臟才以促生長激素(類胰島素生長因子)增肌。 生長激素的效果會對自身產生負回授。 然而，書中講到生長激素作用時，強調「靜效果是保持血漿葡萄糖濃度」。若以這點來看，眾多的生長激素調控因子中，可能只有「低血糖」這一項是鐵律，其他或許只是相關，而非因果？ 書中又給了更清楚的量化關係，顯示血中的生長激素與 VO2Max% 有極為強烈的關係！也難怪有些說法是「高強度間歇訓練可促進生長激素」。 肌力與體能訓練，林貴福等譯，2017禾楓出版（俗稱「藍聖經」） 這本書花了不少篇幅談生長激素，但沒有像其他幾本書說的那麼簡單，關注在相當多模凌兩可或很複雜的點上，例如： 低強度高反覆的阻力運動(28% 7RM)，不會提高生長激素濃度 女性對生長激素濃度的反應 訓練的適應 IGFs 真要說這本書讓我認識了什麼新的調控因子？大概就是重訓前後吃些蛋白質醣類吧（如下圖） 比較【力竭與不力竭】在重訓時的優劣勢｜健人訓練｜2017ep13 05:14 所說「氫離子、乳酸可以促進生長激素」，但我目前沒在任何文獻上看到這兩樣物質有被列為生長激素調控因子。 若更積極一點，進一步去跟生長激素扯上關係？我能想到的是，乳酸會被作為糖質新生的原料用，所以會間接提高血糖，故乳酸會抑制生長激素才對吧？"},{"title":"LeetCode Concurrency Go 語言詳解：Fizz Buzz Multithreaded","date":"2020-02-22T16:00:00.000Z","url":"/2020/02/22/LeetCode_Concurrency_Go%E8%AA%9E%E8%A8%80%E8%A9%B3%E8%A7%A3_FizzBuzzMultithreaded/","tags":["Go語言"],"content":"本次將會示範 goroutine 教學中常講到的「不要透過共享來通訊，而要透過通訊來共享」。 前言：由於 LeetCode Concurrency(併發) 還沒有 Go 語言版本，我先自行用 Go 語言來解題。為了能在 LeetCode 以外的平台獲得討論，所以我打算逐漸把自己的解題思路寫下。 本題 LeetCode 連結：  本題題目 給定一個數列從 1 ~ n，依序輸出，但是: 如果 n 可以被 3 整除，輸出 “fizz” 如果 n 可以被 5 整除，輸出 “buzz” 如果 n 同時可以被 3 與 5 整除，輸出 “fizzbuzz” 實作要求：使用 4 個執行緒實現一個多執行緒版本。一個 FizzBuzz 的 instance 要被傳遞到以下四個執行緒中: Thread A 會呼叫 fizz() 以檢查 n 是否可以被 3 整除？若可以就輸出 fizz Thread B 會呼叫 buzz() 以檢查 n 是否可以被 5 整除？若可以就輸出 buzz Thread C 會呼叫 fizzbuzz() 以檢查 n 是否可以被 3, 5 整除？若可以就輸出 fizzbuzz Thread D 會呼叫 number() 照常輸出原本數字 n 本題考核難點？判斷責任去中心化！ 我一開始認為「這題沒什麼難的嘛～還不就那些套路再用一次！」，所以最早的實作版本，是寫了一個中心控管的 goroutine，判斷整除條件後，再把輸出任務透過 channel 發派給其他 goroutine A, B, C, D。 直到我為了分享這題，將英文題目翻譯為中文的時候，才發現自己誤解題目了(尷尬)！題目真正的要求更困難，要各個 goroutine 自行負擔檢查整除條件的責任。所以只好重寫 XD 在過去的 LeetCode Concurrency 詳解中，我提到過很多次： goroutine 若不刻意控制，將無法保證執行的先後順序，因此本題就是要考核對 goroutine 順序控制的能力。 但前面幾題的解法，大多是把判斷責任中心化，方便控管順序。這次，與前面幾題不同的是，這一題要求把判斷責任分散到 thread A, B, C 中，所以每個 goroutine 也無法準確得知下一個要接棒的 goroutine 是哪一個？這樣的順序控制會由於分散化，變得更加困難。 By the way，我還解過「DiningPhilosophers」這一題用的就是去中心化方法，但目前還沒寫那一題詳解。 解法與思路： 1. 所用 Channel 型態與定位？ 依照題目採用一個 FizzBuzz 物件 pass 到各個 goroutine 之中，當中有 buffered channel streamBaton 長度為一，可儲存一個整數。 2. 四個 goroutine 之間，如何交接棒？ 這一題在 goroutine 之間交接棒的規則更複雜，所以我決定不像之前一樣指定的交接棒，而是每一個 goroutine 都把訊息丟到同一個 channel 裡面去，大家都去「各取所需」，看看是不是符合自己的整除規則？如果不是，表示自己還沒接到棒，要把數字再寫回 channel 讓應該接這一棒的 goroutine 可以讀取到資訊。 這樣有壞處，那就是會多很多次沒有命中的 channel 讀取，若不是自己要的還得把數值還回去。做個比喻，就像老闆雇用員工吧，因為不具備識人能力，都先雇用再說，不對再趕走。（只是比喻，如有雷同，純屬巧合） 受限於 channel 的性質，看了就會改變內容，所以若沒有命中就多了「還回去」的動作，無法如同 get 存取子一樣只讀不寫。 自循環 &amp; 外部啟動注意事項 首先，這個循環是從 0 開始，沒有人交棒給 0，所以 main() 要自己丟。 再來，本題不像之前有清楚的交接棒順序，不預設哪一個 goroutine 會收尾，所以需要用 sync.WaitGroup 同步 4 個 goroutine 結束時間。 最後，由於最後一個 print 交出去的棒子沒 goroutine 接，所以要記得關閉通道，否則在交棒點會發生 deadlock。（你想知道後果的話，可以在下面原始碼自行把 close 這行註解掉看看） 交接棒流程：PrintLoop() 視角 這一次採用去中心化的交棒決策，所以每一個 goroutine 的流程都是相同的，因此我將各自的「整除條件」PassCondition(i int)bool與「字串輸出」PrintString(i int)取出，以下列程式碼 PrintFizz() 為例： 其他的 PrintBuzz()、PrintFizzBuzz()、PrintNumber() 也都比照辦理。剩下都抽象為 PrintLoop() 以達到程式碼的 DRY，如下列程式碼： for loop 會獨自判斷 0~n 每一個數字是否滿足自己要輸出的條件？ 若滿足，就去公共的 channel streamBaton 裡頭看看，有沒有剛好與 i 相同的數字？ 若有，表示有某未知 goroutine 交棒給自己了，便可以輸出。輸出以後要交棒，只知道下一棒的數字會+1，但並不知道誰接棒？反正把棒子丟回去公共的 channel streamBaton 讓該接棒的自己接棒。 若無，表示這次讀取沒命中、表示自己還沒接到棒，要把數字再寫回 channel 讓應該接這一棒的 goroutine 可以讀取到這筆資訊。i-- 使 for loop 不會前進，繼續原地等待接棒。 動作完成後，要執行 runtime.Gosched()，使自己不會獨佔 CPU，令其他 goroutine 有機會可以動作。 3.「不要透過共享來通訊，而要透過通訊來共享」 過去幾次解題都用 unbuffered channel 的原因是，並沒有要共享什麼資料，就只要在 goroutine 之間交接棒，這個棒子上不需要帶其他訊息，因此 channel 用的也比較多，因為「交棒給誰？」的訊息用多個不同 topic 的 channel 區別。 這一次採用 buffered channel，是因為不只要交接棒了，還要透過一個 int 來指定下一個交接對象，這就是「透過通訊來共享」。 當我們要把一件事講清楚，除了講「應該是什麼」，最好也把「不應該是什麼」說明白，正反例都有更有助於建立清晰的認知。 那麼，要是我就故意反著做，硬要「透過共享來通訊」呢？很簡單，把 chan int 改成 int，其他部分做些相應修改就是了。兩個版本的程式碼都會放在下面的 The Go Playground 連結。 但是這兩種方法，在本題的執行結果卻完全相同！花費時間也沒有明顯差異。所以「透過通訊來共享」的優越性到底在哪裡？或許本題的要求不夠嚴苛，不足以展示出差異，而筆者自己也學藝不精，尚未參透。如果有讀者能說得清楚，歡迎在本文底下留言，筆者會非常感謝你。 完整解題程式碼： 「透過通訊來共享」版本（使用 chan int）:  「透過共享來通訊」版本（使用 int）:  示意圖： "},{"title":"select-case-default 忘記讓出 CPU 的地雷，只在我電腦上能跑的程式","date":"2020-01-21T16:00:00.000Z","url":"/2020/01/21/select-case-default%E5%BF%98%E8%A8%98%E8%AE%93%E5%87%BACPU%E7%9A%84%E5%9C%B0%E9%9B%B7%EF%BC%8C%E5%8F%AA%E5%9C%A8%E6%88%91%E9%9B%BB%E8%85%A6%E4%B8%8A%E8%83%BD%E8%B7%91%E7%9A%84%E7%A8%8B%E5%BC%8F/","tags":["Go語言"],"content":"這一篇其實是為了要補充上一篇「LeetCode Concurrency Go 語言詳解：Print Zero Even Odd」沒寫到的細節，但所要解釋的概念，是針對 mulit-channel 管理上可能會犯的錯誤，與 LeetCode 比較沒關係，只是我剛好在解這一題 LeetCode 時學到的，所以最後決定將這部分獨立成一篇文章介紹。 為什麼說是地雷？當程式在自己的電腦上正常，我會很容易以為自己是對的，而且這個現象與作業系統的排程細節有關，很難找一個明確的環境原因。 補充：我踩到的 select-case-default 地雷 你可以看到，我的解題程式碼 default 那段是這麼寫的： 以上其實是被高人「指點」後的。原本是這麼寫： 這樣在我的 MacBook 依然正常，但是拿到 The Go Playground 上面就掛了，你可以自己修改程式碼（那篇解題文章最後有程式連結），在 The Go Playground 上試看看會怎樣？ 原因是，雖然 select-case-default 會隨機均勻的嘗試每一個 case-default，但是並不會主動把 CPU 控制權交出去，需要用 runtime.Gosched() 或 &lt;-time.After(time.Microsecond) 把 CPU 讓出給其他 goroutine。否則，其他的 goroutine 將可能沒有機會動作。 C# 裡的 Application.DoEvents() 也是一樣的意思，讓別的事件有機會被觸發。 那為什麼我的 MacBook 正常跑完？難道是 CPU 使用數量限制嗎？我們來看看這兩個平台可用的邏輯處理器數量： The Go Playground: runtime.NumCPU=1 MacBook Air 2018: runtime.NumCPU=4 好的，我的 MacBook 果然有比較多邏輯處理器可用，但也不足以說明這就是原因。 於是，我索性在筆電上的程式碼開頭加上一行 runtime.GOMAXPROCS(1) 限制此程式與 The Go Playground 一樣，只能用一個邏輯 CPU。結果，字出來是變慢了，好像古老的打字機那樣，但也是順利正確的跑完了，無法重現 The Go Playground 上發生的錯誤。所以這樣的 bug，真的很難在不同平台上重現，是很不容易發現的地雷。"},{"title":"LeetCode Concurrency Go 語言詳解：Print Zero Even Odd","date":"2020-01-20T16:00:00.000Z","url":"/2020/01/20/LeetCode_Concurrency_Go%E8%AA%9E%E8%A8%80%E8%A9%B3%E8%A7%A3_PrintZeroEvenOdd/","tags":["Go語言"],"content":"前言：由於 LeetCode Concurrency(併發) 還沒有 Go 語言版本，我先自行用 Go 語言來解題。為了能在 LeetCode 以外的平台獲得討論，所以我打算逐漸把自己的解題思路寫下。這是我寫的第三題 LeetCode Concurrency Go 語言詳解，技術比前面兩題都要複雜。為了解釋到我自認夠清楚，寫的時間多花了好幾倍（1x = 2hr）。 本題 LeetCode 連結：  本題題目 The same instance of ZeroEvenOdd will be passed to three different threads: 同一個 instance ZeroEvenOdd 會被傳到三個 thread 裡面: Thread A will call zero() which should only output 0’s. Thread B will call even() which should only ouput even numbers. Thread C will call odd() which should only output odd numbers. Thread A 將會呼叫 zero() 並且只會輸出 0 Thread B 將會呼叫 even() 並且只會輸出偶數 Thread C 將會呼叫 odd() 並且只會輸出奇數 Each of the threads is given a printNumber method to output an integer. Modify the given program to output the series 010203040506… where the length of the series must be 2n. 每一個 thread 都會被傳入一個 printNumber() 以輸出一個整數。 修改已給的程式碼，使其輸出序列為 010203040506…，該序列長度必須為 2n。 本題考核難點？ 在一個未知長度的序列中，依照「0-奇數-0-偶數」的順序將數字印出，且一種元素只能由一個執行緒印出，代表各個執行緒之間要依照這個數列的規則溝通。 goroutine 若不刻意控制，將無法保證執行的先後順序，因此本題就是要考核對 goroutine 順序控制的能力。 與前面幾題不同的是，這一題最後工作的 thread 具有不確定性，視數列最後一個元素為奇數或偶數來決定，這點小小的提高了難度。 解法與思路： 1. 所用 Channel 型態與定位？ 本題採用五個 unbuffered channel，並且是 ZeroEvenOdd 的成員變數。 定位分別是: streamEvenToZero: Even() 交棒給 Zero() streamOddToZero: Odd() 交棒給 Zero() streamZeroToEven: Zero() 交棒給 Even() streamZeroToOdd: Zero() 交棒給 Odd() streamZeroToEnd: Zero() 交棒給啟動它的 goroutine 2. 五個 goroutine 之間，如何交接棒？ 自循環 &amp; 外部啟動注意事項 以前的文章說過，由於本題解法採用各個 goroutine 彼此循環交棒的方式，因此不能自行啟動，需要外界給訊號，所以在包住一整題的 PrintZeroEvenOdd() 執行各個 goroutine 同時以 zeo.streamEvenToZero &lt;- struct&#123;&#125;&#123;&#125; 作為起頭的火種 ，讓 main() 假裝自己是 Even() 交棒給 Zero()，以啟動交接棒循環。具體程式碼如下： 要特別注意的是，這個「啟動火種」也要寫成 goroutine，否則會由於執行當下尚未等到消費者「出世」，發生 deadlock！ 另外一種不用 goroutine 啟動的做法，也可以讓消費者先「出世」，在 goroutine 的阻塞中等待時，再給「啟動火種」。具體程式碼如下： 交接棒流程：Zero() 視角 中心化：由 Zero() 做控管中心，遍歷 0 to n 每一個數字，印完自己責任該印的 “0” 以後，根據數字性質決定要把棒子交給 Even() 或 Odd()。此處會用到 select-case-default。具體程式碼如下： 雖然順序都是固定的，但在此先假裝 Zero() 並不知道誰會交棒給自己？所以 Zero() 交棒（send to chan）以後，就會在 for-select 裡無窮迴圈，每一次 select{} 都會隨機選擇一個 case 或 default，也就是以亂槍打鳥的方式 polling 是誰交棒給自己？ 謎之聲：「難道有不是中心化的流程嗎？」，有喔！我解決「DiningPhilosophers」這一題用的就是去中心化方法，但目前還沒寫那一題詳解。 交接棒流程：Even() &amp; Odd() 視角 對於 Even() 與 Odd() 來說，流程很固定，只有 Zero() 會交棒給自己，印完數字後，也只需要交棒給同樣的 Zero() ，一種「哪裡來，就哪裡去」的概念。 唯一比較複雜的部分，就是數字「遞增」與「終點」的控制： 「遞增」每一次都是 += 2，不必解釋。 「終點」一開始就算好題目下的奇數上限、偶數上限，算法看程式碼也很清楚了，不解釋。超過終點就直接結束。 具體程式碼如下（太相似，故此處只放 Even() 舉例）： 收尾之一：為什麼要 Zero() 善後？ 由於題目的關係，Even() 或 Odd() 其中一個，都有可能是最後印出字元的 goroutine，若讓這兩者去收尾，流程上的不確定性比較大。因此，幾經考慮後，還是決定讓 Zero() 去收尾。 讓 Zero() 去收尾的套路，之前的詳解也寫過，就是先 return 的 goroutine 最後都要 send to chan 到負責收尾的 goroutine，收尾 goroutine 在最後一一將這些 chan 都 receive 掉。 但由於本題特性，可由題目給定數字的奇偶判斷，Zero() 會從哪個 channnel 收到收尾訊號？因此在 Zero() 最後段的 receive，是以奇偶數判斷要在何處等待。具體的局部程式碼如下： 收尾之二：代替 sync.WaitGroup.Wait() 的「chan receive 阻塞法」 主程式為了等待 goroutine 都結束才往下的同步情況，往往會用 sync.WaitGroup.Wait()。 根據本文前面所介紹，我已經將流程結束的不確定性減少，使得一定會由 Zero() 負責收尾，因此只要在主程式阻塞一個 chan receive，由 Zero() 結束前 send 一下，便可以將主程式打通，繼續往下。 具體的局部程式碼如下： goroutine Zero() 結束前 send 一下，交棒出去。 在主程式啟動完其他 goroutine 之後，阻塞一個 chan receive，等待被 Zero() 打通，繼續往下。 完整解題程式碼：  示意圖： "},{"title":"LeetCode Concurrency Go 語言詳解：Print In Order","date":"2020-01-18T16:00:00.000Z","url":"/2020/01/18/LeetCode_Concurrency_Go%E8%AA%9E%E8%A8%80%E8%A9%B3%E8%A7%A3_PrintInOrder/","tags":["Go語言"],"content":"前言：由於 LeetCode Concurrency(併發) 還沒有 Go 語言版本，我先自行用 Go 語言來解題。為了能在 LeetCode 以外的平台獲得討論，所以我打算逐漸把自己的解題思路寫下。這是我試水溫的第二篇。 本題 LeetCode 連結：  本題考核點？ 指定各種不同順序執行 First(), Second(), Third() 三個 goroutine，但三者都必須以不變順序印出字串，印出順序不受順序執行影響。 goroutine 若不刻意控制，將無法保證執行的先後順序，因此本題就是要考核對 goroutine 順序控制的能力。 解法與思路： 1. 所用 Channel 型態與定位？ 本題採用三個 unbuffered channel，並且串在一個 slice 裡。 分別是: streamSync[0]: First() 交棒給 Second() streamSync[1]: Second() 交棒給 Third() streamSync[2]: Third() 交棒給 PrintInOrder() 2. 三個(或說四個) goroutine 之間，如何交接棒？ 一開始由 PrintInOrder() 依照指定順序啟動三個 goroutine。 再看這三個 goroutine，只有 First() 可以不受限執行 Print，其餘都必須等待各自的 streamSync[i] 訊號，因此可以保證 “First” 先被印出。 當 “First” 先被印出之後，交棒給 streamSync[0]，然後… 被 streamSync[0] 卡住的 Second() 就可以印出 “Second” 被 streamSync[1] 卡住的 Third() 繼續等待訊號 被 streamSync[2] 卡住的 PrintInOrder() 繼續等待訊號 當 “Second” 繼續被印出之後，交棒給 streamSync[1]，然後… 被 streamSync[1] 卡住的 Third() 就可以印出 “Third” 被 streamSync[2] 卡住的 PrintInOrder() 繼續等待訊號 當 “Third” 最後被印出之後，交棒給 streamSync[2]，然後… 被 streamSync[2] 卡住的 PrintInOrder() 就可以往下執行，最後程式順利結束。 完整解題程式碼： 本題解答程式碼已經窮舉這三個 goroutine 所有啟動順序。  示意圖： "},{"title":"LeetCode Concurrency Go 語言詳解：Print FooBar Alternately","date":"2020-01-15T16:00:00.000Z","url":"/2020/01/15/LeetCode_Concurrency_Go%E8%AA%9E%E8%A8%80%E8%A9%B3%E8%A7%A3_PrintFooBarAlternately/","tags":["Go語言"],"content":"前言：由於 LeetCode Concurrency(併發) 還沒有 Go 語言版本，我先自行用 Go 語言來解題。為了能在 LeetCode 以外的平台獲得討論，所以我打算逐漸把自己的解題思路寫下。這是我試水溫的第一篇。 本題 LeetCode 連結：  本題考核點？ 指定次數交替執行 printFoo() 與 printBar()。若任由兩個 goroutine 分別各自 print，不能保證其結果一定會互相交錯。 goroutine 若不刻意控制，將無法保證執行的先後順序，因此本題就是要考核對 goroutine 來回交錯順序控制的能力。 解法與思路： 1. 所用 Channel 型態與定位？ 本題採用三個 unbuffered channel 分別是: streamFooToBar: Foo() 交棒給 Bar() streamBarToFoo: Bar() 交棒給 Foo() streamEnd: 結束訊號 2. Foo() 與 Bar() 如何交接棒？ 根據設定次數 n 重複執行 每一輪都要得到 Bar() 交出棒，才會執行 printFoo() 以印出字串 印出字串後，以 this.streamFooToBar &lt;- struct&#123;&#125;&#123;&#125; 交棒給 Bar() 下方的 Bar() 也是一樣的道理。 3. Foo() 與 Bar() 如何收尾？ 這裡要特別注意的是，Foo() 與 Bar() 只有差異在最後一行，用意是什麼？ 多個 goroutine 用 unbuffered channel 互相交接棒，會有一個尷尬的情況，就是互為消費者、又互為生產者，因此先 return 的 goroutine 沒事，但是後 return 的 goroutine 會由於消費者消失，send to channel 的時候發生 Deadlock。 根據本題遊戲規則， printBar() 一定要比 printFoo() 晚執行，因此不做特別處理的話，會在 Bar() 試圖做最後一次交棒時，由於消費者消失發生 Deadlock。 我的應對方式，就是讓 Foo() return 前做一次無特別作用的接棒，這樣就可以避免 Bar() return 前找不到消費者的問題。 4. 自循環啟動 前面說過，本題解法採用 Foo() 與 Bar() 彼此循環交棒的方式，因此不能自行啟動，需要外界給訊號，所以在 main() 執行各個 goroutine 以後以 fooBar.streamBarToFoo &lt;- struct&#123;&#125;&#123;&#125; ，讓 main() 假裝自己是 Bar() 交棒給 Foo()，以啟動交接棒循環。 5. 特別條件下，用 unbuffered channel 取代 sync.WaitGroup 為了等待多個 goroutine 都結束再往下，一般來說用 sync.WaitGroup.Wait() 是標準做法。但這一題還有更輕量的方法。 雖然這一題是 Concurrency，但是各個 goroutine 的結束順序已經被定死，我們很清楚知道誰負責收尾，所以讓負責收尾的 goroutine send to unbuffered channel，然後在 main() read 掉，這樣就不需要使用 sync.WaitGroup 執行各個 goroutine 以後，main() 會由於 &lt;-fooBar.streamEnd 還沒有被傳入而被卡住，這就相當於 sync.WaitGroup.Wait() 的作用了。 由於是 Bar() 會做最後一次有意義的執行，因此讓 Bar() return 之前執行 this.streamEnd &lt;- struct&#123;&#125;&#123;&#125;，這就相當於交棒給 main()， main() 終於可以從被卡住的 &lt;-fooBar.streamEnd 往下（因為終於有東西可以讀），就像便秘了三天突然暢通一樣！ 完整解題程式碼：  示意圖： "},{"title":"解決在 macOS 上安裝 OpenCV 遇到「‘opencv2/opencv.hpp’ file not found」地雷","date":"2019-10-09T16:00:00.000Z","url":"/2019/10/09/%E5%9C%A8%20macOS%20%E4%B8%8A%E5%AE%89%E8%A3%9D%20OpenCV%20%E9%81%87%E5%88%B0%E7%9A%84%E5%9C%B0%E9%9B%B7/","tags":["OpenCV","Mac","除錯"],"content":"安裝 OpenCV 一直都是堪稱玄學的技術，猶記得我大四第一次入門花了兩週才安裝成功，其中一個原因是我自己對「編譯、連結、載入、執行」不熟悉，這也是我技能樹有待補強的地方。 是說，這麼多年過去了，Windows 和 Linux 上我也安裝了無數次，EmguCV 也搞得定，換到上 macOS 仍須鬼打牆一整天才找到解方。 錯誤如下： fatal error: ‘opencv2/opencv.hpp’ file not found 檢查編譯設定 我又反覆檢查 VSCode 中 task.json 的編譯設定，確認給出的路徑裡的確有 libs 透過 IntelliSense 驗證 includePath 正確性 而我在 c_cpp_properties.json 中給 IntelliSense 的 includePath 是這樣， /usr/local/Cellar/opencv/4.1.1_2/include/opencv4/** IntelliSense 能正確識別叫出 namespace cv 底下的東西，所以也驗證了是正確的。 失敗：改 include 如果我把 include 從這樣 改成這樣 的話，「fatal error: ‘opencv2/opencv.hpp’ file not found」會消失，但是換成其他的更深層的 OpenCV hpp 找不到 include。 別忘了要改回來。 成功解決：soft link 最後發現，在 /usr/local/inlcude 建立一個 softlink 指向 opencv2，就可以成功編譯。 是解決了，但我依然說不清楚誰去參考了「/usr/local/include/opencv2」因此得到錯誤或正確的結果。 參考來源："},{"title":"Charlotte 碳排放評估案例","date":"2019-03-19T16:00:00.000Z","url":"/2019/03/19/Charlotte%E7%A2%B3%E6%8E%92%E6%94%BE%E8%A9%95%E4%BC%B0%E6%A1%88%E4%BE%8B/","tags":["GIS","地理資訊系統","資料科學","數據分析","機器學習"],"content":"注意：本文為隨興、無組織的讀書筆記，如果你看不懂我寫什麼是正常的。我只是想記錄一個數據分析的案例。 摘要 本文為闡述美國環保局對北卡羅萊納州最大的城市－Charlotte，所做的碳排放模擬，想了解＂精明增長（Smart Growth）＂與＂蔓延增長＂兩種土地利用策略對交通設施的變化，進而了解對碳排放的影響。 原始數據與處理(1)-社區特徵聚類 步行可行性 可達性 地塊 工業區域 城市屬性值 將 5 種特徵以 K-means 聚類為 8 種社區類型。 原始數據與處理(2)-人口預測 2003 Woods &amp; Poole 經濟學資料庫 使用區域預測模型(?)預測到2030年 3 種外插法預測 2030~2050 2029~2030 一次導數 1991~2030 二次導數 前兩種方法的綜合，使用 2030 年的二次導數直推到 2050 年 最後，對三種外插法的結果平均 名詞解釋 TOD(Transit-Oriented Development)：以公共交通为导向的发展 基礎年：2010 年 mph：英里每小时。1 mph = 0.44704 m/s 集計處理(Aggregate)：基於 GIS 單位的 downsample，例如將單位由＂區＂擴大到＂縣市＂。 美國環保局(EPA)排放因素模組－MOBILE6 採用特徵：燃油類型、引擎技術、路段平均速度、設施類型(高速公路、主幹道)、排放控制標準、檢查與維修、環境條件(溫度、濕度、大氣壓力)、車型(輕型車、重型車、公車)與車齡 模擬至2050年的結果 就業（兩方案總就業變化量相同） 蔓延增長：由市中心向外擴散 精明增長：由市中心與公車站點向外擴散，形成多中心格局 住宅（兩方案總住宅變化量相同） 蔓延增長：由市中心向外擴散 精明增長： 車輛行駛里程 蔓延增長/基礎年=97.5% 精明增長/基礎年=86.7% 路網平均行駛速度 (基礎年,蔓延增長,精明增長) =(42, 33, 35)mph 交通行為對比(精明增長：蔓延增長) 公車乘客里程數：高50% 小汽車乘客里程數：低6.3% 步行量：高54% 公車供給量：多60% 出處 宋彦, and 陈燕萍. “城市规划评估指引.” 中国建筑工业出版社(2012). 第十章:信息技术在国外规划评估中的应用。 宋彦, et al. “城市空间结构对 PM2. 5 的影响——美国夏洛特汽车排放评估项目的借鉴和启示.” 城市规划 5 (2014): 9-14. "},{"title":"同事怎麼還不commit🤬別生氣！你們可能踩到 SVN 的大小寫地雷","date":"2019-03-13T16:00:00.000Z","url":"/2019/03/13/%E5%90%8C%E4%BA%8B%E6%80%8E%E9%BA%BC%E9%82%84%E4%B8%8D%20commit%EF%BC%81%E5%88%A5%E7%94%9F%E6%B0%A3%EF%BC%8C%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%B8%A9%E5%88%B0%20SVN%20%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%AF%AB%E5%9C%B0%E9%9B%B7/","tags":["技術","版本控制"],"content":" 今天發生一則狀況 我這邊 update SVN （Git 叫 pull）上的程式碼以後，遲遲編譯不過！ 我就去責問同事 A 你怎麼又忘了把 instance 的宣告上傳？每一次 commit 要注意所有的 change 啊！同事 A 一臉為難又莫名其妙，我回座位去做其他事，等他更新 SVN 上的程式碼。 過了十幾分鐘，同事 B 又跑來問同事 A 程式碼更新了沒？同事 B 也遇到跟我一樣的狀況。急著要程式碼的同事 B，就叫同事 A 手動把內容傳給他了！ 這就怪了，難道中間這十幾分鐘，同事 A 都在位置上玩手機？ 追查案情 首先直接看 SVN 上的程式碼，欸~怪了，明明是有更新的！ 我這邊 local 端是否確實 update（Git 叫 pull）？有，reversion 號碼是一樣的。 往前追查 log，發現這個檔案有被改過檔名，xxx.designer.cs 改成了 xxx.Designer.cs，就改了一個字母 d 的大小寫。 於是我懷疑，是不是大小寫差異，讓 SVN 看做是不同檔案而出了差錯？ 半個水落石出 搜尋＂Tortoisesvn filename lower case＂，果然有一大堆人有跟我類似經驗。 Windows 檔名不區分大小寫，但是 SVN 區分大小寫。 所以在 Windows 底下，由小寫改過大寫以後，會造成錯亂。 我不知道這個錯亂的詳細過程是如何？目前還找不到，只知道會造成該檔案有人可以 commit 上去，別人也可以在 SVN server 上看最新程式碼，但是就沒辦法透過正常的 SVN update 把檔案拉下來。 避免方法 下次已經被 add 進 SVN 的檔案，如果要改檔名大小寫，記得要透過 SVN 本身的改名介面，不要直用 Windows 的方法改，不然就會跟我一樣踩到地雷，也委屈了倒楣的同事 A 喔！ 附註 基於某些原因，大家不得已在同一個 branch 上開發，所以很容易彼此干擾 基於某些原因，沒辦法把 SVN 換成 Git，所以很容易被這種事雷到 "},{"title":"用 Bayesian 推論出地址遺失值","date":"2019-01-09T16:00:00.000Z","url":"/2019/01/09/%E7%94%A8Bayseian%E6%8E%A8%E8%AB%96%E5%87%BA%E5%9C%B0%E5%9D%80%E7%BC%BA%E5%A4%B1%E5%80%BC/","tags":["資料科學","數據分析","機器學習"],"content":" 情境 我有一大堆人工輸入的地址清單，可是「XX區」大家經常懶得寫，那我要如何找出「XX區」到底是哪一區呢？ 現況 假設要被推論的地址是＂台北市羅斯福路5566號＂，已知訊息如下： 該地址新開了一間85度C咖啡店 羅斯福路只出現在大安區、文山區與中正區 大安區地址數量:文山區地址數量＝5:1 由[原本地址清單 &amp; 85度C官方網站店鋪清單（註*）]兩份表關聯對比得知，地址為大安區時有85度C的機率為 0.000003，地址為文山區時有85度C的機率為 0.000019 註：為什麼不直接從85度C官方網站店鋪清單查詢遺失的「XX區」？有可能這家店是新開的(如假設 0.)，官網資料還沒 update。 解法 根據貝式定理（Bayes’ theorem） P(該地址在大安區)/P(該地址在文山區) = (P(大安區地址)/P(文山區地址))×(P(85度C|大安區地址)/P(85度C|文山區地址)) = 5×(0.000003/0.000019) = 0.7895 倍 結果 &lt; 1，故推論該地址在文山區。 使用貝式定理的差別在哪裡？ 在此案例中，如果只看地址清單，會推論地址在大安區，因為大安區出現在地址清單中的頻率較高。但由於新增了外部證據，因此推論結果發生改變。 疑問 Q: 如果那個有問題的地址，剛好不是85度C呢？ A: 那就看看有沒有小七、全家、OK等等之類的（先別急著罵我講幹話）。貝式推論本來就是一個「找證據來說話」的過程，因此手上有不同證據，就會得到不同結論，故也有人說「貝式推論本身就帶有偏見」。 此文章為應用數學假設性探討，以上數據皆為亂掰。如有雷同，純屬巧合。"},{"title":"如何降低食慾又使進食容易有飽足感？","date":"2018-12-31T16:00:00.000Z","url":"/2018/12/31/%E5%A6%82%E4%BD%95%E9%99%8D%E4%BD%8E%E9%A3%9F%E6%85%BE%E5%8F%88%E4%BD%BF%E9%80%B2%E9%A3%9F%E5%AE%B9%E6%98%93%E6%9C%89%E9%A3%BD%E8%B6%B3%E6%84%9F/","tags":["運動，健康"],"content":"這是大學時某堂運動健康相關通識課（課名忘了）的筆記內容，當時授課老師是王宏豪。 因為有人問起，所以我寫在這裡。不過筆記放在台灣，我就先憑印象寫，等回台灣再補充。 已經請我妹拍照傳過來了。 第大一類：大家常聽到的那種 吃飯之前先喝湯 多吃富含纖維的蔬菜 第大二類：你可能沒聽過的那種 注意力不要放在食物上類 站著吃身體緊張，會更專注食物，要坐著吃 邊吃邊聊天、吃到分心 吃飯配電視 運動也可以節食類 食慾水準 中 低 中高 極高 生活型態（活動量：低→高） 坐式生活 輕微運動 專業運動員 體力勞動者 你以為自己還在餓類 細嚼慢嚥 食道也會容納食物，但是要穿過食道、到達胃的食物才會造成飽足感。吃快與吃慢，產生飽足感時，食道中的食物量就會不一樣，這現象也剛好支持一些長輩說「吃八分飽」的理由。 老師說他曾教過減肥，要求學員吃一支玉米，不能一口一口吃，要一顆一顆吃，學員說一支玉米竟然意外的有飽足感！ 食慾節律類 飢餓素有節律性，23點~1點最高峰，所以這段時間最好睡覺。 萬一吃了，腸胃蠕動慢、吸收好、易胖、大腸癌風險高。 附錄：三頁筆記原稿 "},{"title":"我看中國大陸 Open Source 風氣弱於台灣的原因，心態面＆技術面","date":"2018-12-08T16:00:00.000Z","url":"/2018/12/08/%E6%88%91%E5%A6%82%E4%BD%95%E7%9C%8B%E5%BE%85%E4%B8%AD%E5%9C%8BOpenSource%E9%A2%A8%E6%B0%A3/","tags":["大陸","批判","開源"],"content":"基於眾所皆知的原因，本文請到以下 Medium 連結閱讀。 "},{"title":"聽華工周冬雨分享中國大陸重考生的經驗","date":"2018-11-23T16:00:00.000Z","url":"/2018/11/23/%E8%81%BD%E8%8F%AF%E5%B7%A5%E5%91%A8%E5%86%AC%E9%9B%A8%E5%88%86%E4%BA%AB%E4%B8%AD%E5%9C%8B%E9%87%8D%E8%80%83%E7%94%9F%E7%9A%84%E7%B6%93%E9%A9%97/","tags":["大陸"],"content":"昨天早上游泳完，搭公車去上班的路上，聊了一個神韻相似周冬雨的妹，原來是華南理工大學的食品科學博士生，正要到我公司附近的公務機關辦護照。剛好她出了一些狀況，要辦到下午，所以就約她吃了午餐。 聊天中得知她曾「复讀高四」，同等於台灣的重考。但中國大陸叫做「复讀」是有原因的，雖然目的與台灣的重考相同，但制度差異下手段有別，「复讀」的確是更貼切的形容。 在台灣，學籍與升學考試是各自獨立的事務，你脫離學校以後，就算是一個社會人還是可以去考大學；在中國大陸不行，你一定要在高中有學籍才能報考大學，那高中畢業了想重考怎麼辦？你就要找一間願意收你的高中念高四。也會有類似台灣補習班的機構，但是不能幫你報名考大學，也不能像台灣一樣不依靠任何機構自己去報名大學入學考試，這就是中國大陸叫「复讀」而不叫做「重考」的由來。 Q1：這是高中轉學考嗎？ A1：不算。你就想成念高中可以 fork 好了。 Q2：fork 到另一間高中的高四，就可以再拿一張高中畢業證書? A2：是的，沒錯。 中國大陸考大學最強的就是「衡水中學」，但若拿台灣的建中來比喻，並不恰當，因為建中可以放飛自我，但衡水中學是軍事化管理，連吃飯都有固定座位、專人打飯收餐盤，吃完就可以空手離開座位、讓你連邊吃邊聊天的機會都沒有。 這位華工周冬雨當初就想去衡水中學讀高四，但是花了3萬RMB 還不夠（費用依你前次考大學成績決定，若前一次考上北京理工，可能只要花幾千 RMB），還得找關係，找了一位學校裡的主任，談好認他當舅舅再請他吃頓飯就可以，但該位主任最後還是怕出事，反悔了。 這段重考的經歷，對台灣人來說非常特別，但她說，這只是中國大陸复讀生普遍有的經驗而已。 （照片左邊是當天早上拍的） （照片右邊是受訪者本人）"},{"title":"中國大陸５種行政地雷－辦港澳台人員就業證的經驗","date":"2018-09-21T16:00:00.000Z","url":"/2018/09/21/%E4%B8%AD%E5%9C%8B%E5%A4%A7%E9%99%B8%EF%BC%95%E7%A8%AE%E8%A1%8C%E6%94%BF%E5%9C%B0%E9%9B%B7%EF%BC%8D%E8%BE%A6%E6%B8%AF%E6%BE%B3%E5%8F%B0%E4%BA%BA%E5%93%A1%E5%B0%B1%E6%A5%AD%E8%AD%89%E7%9A%84%E7%B6%93%E9%A9%97/","tags":["大陸","管理","批判"],"content":"這是一個「踏破鐵鞋辦文件，得來全不費工夫」的故事。 上班到一半的時候，剛去幫我辦「港澳台人員就業證」的人資，突然拿了一份讓我傻眼的公文來。公文內容的重點是： 港澳台人員若要在當地就業，必須要多做［霍亂、黃熱、鼠疫、痲瘋、性病、開放性肺結核、愛滋、精神］這8個體檢項目。 這是公司人事要去幫我辦證當下，才碰的壁，並不是事先收到的通知。天啊，這些規定我從來都沒有聽說過！這真的不是我或公司疏忽。後面會提到，是由於一個離譜的原因。 地雷 1: 訊息不透明造成的多餘奔波 在中國大陸許多公家機關辦事都是這樣，往往在網路上查不到官方發布的相關辦理規定，一搜尋都只是各家傳播媒體的相關新聞、或者＂百度知識+＂上路人甲乙丙的回答。打電話去問呢？問到的規定，往往跟現場說的又不同。這不是只有來自境外的台灣人才會遇到的事，我聽過當地人抱怨也不少。 然後，我也沒辦法，只好照辦了。但霍亂、黃熱、鼠疫、痲瘋、性病、開放性肺結核、愛滋、精神病，這些特別的體檢項目要去哪裡檢查呢？辦就業證的地方也順便給了個清單。 其中，免於公開的部分，我看了真是傻眼！要給就業大眾的行政命令居然免於公開，這在台灣是不可能發生的事。 這三家都是同屬於「廣東國際旅行衛生保健中心」底下的分支機構，體檢收費不低，比中國大陸的大醫院還要貴，但是卻有一間「番禺區國際旅行衛生保健中心」是免費的？於是我上網一查，官網竟然獨漏這一家的資料。再打電話去問才知道，這一間最晚成立，還沒有設收費機，所以暫不收費。所以我就問清楚要攜帶哪些文件？準備好過去。 從我上班居住的地方，搭公車轉地鐵、再轉共享單車，到番禺區國際旅行衛生保健中心要兩個小時。 等我到了以後，櫃檯沒有人，喊了半天才有一個像是路人的大媽蹣跚的走出來。她接走我遞交的文件，看了看以後 「我们这是免费的，所以只能给在这里就业的人检验」 「這裡不是有附上就業證明嗎！」 （氣！） 「台湾人要附上台胞证啊，你这张是台湾居民往来大陆通行证」 「這就是台胞證啊，台胞證只是簡稱啦！」 「你看我们系统，没有这张证可以选，就只有台胞证可以选」 （我要抓狂了！） 「我还是不确定能不能给你办，你去问我们主任吧，他的办公室在 balbal…」 （爆炸！） 幸好該處的主管看起來不是一個難商量的人，很快就同意讓我辦理體檢。 地雷 2: 沒有明文規範，怎麼辦？都是看有權力的人怎麼說 不像台灣大小事都有明文規範、條文優先於慣例。中國大陸即使是簡單的公務流程，也存在非常多模糊地帶。第一線辦理人員的素質通常很差，就只是個文書機器人，並不了解負責業務的相關規定，一定要請示過主管才知道怎麼做。 「國際旅行衛生保健中心」聽起來就是很高大上的地方，那體檢很嚴謹摟？錯！除了抽血、身高體重、心電圖這些檢驗項目以外，不是還有一項＂精神病＂要檢查嗎？這不是驗血可以驗得出來的吧？但從頭到尾沒有醫生為我問診過。 「醫生呢？不是還有醫生問診嗎？」 「医生去吃午饭了」 但我早上 10:30 就來了，沒看醫生出現過。 「那怎麼辦？剩下的檢驗項目要等到哪時候？」 「前面不是有问诊了吗？」 「不是，那個是護士小姐給我做色盲檢查和心電圖」 「外面轉角有家店可以打印照片，等你打印回来看看医生吃完了没」 結果是：我印完照片，也沒看到醫生，他們說這樣就可以了。 看起來是因為保健中心本身的怠惰，就順便給你方便。但如果你是要看這份體檢報告的用人公司呢？你會不會怕？ 地雷 3: 看起來乾淨整齊高檔次的機關，做事不一定就嚴謹 相比於受歐美影響大的台灣、日本來說，中國大陸是一個高度崇尚外表的社會，內在與外在的差距，往往大到台灣人難以想像，通常是內在極大的落後於外在。「外表精緻華麗，內心缺乏靈魂」是中國大陸一線大城市經常給我的感受，「人不可貌相」在中國大陸更貼切。 因為搭車來單程就要兩個小時，實在是太遠，我就依照官網規定（如下圖）請他們用 EMS 寄件給我。 然而櫃台大媽說「没有寄，我们这里没有帮人邮寄的，你得自己来取」，即使拿出了官網的說明，大媽依然像是看不懂文字一樣的不為所動。最後，我只好認命地再跑一趟。 地雷 4: 即使有明文規範，承辦人員也不鳥，怎麼辦都是看他爽 中國大陸各行各業普遍缺乏法治、契約、敬業的觀念，就算是公務機關也一樣，大部分大陸人從小到大吃虧習慣，都已經順從這一套了，所以很少有人會去申訴，因此這些惡習就更加穩固。通常外商或港、台資企業會稍微好一點。 過了一周，我就來取件。 因為前面踩過的地雷實在太多，我特別要求當場拆開信封看，確認是不是真的有霍亂、黃熱、鼠疫、痲瘋、性病、開放性肺結核、愛滋、精神病這八項檢驗結果。還好這個要求沒有被為難，大媽這次居然意外的盡責，提醒我說，信封是有騎縫章的，拆開檢查完以後要再給他們重新封一次，否則其他機關不會收件。 好不容易折騰完這一番，我又搭了兩個小時的車回去公司。將體檢報告拿交給人資以後，下午卻傳來了這樣的訊息（如下圖）。 人事告訴我，當天新政策已經實施了，港澳台籍人士到中國大陸就業，再也不用辦理就業證了，所以相關的特別體檢規定也隨之作廢。花了［2小時車程＊4次＋挨一針］奔波來的文件，通通用不到了。幸虧人事下了「見證歷史」這個註腳，才讓這些努力沒有徹底付諸東流的白費感。 地雷 5: 政策詭譎多變 這有時候是好處、也是壞處。往往可以看到整治、改進推行得很快。但規定的多變，也讓中國大陸的長期投資難免投鼠忌器，不論人或企業都比台灣浮躁、比較偏好短期回收的投資。 以上種種坑，我絕對不是第一個遇到。即使有了經驗，今後也不會是最後一次遇到（除非現在打包回台）。果真是「物離鄉貴，人離鄉賤」啊！ 全文刊登於「換日線」，致謝編輯張翔一給予修改意見。"},{"title":"LINQ 如何不對參考重新賦值，就使物件對自身有副作用？","date":"2018-09-20T16:00:00.000Z","url":"/2018/09/20/LINQ_Who_to_side_effect_itself/","tags":[".Net","C#"],"content":"目前工作由於領域的限制，必須要用 C# 來完成以前用 Python + Pandas 做的許多表格操作。在 C# 中，相當於 Python pandas.DataFrame 的型別是 System.Data.DataTable。 C# : System.Data.DataTable == Python : pandas.DataFrame 為了程式碼清爽精簡，我通常不喜歡寫 dataTable = dataTable.LINQ_func()，最好 dataTable.LINQ_func() 就可以對自身產生副作用。 這邊就要介紹一個以為 dataTable.LINQ_func() 可以產生副作用，結果踩到雷的例子。 先看看這段的程式碼, 你認為會輸出什麼 ? 結果發現對 Col_0 的寫入沒有成功，沒有副作用，Select 並沒有改變 dataTable 的內容。 如果加上一個看起來無關痛癢的 .ToList() 卻改變輸出了，對 Col_0 的寫入成功了。 這是為什麼？為什麼看似沒有給 dataTable 重新賦值得 .ToList() 會有不同結果？ 解釋 因為所有的 LINQ 都只是一種「預約命令」，要等到對 IEnumerabe 跑 foreach 才會執行 LINQ。如果要立刻生效，必須使用強制查詢。 強制查詢 方法1：呼叫 ToList() 或 ToArray() 可以強制查詢。 方法2：Count、Max、Average 和 First 這一類「彙總方法（Aggregation Method）」雖然沒有明確呼叫 foreach，但實作要 foreach 才能回傳結果，因此呼叫彙總方法也能完成強制查詢。 注意 但以下這樣是不會生效的。 因為 ToList()、ToArray() 或 Aggregat Method 必須要與 LINQ 寫在同一個敘述式。 但是，這樣又會生效了 因為 LINQ 建立的「預約命令」已經被寄託到參考 t 之上。 參考資料 LINQ 查詢簡介 (C#) - 查詢執行 LINQ使用细节之.AsEnumerable()和.ToList()的区别 "},{"title":"ThinkPad X1 Carbon Thunderbolt Firmware Update Tool Fail","date":"2018-08-30T16:00:00.000Z","url":"/2018/08/30/ThinkPad_X1_Carbon_Thunderbolt_Firmware_Update_Tool_Fail/","tags":["Geek"],"content":"這個更新一直失敗，問了一下同樣用 X1C5 的朋友更新沒問題。 想到要強制連接 AC adaptador，我就去借了原廠的來用看看，結果還是不行（不過有見識到原來 Lenovo 65W Type-C 也有做很小的） 先在這裡做個草率的紀錄吧，目前還沒有空深究這個問題。 "},{"title":"中國大陸工作＼找不到＼條件差＼不給社保，怎麼辦？","date":"2018-08-23T16:00:00.000Z","url":"/2018/08/23/%E4%B8%AD%E5%9C%8B%E5%A4%A7%E9%99%B8%E5%B7%A5%E4%BD%9C_%E6%89%BE%E4%B8%8D%E5%88%B0_%E6%A2%9D%E4%BB%B6%E5%B7%AE_%E4%B8%8D%E7%B5%A6%E7%A4%BE%E4%BF%9D_%E6%80%8E%E9%BA%BC%E8%BE%A6/","tags":["大陸","批判"],"content":" 本文沒有要告訴你解決方案，我只想給你一點心理建設 某 FB 社團，有個說想要去中國大陸工作的人，抱怨某資方不想給他應有的社保，這些都法律規定的，怎麼可以這樣等等。 然後我就告訴他幾件事： 法律規定的權利從來都不是天賦，說到底還是跟你的生產力有關（我唸過經濟學後才懂這個道理） 這個世界通用的規範是叢林法則，不是各國法律 建議他別到中國大陸工作了，最好只留在台北市就業 只要走出台北市，都是都市叢林，中國大陸更是。 中國大陸能把事情做到 60 分的人很多，跟螞蟻一樣多。但是再往上，大約是以每 10 分就只剩下 1/1000 的速率在減少。所以魯蛇不要想說來大陸有多好，對手更多、可取代性更高、只會過得更苦而已。 我說的 60 分大概是什麼水準哩？ 吃一頓飯氣得你腦充血，但最起碼會飽、不會食物中毒 寫程式能動，但是把輸入資料 column index 換一下馬上 crash 總之，民間提供各種有償服務的人，有很高機率不完全給付，收了錢還很無恥的要你將就一下。大陸能崛起的連鎖服務業品牌、外賣拍賣平台等，幾乎都有很強力的回饋機制在處理這些＂民族性＂問題。 公部門的話，很多對民眾的要求與規範，都是第一線人員嘴巴上說了算，通常拿不出白紙黑字的條文，可能有但他懶得去了解、也有可能根本沒有條文。但不管什麼情況，大部分都是組織裡有權力的人說了算數。 舉個例子，我為了把小紅點賣到國外，去中國郵政寄信很多次，一般大陸人對中國郵政都沒我熟。每個行員，看到一個台灣人想要寄塑膠粒到國外，都嚇得提出一推要求，有登記證件的、拆信檢查的、寫國外中文地址的、寫價值說明的、請示長官七推八拖的，每次都寄一樣的東西，遇到的要求都不一樣，最後還是把東西寄到了。 這種鬆散，少部分時候能給自己帶來好處，但能選的話，我寧願選擇比較法治的環境。 從我踏上西進求職開始，到現在吃了很多虧、受了很多委屈，很多只是沒說。直到我領了第一個月薪資，有種一切終於都回收的感覺，就算錢領走馬上逃回台灣，也算不虛此行了。 到大陸不是登山健行，是叢林冒險，迷惑、衝突、忍耐、委屈、恐慌，都是少不了的體驗。我摸索很久才找到一個還不算差的起點。如果等級不夠就別硬闖，台灣作為新手村練兵還是不錯的。 紅色標語照片是我在 2018-5-11 於重慶拍攝 中國郵政照片是我在 2018-6-6 於廣州拍攝 "},{"title":"中國大陸職場歧視「土著」現正流行中？如果台灣企業也開始「歧視天龍人」呢？","date":"2018-08-22T16:00:00.000Z","url":"/2018/08/22/%E4%B8%AD%E5%9C%8B%E5%A4%A7%E9%99%B8%E5%8B%9E%E5%8B%95%E5%B8%82%E5%A0%B4%E7%9A%84%E5%9C%9F%E8%91%97%E6%AD%A7%E8%A6%96/","tags":["大陸","管理","批判","社論","經濟"],"content":"就業歧視，並不是僅發生在「人才過剩」、「低薪過勞」的台灣，就算是現在許多人眼中的「機會之地」中國大陸，一樣有著就業歧視，而且對岸的狀況，可能比台灣更嚴苛、更小題大作、更加「標籤化」： 在今日陸企，「插大」都可能算是履歷汙點 我就曾在大陸求職時，因為填履歷看到「專升本」這個選項，就問了一下這是什麼意思？某大企業的人資（ HR ）解釋完後又說，她們公司如果要大學畢業的職位，不會接受「專升本」這種入學方式的大學畢業生（相當於台灣專科生插大轉學考）──我在台灣，從未聽過連「入學方式」都可以當作明文的入職門檻，可見中國大陸社會，是如何「積極」地給人貼標籤。 更經典的例子，還有美團外賣的「黃泛區事件」── 「美團網」是中國大陸最知名的外賣點送餐 App，該公司曾經傳出招聘時設下「不要黃河氾濫區、不要東北人、不要信中醫」的門檻，該事件在大陸論壇鬧得沸沸揚揚，後來該公司以「小編個人行為、懲處辭職」了事。但類似的「地域歧視」、「身份歧視」等等事件與話題，在大陸的畢業求職季，從沒涼過。 得天獨厚的「土著」，竟然也會被歧視？ 不過，除了上述的種種例子以外，本篇文章特別要來談談，現今中國大陸一線大城市中，有一種很特別的就業歧視，那就是歧視「土著」： 什麼是「土著」呢？這指的不是傳統定義中的「原住民」，而是大陸網路用語──土著指的是一線城市中具有戶籍的「當地人」，也就是上班日住家裡、不用付房租的人。「土著」還有更負面的意思，有點類似台灣所說的「米蟲」，用以諷刺都靠家裏收房租維持生活，上班只是因為無聊的人。 由於中國大陸特殊的戶口政策，擁有一線大城市戶口，等於人生起跑點就往前了一大截，因此「土著」原先是對這些得天獨厚者的調侃用詞。但到了職場上，土著如今卻有了相反的處境： 原來，有越來越多的中國大陸企業發現，職場上工作難免有不如意，導致員工可能想辭職、想換工作。但如果求職期間還是能住家裡、不用付房租，甚至家中還能持續收租維持收入，「任性離職」就容易得多；在職場上，「土著」們自然也就沒那麼「順從上意」。 所以在工作壓力大的一線城市如北、上、廣、深，眾人口耳相傳，有越來越多公司出現「歧視土著」的潛規則──擁有當地戶口，反而從履歷上的加分項變成扣分項。例如中國大陸許多討論區，近來都有面試者信誓旦旦，某一線城市的大公司，一看到求職者是有戶口的當地人，談工資時就先打壓個數千人民幣再說！（參考資料：如何评价盒马鲜生招聘不要北京人？ - 知乎） 甚至，因為「五險一金」的相關規定，還有許多北上廣深的公司，寧可聘請不熟悉中國大陸社保與稅相關法規的台灣人或外國員工。 從經濟學上來看，這很「理性」──利用「價格差異」，把勞動者每一分勞動剩餘價值，都榨得剛剛好。 但你覺得這樣做對嗎？ 如果台灣也施行「歧視天龍人」條款？對公平競爭的「另類想像」 就我所知，很多人可能會拍手叫好──畢竟所謂的「城鄉差距」、「地域差異」各國都有，而台灣長期以來發展、工作機會、市民福利等等均傾斜集中在北部大都會（尤其台北市區）的現象，更早已不是一、兩年的事了。 台灣有沒有這種「土著」的不平衡現象？當然有，而且是從念大學時就開始了──這點對多數從中南部到台北讀書、工作的人來說必然「有感」，而且是「壓迫性的有感」！ 比方說你某個台北人同學，大學時成績沒你好、工作表現也沒你出色，但單單因為他出生在台北、家裡在台北市有房，於是什麼都不用做，每個月的等效薪資就比你多了至少 8、9 千元新台幣──因為他非但不用租房，還享有比其他縣市更好的育兒津貼等福利。 這種「相對剝奪感」是非常強烈的：父母的條件、出生地的條件、一個跟你努力無關的條件，就這樣赤裸裸呈現在你個人出社會時，現實可支配的預算差異上。 而「土著」的存在，直接讓埋頭苦幹的 80 後、 90 後在內心出現「有感的不公」──因為用來支付房租的可支配收入，基本上就是年輕人亟欲用來進修學習或發展副業的一項資源。這種不平衡的心理感受，在高度競爭的社會裡，完全是可以理解的。 我曾與幾個同為從中南部到台北讀書、工作的朋友聊過，這筆「因為我父母不是台北人」而「相對損失」的房租，一直都是心頭上的痛。無奈的我們，年輕時也往往只能用「天龍人」這種酸言酸語，才能宣洩心中對那些「台北土著」的忌妒。 促進南北平衡？還是資方利器？ 但我們不妨想想：假如有一天，「土著歧視」真的被引進台灣，而且被坦蕩蕩地用在每一場薪資談判中呢？ 這恐怕代表以下事項： 一、台灣資方已經積極向大陸資方學習薪資議價手法，台灣職場也更往「狼性」靠攏一點。 二、對於從台灣中南部到北部打拼的工作者來說，「可能是」一個「表面上」能讓心理更平衡的契機：當「我從外地來」反而變成議價籌碼的時候，對父母的埋怨少了、對「天龍人」的忌妒少了，這樣是不是某種程度的「公平正義」機制，還能減輕台灣南北資源的落差？ 三、但等等，試想如果按照台灣和中國大陸的「老闆思維」，請問公司會傾向聘請「來自天龍國、價格（比以前）更便宜」的勞工？還是真的會相對「加薪補助」來自外地的你？ 即使「從外地來」確實變成比「土著」更有利的談薪資條件，那雇主圖的是什麼？ 其實是「你孤苦無依，社會支持系統薄弱，所以更具服從性」的期待，試圖從勞工身上壓榨更多供給者剩餘價值。 這樣的職場文化，是我們想要的嗎？ 全文刊登於「換日線」，致謝編輯張翔一與老友董泓志給予修改意見。 封面附圖，是我在中國大陸的便利商店包子機所拍下。"},{"title":"為了迅速落地，不惜程式碼髒","date":"2018-08-10T16:00:00.000Z","url":"/2018/08/10/%E7%82%BA%E4%BA%86%E8%BF%85%E9%80%9F%E8%90%BD%E5%9C%B0%E4%B8%8D%E6%83%9C%E7%A8%8B%E5%BC%8F%E7%A2%BC%E9%AB%92/","tags":["大陸","管理","批判"],"content":"大陸是一個注重宣傳、口號、面子的地方，所以要演戲就會認真演戲。另一方面，內心依然渴望發展，所以要落地也會很迅速落地。 而台灣？10 次抱著落地的初衷，最後大概有 9 次只能演戲收尾。 我在大陸工作才一個多月，雖然寫的東西都是又髒又簡單、每天都在堆義大利麵。主管明知舊程式碼的架構有問題、UX 有問題、版控有問題，程式碼衝突又很亂，有多亂？亂到大家要面對面才能解的那種。但以上種種，都被要求放下不管，求最短時間內實踐單點功能。 讓過去的我來看，會認為真是太蠻幹粗暴了！欠下的技術債怎麼辦？給使用者留下體驗差的印象怎麼辦？這樣不是在揠苗助長？ 然而，我眼前的大陸主管認為，這些隱憂都能以後再說，先不管。 以前在台灣會認為很糟糕啊、甚至鄙視，但現在發現自己每周都有產出合併到 master、甲方要求一項一項被解決、只差 release 就要變產品的時候，就發現這好像也是一種正道？ 我不會說這樣就一定是好，但想起過去在台灣的某段時間，寫程式潔癖太嚴重、而且還有比我更潔癖的人共事，導致業務目標推動變慢，最後也沒看到長期效益。那時候要是能再隨便一些、再野蠻一些，應該會更好。 （附圖是本人不知道哪一天叫外賣的晚餐，攝於廣州市天河區）"},{"title":"兩岸健身房的文化差異","date":"2018-08-04T16:00:00.000Z","url":"/2018/08/04/%E5%85%A9%E5%B2%B8%E5%81%A5%E8%BA%AB%E6%88%BF%E7%9A%84%E6%96%87%E5%8C%96%E5%B7%AE%E7%95%B0/","tags":["運動","大陸","社論"],"content":" 我加入當地健身房會員已經37天，當中19天有去，將近一半的時間偷懶，覺得自己還是太廢，需要更努力。我沒有誇張的高薪、不是在阿里就職、沒有車沒有房，健身是我給自己加分最有希望、最容易持續的方式。 來講講兩岸健身房的文化差異吧 衛生 台灣我去過的健身房不下十間，每一間都說因衛生理由，入場都一定要帶毛巾，沒有例外。我去了這麼多年，發現毛巾根本不夠隔開跟身體接觸的面積，就算真的碰到別人的汗，又怎樣？汗水能傳染疾病嗎？有人運動完不洗澡的嗎？ 大陸的健身房沒有這種規定，讓我覺得很方便，我去的這間，每天開業都有清潔人員拿酒精擦器材。 滑手機 台灣健身房讓我很不爽的一點是：太多人坐在器材上滑手機，說是休息，但練的時候也沒真的多用力，而且站著不能休息嗎？搞得各大市立運動中心人滿為患，但器材時間一大半被手機浪費掉。 我在中國大陸去的這間，定位也是廉價健身房，器材簡陋但是涵蓋肌群完整。雖然廉價，但人很少，來練得幾乎都很認真，有沒有像台灣那種「坐在器材上滑手機就安慰自己有練到」的人？有，但比例真的很低、很低，大概一成，不像台灣整片都是，這點讓我覺得大陸人更加珍惜自己的時間、更不會滿足於自我安慰。 中國大陸的健身產業，普遍來說有點扭曲，就跟中國大陸的其他行業一樣，太多不老實、不透明的商業化套路，太重視表面功夫，所謂的健身教練，可能只是隨便找個懂銷售的油頭男子「扮演」；台灣因為有大量的市立運動中心、或中力之類有理念的健身房，所以健身行業發展比中國大陸健康。這點讓我在大陸找住處的時候非常困難，因為必須考量到健身房的距離，離住處太遠人會怠惰。最後花很大心力，才找到一間老實經營又不會離公司太遠的。 （附圖是本人 2018/7/16 在該健身房拍攝，牆上題字是「當你想要放棄，記得你當初開始的原因」）"},{"title":"台灣還在吵女權是否太高？中國大陸青年想的是如何更有效率物化自己","date":"2018-07-17T16:00:00.000Z","url":"/2018/07/17/%E5%8F%B0%E7%81%A3%E9%82%84%E5%9C%A8%E5%90%B5%E5%A5%B3%E6%AC%8A%E6%98%AF%E5%90%A6%E5%A4%AA%E9%AB%98_%E5%A4%A7%E9%99%B8%E9%9D%92%E5%B9%B4%E6%83%B3%E7%9A%84%E6%98%AF%E5%A6%82%E4%BD%95%E6%9B%B4%E6%9C%89%E6%95%88%E7%8E%87%E7%89%A9%E5%8C%96%E8%87%AA%E5%B7%B1/","tags":["大陸","社論","兩性"],"content":" 這篇是今天看到的知乎好文，從未婚男人擇偶偏好觀點，把未婚女人二分成「幫手價值」與「消費價值」兩大類，去探討婚姻市場。 从男性角度看，「相亲市场」里三十及三十岁以上的女性是否仍然具有竞争力？ - 痴情叔的回答 - 知乎  這是一個我從沒看過的觀點，很新鮮、也很合邏輯。 講到這裡，我又忍不住為台灣人感嘆。台灣還在吵女權是不是太高？的時候，大陸人探討的是，怎樣更有效的把自己物化的更高價值？賣到更好價錢？不論男女都是、不論職場感情都是。 為什麼會有女權太高的爭議？就是因自己手上沒有足夠拿出去交換的價值。有一篇留言說得很好 這樣說好了，我覺得會在網路上吵女權太高這種人，基本上都是些現實上並沒有嘗到父權甜頭的群眾。這些人本來就吃不到甜頭，眼中看到的盡是些懂得利用父權優勢獲取利益的女性，現在你們又跟我跳出來說女權太低，我們這種什麼都沒有的男權才低吧！事實上真正在父權已經取得優勢的男性才不會跳出來跟你們吵這個… 男人就是賺錢機器、女生人就是生育或做愛機器，或者比較前衛的男性，可以讓自己變成精於情緒勞動的小狼狗，專門滿足有錢的拆遷妹（中國大陸因都市更新而致富的未婚女性）。人就是被放在人肉市場估價，被功能化、標籤化，所有的功能或標籤都有一個價錢。 「不殘忍」根本就不在大陸人討論的範圍內，大陸人討論的是如何有效地度過殘忍？如何讓每一分痛苦效益最大化？ 相比中國大陸，台灣還是講規範、衛生舒適、人品好、有公德心、有責任感、替他人著想，但就是青壯年面對現實痛苦的覺悟、跨出舒適圈的覺悟還不夠。 （附圖是本人 2018/6/23 攝於中國大陸廣東省廣州市，崗頂地鐵站附近的百貨公司）"},{"title":"我所看見的兩岸青年，面對社會現實的態度差異","date":"2018-07-17T16:00:00.000Z","url":"/2018/07/17/%E6%88%91%E6%89%80%E7%9C%8B%E8%A6%8B%E7%9A%84%E5%85%A9%E5%B2%B8%E9%9D%92%E5%B9%B4%EF%BC%8C%E9%9D%A2%E5%B0%8D%E7%A4%BE%E6%9C%83%E7%8F%BE%E5%AF%A6%E7%9A%84%E6%85%8B%E5%BA%A6%E5%B7%AE%E7%95%B0/","tags":["大陸","社論","兩性"],"content":" 有人問我說大陸妹子怎麼樣？我說，台妹還是比較好看、天生麗質的好看，但高冷；而陸妹普遍用心打扮、後天更加努力、用力的在展現女人味。 在大陸論壇，熱門帖都不是抱怨「男人物化女性」、而是問「我要找優質男人還欠什麼努力？贏過我的都是那些女人？」，男人問的是「在我的行業還有哪些買得起房的機會？」。 「妳長得不錯，但就是太老！有房為什麼不去挑嫩到出水的妹？」 「你現在就是太窮！真有才華早就拿去換成錢，不要拿未來忽悠我！」 不管男男女女，大家都正面面對殘酷的現況、接受現實而努力，幾乎沒看過有人想要狗吠火車的打壓不利於自己的規則。我就是喜歡他們的接受現實。雖然我常常很氣，大陸人做事態度不夠仔細認真，但接受現實的心態，起碼讓我覺得他們對自己的生命認真。 女性抱怨被男人物化、男人抱怨女人太現實，這些心態在大陸人眼中都太弱、太不長進了！根本連想都不好意思想。 當大陸人年輕人願意為了更好的未來而蹲低，台灣人年輕人想的是：「我幹嘛這麼委屈？我值得更好的！只是還沒遇到而已！」（不論工作或感情，都是） 中國大陸未婚女性，很少看到胖子或者不打扮的人，雖然她們的打扮有時候在我眼裡看來很土、很拙、表現出一種過度胭脂的黏膩，但完全能感受到都市叢林的競爭氣息，每個女人身上都有種「我想要得到什麼」的心機，那是一種強烈焦慮後的高度覺醒，於是人人大放異彩。 男人就是比財富！女人就是比臉跟奶！其他都只不過是加分的小菜，大家都有清晰的方向感！雖然通篇好像都在講感情，但人的價值觀，是會不分領域的體現在所有決定中，在職場上也是這個態度。 台灣呢？我就不說了，講了太殘酷。台灣人比較愛作夢，那種「我只要維持現狀，總有一天被幸運之神眷顧」的夢。廢！太廢了！ （附圖是本人 2018/6/11 攝於中國大陸廣東省廣州市，廣州東火車站）"},{"title":"我在大陸地區求職體會","date":"2018-06-15T16:00:00.000Z","url":"/2018/06/15/%E6%88%91%E5%9C%A8%E5%A4%A7%E9%99%B8%E5%9C%B0%E5%8D%80%E6%B1%82%E8%81%B7%E7%B6%93%E9%A9%97/","tags":["大陸"],"content":" 分享一下我在大陸找工作的體會。 為什麼是寫「體會」而不是「經驗」？經驗應該是比較詳細的分享，去面試了哪些公司？在什麼平台上找到？什麼職位？過程談些什麼點？我有寫了經驗，但目前還不適合公開，可以跟大家分享的，是統整過之後的「體會」。 在大陸可以不用表現得很聽話、表現得很奴，大多數大陸雇主並不想要這種人。想辦法表現你的專業、解決問題的經驗吧。 用簡體字寫履歷、改成他們的用字遣詞、接受用 WeChat 談公事而不是 E-mail、不用 Gmail 或 .tw 結尾的信箱，表現出想融入當地文化的決心。光口音就已經是很強烈的台灣人標籤了，其他部分不要給他們太多＂異國風情＂，這是台灣人少數需要委屈的部分。 雖然大陸輿論對於「企業歧視非名校」鬥的沸沸揚揚，但也由於大陸人才濟濟，所以他們的資方不太有興趣了解台灣各大專院校的排名和水準，因此大陸資方面對台灣人，會更集中注意你的專業去談。這對於台灣非名校強者來說，是個翻身好機會。 在大陸談薪水不用覺得羞愧、不用覺得自己做錯事，覺得太低直接講、覺得對方哪裡有問題直接講，勇敢去 challenge 吧！壞的雇主避重就輕、好的雇主正面回答，我在大陸還沒遇過打壓的。我在台灣也不是沒這樣做過，但幾乎不會有好回饋（即使是好的雇主），我還遇過說「你這樣很難溝通」的面試官，久了就會需要更多勇氣才能做。 沒有講明薪資範圍的招聘，就別理了。在大陸「公開薪資範圍」和在台灣「符合勞基法」具有相同評價地位。 陸企雇用台灣人其實有疑慮、也有麻煩，光面談就很不容易，所以我的經驗很高機會是存活者偏差，請小心服用。 （附圖是我 2018 年 5 月在廈門 BRT 站拍攝）"},{"title":"第一次寄信到大陸地區經驗分享(二)：收到","date":"2018-04-29T16:00:00.000Z","url":"/2018/04/29/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AF%84%E4%BF%A1%E5%88%B0%E5%A4%A7%E9%99%B8%E5%9C%B0%E5%8D%80%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB(%E4%BA%8C)%EF%BC%9A%E6%94%B6%E5%88%B0/","tags":["非關技術","大陸"],"content":"上次寄出的時候，我說要考察這幾個項目： 1. 出貨到收到的時間 郵局這邊說 7-10 天，但實際上 5 天就到了。 2. 信件是否有破損？髒污？ 完全沒有。 3. 是否會被拆開檢查？ 沒有拆過的痕跡。 4. 平信與掛號的時間與價錢差異？ 雖然大陸的網友的回應來看，因為同樣地址、收件人的平信，也同時有掛號信的關係，大陸的郵局就要他平信和掛號一起領。這種情況下平信，就不會比較快收到，壞處是慢了、麻煩了，但好處是平信就免費升級成掛號。 鞭長莫及，只能做半套的掛號查詢系統 雖然可以用中華郵政的郵件查詢，追蹤掛號信。 但我發現，只要郵件出台灣以後，查詢畫面就再也沒有變化（如下圖）。 我想應該是這個追蹤系統沒有和對岸結合， 換對岸的查詢系統看看？ 後來發現，其實也可以查，但就要到中國郵政的系統上查詢。一樣用台灣這邊拿到的郵件流水號就可以。資訊比台灣詳細的多，連機車送？還是貨車送？都看得到（如下圖）。 其中的「已进口开拆」讓我有點緊張！是不是被拆開檢查呢？我百度一下，發現這並不是拆開郵件檢查內容，這是一個大陸的郵政術語，是說把郵局的大郵袋拆開，把一個個郵件分揀出來。 啊～覺得有點失望，如果真被拆開檢查，那代表我是對岸很重視的人 XD 最後，那我寄了哪些東西去？ "},{"title":"第一次寄信到大陸地區經驗分享(一)：寄出","date":"2018-04-18T16:00:00.000Z","url":"/2018/04/18/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AF%84%E4%BF%A1%E5%88%B0%E5%A4%A7%E9%99%B8%E5%9C%B0%E5%8D%80%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB(%E4%B8%80)%EF%BC%9A%E5%AF%84%E5%87%BA/","tags":["非關技術","大陸"],"content":"台灣很多人從淘寶買東西，所以收大陸地區的郵件早就習以為常。但是寄東西到大陸去呢？應該多少人有經驗了吧！ 最近有朋友在賣些手工藝品，因為中國大陸市場大，想上架到淘寶。但不清楚往對岸去的物流，於是決定練習寄過去一次看看。但，要寄給誰？所以我就找了在 Github 上認識的大陸朋友，請他幫忙收件，讓我們往後寄東西給買家，能對以下這些狀況有個底： 出貨到收到的時間 信件是否有破損？髒污？ 是否會被拆開檢查？ 平信與掛號的時間與價錢差異？ 那要寄什麼東西給大陸朋友呢？難得有這個機會，當然要寄一些大陸沒有的東西。 平信：寄一些紙類的東西 掛號：寄一些神秘小物，會讓信封明顯凸起來的大小，考驗寄送品質 因為中華郵政的網頁太繁雜，不是很容易找到所需資訊；各種部落格的分享也不確定過時了沒有？所以我決定親自跑一趟郵局，就知道了。 必須橫式信封 我原先要用白色中式信封，到了郵局才知道，寄中國大陸必須要橫式信封，大小比白色中式信封大不少。 費用 平信：15元 掛號：最輕的重量74元，每20g/6元 信函費用不因沿海或內陸有差別，小包或包裹才有差異。 時間 郵局職員說 7-10 天。等對岸的朋友收到，再告訴大家實際的詳細時間。 中華郵政-大陸掛號郵件查詢連結 "},{"title":"為什麼面試講「我就是你要找的人」是不負責任的空話？","date":"2018-04-09T16:00:00.000Z","url":"/2018/04/09/%E7%82%BA%E4%BB%80%E9%BA%BC%E9%9D%A2%E8%A9%A6%E8%AC%9B%E3%80%8C%E6%88%91%E5%B0%B1%E6%98%AF%E4%BD%A0%E8%A6%81%E6%89%BE%E7%9A%84%E4%BA%BA%E3%80%8D%E6%98%AF%E4%B8%8D%E8%B2%A0%E8%B2%AC%E4%BB%BB%E7%9A%84%E7%A9%BA%E8%A9%B1/","tags":["非關技術","管理","靠盃","批判"],"content":"很多面試教戰守則，都會教你想辦法宣稱「我就是你要找的人」，把這句話拿去 google，會找到一堆教你說服面試官的辦法。 連資深人資主管也推崇「我就是你要找的人崇（如下面這篇 FaceBook 貼文） 如果是沒什麼工作經驗、剛畢業的應試者，可能看到某些 Job Description 剛好都是自己熟悉的、擅長的，就會冒出一種「捨我其誰」的 fu，於是可以問心無愧的大聲講出「我就是你要找的人」！ 但是在業界很多事情，跟做學生專題、寫論文不一樣，沒辦法所有的細節都掌握在自己手中，成敗不是某一個人、某一個團隊能決定。 在未知環境下，任何對產出的承諾，都是空談 「我就是你要找的人」這是非常不負責任的話語 絕大部分公司，基於保護營業秘密，你很難之得知他們內部詳細實況，像是這個部門的文化、他們的工作流程、部門裡每一個夥伴的性格、潛在的障礙是否有辦法克服等等。 就算某些知名公司，有著網路上流傳的鮮明企業文化，如 Foxconn、Huawei 等等…，但不同分公司、不同事業部，因為體系太大，還是有可能自成一格，各部門也會隨主管風格而大異其趣。 因此，這對勞資雙方都是一個風險。若面試雙方盡可能揭露自身訊息，有助於降低這個風險，這才是雙贏的合作態度。 我清楚自己，無法將自己異化到在職場內外都是不同人格，那樣過於壓抑，只會降低我的生產力。所以我並不避諱，在網路上公開陳述自己的價值觀，這是替我的潛在雇主降低風險，也是替我自己降低風險。罵我的人不少，但我也因此認識不少志同道合的人，也有很好的工作經驗是這樣得來的。 對與未知環境的合作，不應該承諾未來貢獻 「我曾經完成OO專案」是一種對過去表現的承諾，「我就是你要找的人」則是一種對未來表現的承諾，而這個未來，是你與一個很陌生的環境交互協作、共同決定的未來，你只能控制其中的一部分，整體並不完全掌握在自己在手上，甚至也不確定自己過去的優點，在這個環境下，是不是反而變缺點？ 除非，有異於常人的自信（與權力），自信到可以獨當一面，不怕各式各樣的坑啊、扯後腿啊，否則我無法對未來承諾。應試者應該承諾的就只有過去、承諾履歷為真、承諾對過去的表述為真、承諾在某種環境下能發揮某種績效，如此而已。 該承諾未來的，是內外都有了解的面試官 但雇用人，不就是基於對未來產出的希望嗎？那誰可以承諾這個未來？只有面試官可以承諾這個未來。 因為面試官是這段關係中，唯一同時了解內外情況的人。應試者就像一塊單獨的拼圖，要放到一大片未完成的拼圖上，能夠一次看清這兩邊形狀的人，就只有面試官。面試官一定比應試者更了解部門中的戰力空缺、這個職位要克服的困難、這個職位要和什麼樣的同事相處、短期內可能面臨的任務變動等等。 作為應試者，什麼樣的情況下，我敢承諾未來？ 如果我對一個新職位，敢於承諾未來，那一定是對這個職位可用的資源相當清楚。（別說你不需要部門資源也能做事，這種人就不會找間公司了，會自己接案做個 SOHO 族） 這個「資源」是什麼？我想了下，具體至少有以下幾條： 我對這個產業有一定程度了解，最起碼寫得出 SWOT 我對部門主管在無關技術的管理觀上，大多數做法認同 我了解該部門近期發生過的重大障礙、甚至是難堪事件，與後續處理方式 我了解該部門可動用的軟硬體、經費、可要求跨部門協助的範圍 我了解該部門常態面對的時程壓力、以及最近做過的妥協 我了解該公司文化，且各個職位的人都能貫徹，以此做為模糊情形下的拿捏準則 [程序員限定] 該公司有 open source project，且我有 pull request 被該部門成員 merge 「過來人」的例外 從以上幾點能看出，有兩種例外應試者，是可以合理承諾未來的人 長期外部合作夥伴（客戶或供應商之類的，open source contributor 應該也算） 前員工 總結 作為一個應試者，若我不能建立對這個部門的 ”歷史觀”，憑什麼對面試官說「我就是你要找的人」？ （註：只有正面訊息的叫做 ”公關文宣”，有好有壞才叫 “歷史”） 沒有人的專業是萬能的，也沒有人可以適應任何文化、與任何對象都能溝通合作，因此才會有文章強調企業文化配合的重要性，企業文化就如同區塊練建立起的共識作用。 在人不能面面俱到、處處萬能的前提下，承諾自己放進一個黑盒子後，能 fit 又能發光發熱，這不就是一句沒有基礎的空話嗎？"},{"title":"讓捷泳變超快的５個上半身動作","date":"2018-03-14T16:00:00.000Z","url":"/2018/03/14/%E8%AE%93%E6%8D%B7%E6%B3%B3%E8%AE%8A%E8%B6%85%E5%BF%AB%E7%9A%84%EF%BC%95%E5%80%8B%E4%B8%8A%E5%8D%8A%E8%BA%AB%E5%8B%95%E4%BD%9C/","tags":["游泳","運動科學"],"content":" 為什麼你該學游泳？ 在游泳池認識的妹子，比在交友軟體上認識的更好！因為她走出戶外運動、面對自己的身材、還無法化妝掩飾！ 運動讓你有精神！也會逼你檢視自己的體態是否良好？ 但花錢只去游泳池泡水，太浪費！我們應該要好好的劇烈運動，鍛鍊肌力和心肺耐力，讓自己不論在水中、床上，都有良好的體能！ 要認真的持續游泳，你需要感覺流暢！否則很難有毅力連續游泳。 游泳要流暢、持續，就要具備良好的運動生物力學技術！ 為什麼你應該聽我的？ 我大學四年都參加游泳校隊，四處比賽，大二就熟讀游泳相關力學理論。 多年前，我以外行人的學術背景，考上國內頂尖的兩所體育運動研究所，其中一間還是榜首！ 還有什麼你應該搞清楚的？ 自由式＝任何姿勢，這篇只談捷泳。 以下就來就介紹這五種動作。除了讓你游更快之外，從遠方看起來，動作也會變得大方、帥氣些，妹子看了都想認識你！ 1.貪婪的把手伸出去 把手伸出去，連肩膀都一起伸出去。要多貪婪？貪婪到臉頰可以碰到自己的肩膀。 2.手掌要木板一樣平直 盡量把手掌打開，加大划水的面積。不要把手掌拱成碗狀，沒有用！有效划水只看投影面積。 3.像籃球運球一樣的，徹底完成手肘末段推水 每次划手，都要划出最大的行程，但行程的最末端經常被忽略、不徹底，犯了手肘提早抽出的錯。用籃球運球來記住，是個好方法。 4.肩膀到屁股的這一段，毫不客氣地轉動 這種側身轉動是很有效的動作，雖然最完美的情況會有一個適中角度，但寧可先轉過頭、也不要轉不夠。 這有四個作用： 1. 幫助手伸出去更長 2. 幫助手往後推更遠 3. 側著身子，水阻力比較小 4. 換氣只要微微抬起下巴，不轉脖子 5.保守的用脖子換氣 因為人體在水中是一個蹺蹺板，最輕的肺部就是蹺蹺板支點。所以，只要頭抬的稍高，下半身就會沉很低，水阻會非常大。那要怎麼讓嘴巴吸到空氣呢？應該把整個上半身往側面轉，而不是以脖子去用力抬頭，脖子只能對下巴稍做微調而已。 "},{"title":"我始終回答不清楚的問題：文組學寫程式要多久？","date":"2018-03-12T16:00:00.000Z","url":"/2018/03/12/%E6%88%91%E5%A7%8B%E7%B5%82%E5%9B%9E%E7%AD%94%E4%B8%8D%E6%B8%85%E6%A5%9A%E7%9A%84%E5%95%8F%E9%A1%8C_%E6%96%87%E7%B5%84%E5%AD%B8%E5%AF%AB%E7%A8%8B%E5%BC%8F%E8%A6%81%E5%A4%9A%E4%B9%85/","tags":["社論"],"content":" 在我短短兩年寫程式的職業生涯中，已經聽過好多文組的同事來問：「要怎麼像你們這樣寫程式？要學多久？」，我和一些朋友，都嘗試回答過這個問題，但每一次要回答，都覺得很卡、很彆扭，怎麼講都不對。因為，來問的人，都已經從學校畢業，我們會預設你問的動機，是想要轉行、是想要以此為工作，而不是單純學興趣的。但寫程式的工作，從來就不是一門 3 學分的「程式設計」就能搞定。 我第一份寫程式的工作，如果要做得順，除了 3 學分的＂程式設計＂，還應該要學過： 訊號與系統（+「數位訊號處理」的話更好） 作業系統 物件導向（+「設計模式」的話更好） 基本電學 但找人，沒有這麼容易找到完全 match，所以若不是電機系畢業，是資工/資管等科系畢業，「訊號與系統」和「基本電學」的知識，則會在教育訓練中補充。但電機系畢業，也有可能「作業系統」不熟、「物件導向」不會，怎麼辦？公司沒有準備惡補教材了，做中學吧。 要會這麼多東西、又在台北，待遇很好嗎？沒有，跟在台中寫廣告文案一樣多（這是文組工作喔！）。 Q：屁拉！寫軟體哪要懂這麼多硬體的東西！ A: 這份工作，是在硬體公司裡的軟體部門。這家公司，沒有任何一個軟體是獨立賣錢的，全部都是相依於硬體產品。這種附屬在硬體上的軟體職位，在台灣占了軟體工程師的一大部分。 至於第二份是這樣： 模式識別 or 機器學習 公司的教育訓練又幫我補了這兩樣 版本控制 Linux 使用入門 只要會這麼少東西、又在台中，待遇很差嗎？沒有，跟在台北當 4 年資歷的記者差不多（這也是文組工作喔！） 但這些技能，說少，也不算少。因為「模式識別」or「機器學習」的先修課有這些：微積分、線性代數、機率統計。 Q：屁拉！寫軟體哪要懂這麼多數學的東西！ A: 你也可以不要懂，也有很多人不懂，依然能靠實力餬口、靠實力買車買房（他們都比我拚不知道幾倍）！這些數學知識，是軟體領域中最不會過時、最不怕砍掉重練、最不擔心「學如逆水行舟、不進則退」的東西。 文組轉職軟體工程師的話，到底要學多少才夠？不知道，往往要頭栽進去了才知道。所以，這個投資，就像個看不見的遙遠黑洞，只有已經在黑洞裡面的人，才稍微對全貌有個輪廓。"},{"title":"為什麼「股票反向操作就會贏」是一種誤解？","date":"2018-02-05T16:00:00.000Z","url":"/2018/02/05/%E7%82%BA%E4%BB%80%E9%BA%BC%E3%80%8C%E8%82%A1%E7%A5%A8%E5%8F%8D%E5%90%91%E6%93%8D%E4%BD%9C%E5%B0%B1%E6%9C%83%E8%B4%8F%E3%80%8D%E6%98%AF%E4%B8%80%E7%A8%AE%E8%AA%A4%E8%A7%A3/","tags":["資料科學","數據分析","靠盃","批判"],"content":" ＯＫ，如果你願意點進來看，恭喜你！你即將面對一個殘酷的現實，因此你將勝過許多在股海中充滿錯誤迷思的樂觀賭徒。 很多人對股市有一個誤解：「只有買和賣兩個方向，如果大家都賠錢，那我反向操作就會贏」 甚至還有人說出：「瞎妹隨便買都會賠，那我反著瞎妹買不是就會賺！」 股民的決定不可能只有買和賣 試想，你今天請肥宅工程師寫一支自動下單程式，你只要動嘴出策略就好，那你有幾種參數要決定？ 最簡單的買或賣兩個方向 買賣哪一支？台股上市數就有 900 多家，這個維度還算小的。 買賣的量？ 出價？ 時間？盤中每一個時間點都可以買或賣，不做為（不買不賣）也是一種決定，因此盤中每一個時間點都有一個決策。 每種參數都是一種維度，維度有大有小，台股上市數就有 900 多家，但你可以決定的買賣時間點不只 900 、甚至不只 900*900 因此時間是一個極大的維度。每個維度都豐富了股市決策的多樣性，愈大的維度會使得股市變得愈複雜，因此股票不可能只有買或賣兩種決定，只要一個參數有差異，那都算是不同決策。 股票買賣策略沒有「相反」的概念 前面講的各種維度都有大有小，但「時間」和「哪一支」這兩個維度卻沒有方向可言，所以股票策略沒有「相反」的概念，因為你找不到一個相反的向量。 只有「量」的不同，可能賺、也可能賠 尤其乘上「時間」這個維度以後，決策的狀態空間變得超超超超超級大！然後又有「手續費」和「交易稅」這種穩賠不賺的非中性因素，把一大半原本賺錢或打平的狀態空間，一下子翻轉成賠錢的狀態空間！因此，在隨機亂買賣的前提下，賺錢注定是少數人的命運。 看懂了嗎？同一支股票、同樣時間點、做同樣方向買賣，不同的量就可能是賺和賠的差別！ 「量」也是一個維度，這個維度注定有錢人的選擇就是比較多！ 你以為這樣就沒了嗎？還有！買賣的「量」也會受到你的本錢限制，這個維度因人的財力而異，因此窮人的狀態空間注定會比較小。 雖然你可能想說：「賺錢和賠錢的空間會等比例變小，所以窮人沒有比較吃虧」，要是你這樣想的話，大概忘了還有「非線性的手續費」。由於手續費通常有個下限，買一張零股至少也要被抽二三十元，因此窮人縮小的狀態空間撿菜尾並不是 [賺：賠：平] 等比例，而是賠錢的狀態空間比例上更大了！ 但也不完全都是這麼悲觀，因為還有「股息、股利」這種穩賺不賠的非中性因素，前提是你要夠有耐心、不炒短線才行。 殘酷的結論 所以阿，在股海裡沒有「反向操作」，只有「大海撈針」！進出廝殺還能賺錢的話，你若不是特別睿智，就是特別幸運。"},{"title":"台灣預付卡收費太機車？我在臺試用對岸的「走芯」","date":"2018-01-19T16:00:00.000Z","url":"/2018/01/19/%E5%8F%B0%E7%81%A3%E9%A0%90%E4%BB%98%E5%8D%A1%E6%94%B6%E8%B2%BB%E5%A4%AA%E6%A9%9F%E8%BB%8A%EF%BC%9F%E6%88%91%E5%9C%A8%E8%87%BA%E8%A9%A6%E7%94%A8%E5%B0%8D%E5%B2%B8%E7%9A%84%E3%80%8C%E8%B5%B0%E8%8A%AF%E3%80%8D/","tags":["大陸","開箱","電信","電子支付"],"content":" 妳是空姐，經常去不同國家旅遊，每次到當地都要重買 sim 卡、插拔卡太煩？但是直接漫遊又太貴？ 你有 iPad，偶爾旅遊帶出門就要吃手機分享的網路。但是太耗手機的電力、又讓手機定位誤差變大，干擾地圖使用？ 你有 LTE 筆電，出差開會想要打開就能上網，卻感嘆台灣預付卡計費方式太過機歪？ 那你需要**「走芯」。** 使用 APP 購買當地便宜的 SIM 卡，但不會得到任何實體，而是把卡片資訊寫入在「走芯」裡。有國際漫遊的方便，但是沒有國際漫遊的昂貴。這是各主要國家都通用的自助餐預付卡。 各國漫遊，要用的當下線上付費，馬上開通（如下圖） 不用定期充值 自助餐預付卡 用之前先看了一下雲遊寶 App。就算你沒有這張卡，我建議也可以把雲遊寶 App 裝來看一下，會比較快了解「走芯」是什麼？大概就是硬體提供介面，軟體自選方案。概念上是把電信櫃檯的工作自助餐化。一種自助餐預付卡的概念。 尷尬國旗顯圖，「走芯」避開敏感政治議題 選擇國家的介面，除了文字也要有國旗圖示才是比較親切的 UI。但台灣的電信方案獨立於中國大陸之外，需要個別選項，這下子難道要一個中國大陸 App 放台灣國旗嗎？他們用一張具象徵意義的圖示，巧妙的避開了這個問題。 說真的，這張圖就讓它空白也不是不行，但可能考慮到中國大陸人遊台灣的人數不少，這個地方的 UI 最好不要草率。 實際使用「走芯」情況如何？ 付款對台灣人來說不方便，只有四種管道 微信 支付寶 銀聯 Paypal 一般台灣人大概只能用超高手續費的 Paypal。因為我有在微信儲值人民幣，所以很方便。但台灣人要如何在微信裡有錢呢？嘿嘿~ 同樣的費用數字，若綁定中國大陸手機以 RMB 計費、沒有綁定手機以 USD 計費 另一個網友，是往來中國大陸工作的台灣人，有中國大陸手機門號並綁定在雲遊寶上，他在台灣購買就只要以 RMB 計價。 註冊畫面上是可以綁定台灣手機，但我試了非常～多次，都沒有收到認證碼簡訊，最後以 USD 被收費（如上圖），以我此時匯率來看就貴了 6.4 倍。 付款完成後，啟用的過程不是很順利 「走芯」是一張藍芽 SIM 卡，在付款完以後，透過藍芽將資訊寫入 SIM 卡就可以上網。 算是很新穎、很酷的技術！但新穎的技術，通常都不太成熟，所以失敗幾次還算正常，很快就可以成功啟用了，不算大缺點。 在台灣走遠傳電信，比中華電信快到有感 其實不太意外，中華電信用戶太多、又不限速，所以常常比更小家的電信公司慢。 值不值得買？ 「走芯」不論價格或金流上，都是高度為中國大陸人量身訂做。台灣人就算買到了，在國內用起來還真沒那麼接地氣。 但你若是: 有中國大陸的支付方式、或是願意忍受 Paypal 超高手續費 經常出國、不想要每次到當地重新買 sim 卡、不想要忍受剛入境的網路空窗期 有雙卡機、或雙手機、或者不嫌插拔 sim 卡麻煩；再不然就跟我一樣想裝筆電用 那「走芯」就剛好還還蠻適合你的。"},{"title":"從流量的拘束中解放","date":"2017-12-17T16:00:00.000Z","url":"/2017/12/17/%E5%BE%9E%E6%B5%81%E9%87%8F%E7%9A%84%E6%8B%98%E6%9D%9F%E4%B8%AD%E8%A7%A3%E6%94%BE/","tags":["學生時期","管理","經濟學"],"content":" 你的手機有在用 3G/4G 上網嗎？ 你的方案流量「吃到飽」還是「小氣鬼」？ 或者，根本是個出門就斷網的「原始人」？ 連吃都不能大方的日子，對手機上網費用更是戒慎恐懼 學生時期，我的戶頭裡經常只有幾千元，餐餐都必須精打細算，因為下一個幾千元不知道哪時候會進來？對 3G/4G 手機上網這種，可以靠意志力忍過缺乏期的資源，更是不會浪費窮學生的一切耐性。 所以，過去幾年還在校園的日子，我的手機上網只用學生方案，所以每個月固定是 5GB 流量，月租費只要 591 元，後來 4G 時代變成 587 元。 圖片出處： 用注意力省下吃飯錢 因為時常帶著筆電四處跑，用筆電上網很傷流量，但通常又都是拿來做正事。所以在外用手機上網，總是能省則省，進到住處或公司，必切換至 WiFi，把握機會同步相片、更新 App、開 Facebook 預載動態，到公共場所也會時時注意有沒有 CHT WiFi 可用？到咖啡廳、速食店用筆電，也會執著於找一個 WiFi 訊號佳的位置。出門前會注意，該同步、該更新、該下載的，趁著 WiFi 還能用趕快先完成。 心中 24 小時工作的流量小警總 我的手機一定會設定流量監控，和帳單的計費周期同步，每天會看這個計費週期剩下的流量、狀態列顯示目前的即時流量、試圖對每一個操作的代價掌握得鉅細靡遺。 這些動作看起來相當浪費注意力，但是多年下來已經變成反射動作，變成一種有如內心小警總的「美德」，一種靠自我認知建立的制約。 久而久之，我已經養成一種直覺，大概知道看什麼網頁、開什麼 App 會用掉多少流量？在哪裡會有公共 WiFi？ 甚至還在畢業前兩個月，趕快到通訊行和小七辦了麻煩的要死的雙 NP，續約新的學生方案。因為我知道，只要一畢業，就沒有 CP 值這麼高的上網方案了。 就在我辦完沒多久，據說雙 NP 就被擋了，記得 PTT MobileComm 板上一片災情，看得我心有餘悸～ 就算用得起吃到飽，還是要能省則省、把錢花在刀口上 一畢業去工作，大多數時間還是在住處和辦公室，待的公司對於公用 WiFi 也沒有嚴密資安規範，所以學生方案的 5GB 流量也都是幾乎夠用。 偶爾出遠門到鄉下或郊區幾天（例如過年），流量會用完，就得忍過計費周期的最後幾天、忍住不用 3G/4G 開 Facebook、忍住購買加量包的誘惑，爆了頂多被限速，只要 Google maps 能用都還不算太慘。 突如其來的人生變化，從流量的拘束中解放 由於一連串出乎意料的職涯變化，這個月換了新工作，從報到第一天就開始享有員工公務門號減免，所以辦上網吃到飽是不用錢的。 依照員工公務門號的減免規則，我可以繼續用原本方案，直接將一千元以下的月租費折扣到 0 元才對。但由於客服端各種亂七八糟的溝通不良（細節略），最後搞得我必須先解約、賠解約金，然後簽新的門號約才能享有員工減免。 為了享受員工福利要賠解約金？？這口氣我怎麼吞得下去呢！所以就開始向客服奔波阿～但為了這件事，折騰了兩周後還是沒能解決，暫時的結論依舊是：我要先解約、賠解約金。 算一算發現： 我的解約金 4000 元左右，不算高，早辦早折扣、3 個月就回本，反而拖越久折扣愈少 我工作的地點極偏僻，最近的客服單位在 5 公里外，奔波成本高 所以，我只好認賠殺出，賠了解約金！簽新約，才終於拿到員工減免。 自由度高了，反而渾身不適應 人到了車站還是便利商店什麼的，還是會反射性的拿起手機想要切換到 CHT WiFi Auto，但手機還沒掏出口袋就想起：「我已經是流量吃到飽了啊，不用這麼拮据了。」 以前人從外面回到房裡，有時忘了把手機切換成 WiFi 就開始看影片刷 FB 什麼的，等發現的時候，就會把自己嚇得哇挖挖的後悔的要死！現在呢，還是會嚇自己一下，但是馬上就回過神想起：「我已經是流量吃到飽了啊，怕啥？」"},{"title":"2017 東馬來西亞旅遊記（二）：Day2 上午，海邊、十里香肉骨茶","date":"2017-11-30T16:00:00.000Z","url":"/2017/11/30/2017%E6%9D%B1%E9%A6%AC%E4%BE%86%E8%A5%BF%E4%BA%9E%E6%97%85%E9%81%8A%E8%A8%98%EF%BC%88%E4%BA%8C%EF%BC%89/","tags":["旅遊","非關技術","馬來西亞","美食"],"content":"在台灣好久沒看到的清爽藍天 馬來西亞空氣相當好，一早起來就看到在台灣好久沒看到的藍天。台灣只有剛下過雨的早上才能看到這種景象。 當地熱門早餐街區 當地人帶我們到當地知名的「Baidurie Cafe」吃早餐，食物都相當好吃，感覺像是一種我沒吃過的重口味中式料理，調味偏重、偏鹹，份量也比較大。 在這棟大樓的一樓還有很多其他店家，集合成一個小的美食街。 海邊 早餐後，當地友人開車帶我們到海邊去走走，路上還遇到警察臨檢。 當地的加油站，完全是自助加油，而且經常可以看到台灣沒有的殼牌加油站。 去了海邊兩個點 一個是有「馬頭喝水」的沙灘。 這個海灘，是我目前為止，在世界地圖上到過最南邊的地方，但還沒跨過赤道。 另一個，看起來是有經營酒吧和旅遊船隻的海邊，但我們是在上班日白天去的，所以都沒營業，沒什麼人，有點可惜。 當地午餐「十哩香肉骨茶」 這是一個是合菜餐廳。令我最喜歡的兩道菜是「乾肉骨茶」和綠色的「沙梨果汁」（如下圖），我這才知道，原來肉骨茶可以做乾的！ （待續）"},{"title":"為什麼我不會忌妒 YouTuber 賺超多？工程師的嘗試經驗","date":"2017-11-29T16:00:00.000Z","url":"/2017/11/29/%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E4%B8%8D%E6%9C%83%E5%BF%8C%E5%A6%92YouTuber%E8%B3%BA%E8%B6%85%E5%A4%9A%EF%BC%9F%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E5%98%97%E8%A9%A6%E7%B6%93%E9%A9%97/","tags":["非關技術","學生時期","靠盃","批判","社論"],"content":" 前情提要：最近網路上很多眼紅輿論，眼紅 YouTuber 超好賺，心理憤恨不平。 我不會忌妒 YouTuber 賺很多，並不是因為我人格有多高尚。 是因為我 3 年多前，曾經試過拍影片來宣揚自己想說的話，放上 YouTube 想要讓大家看到。 一開始也覺得： 「應該很簡單啊！我找一間空教室、架一支畫質好的 Webcam，稍微順一下台詞也能做到吧！」 「我在高職實習教過課、在大學當助教都這麼久了，上台講話和版書，應該是我已經很熟悉的優勢才對。」 既然這麼簡單，那我為什麼不自己作？ 真的把 Webcam 架起來才發現，放桌上是不行的，鏡頭必須要和講者頭部同高，才會有一個正確的視角（如下圖） 講稿就打在電腦上，不敢寫死。因為有些內容是講了才會覺得哪裡要改？哪裡可以更順？所以必須要可以隨時修改（如下圖） 由於我不會剪接的關係，必須要一口氣到底。這就讓我重複了三四次，才拍成一次完整的影片。結果，當然是慘不忍睹，因為… 頭會一直亂動，經常是歪的 講話時一直有皺眉頭般的扭曲表情 人常常跑出鏡頭外 所以，就開始針對這些問題改進： 看著螢幕的即時影像，邊看邊講，注意身體姿態和表情不要扭曲。 測量鏡頭邊界，標記在白板上。 然後又重來了兩次，中間還要擔心有沒有人會闖進空教室？會不會不小心被關燈？之類的各種外力狀況。然後才錄出自己勉強覺得可以妥協的成果（累了，不妥協也不行），把恥力依然滿點的影片放上 YouTube 羞恥 play。 喔對了！現在很多人不看字串標題的，所以還得自己給影片做封面、用 Photo Impact 標上顯眼的文字，這才算是完成。 做完這兩部之後，我就再也沒有做了，因為真的大費周章，成果又不佳。 小吃也是。做過才知道「別人做很簡單，但是自己來更貴」的道理 BTW，我在家裡嘗試做過蚵仔煎等小吃。我才發現，小吃之所以是小吃，而沒有成為家常菜，就是因為備料煩瑣、烹調技巧不好掌握，往往要費工夫準備大半天，才能吃到你在夜市六七成水準的菜餚。然後，最多也只煮給一家 4、5 個人吃而已，邊際成本很高、邊際效用卻很低。 因此，小吃和家常菜有了區隔，小吃就不太會出現在家中廚房。小吃要出現在專職販賣食物的攤販或店面，集中生產，才能夠達到規模經濟。 很多看起來很簡單的事情，收費不低，所以不服氣，想要自己下去做。 做了，才知道有很多繁瑣的細節，每一個都細節都要做到 80 分，整體看起來才會有 60 分。 知道這些困難以後，下次就會心甘情願的付錢了，再也不會覺得貴。 "},{"title":"2017 東馬來西亞旅遊記（一）：搭車、覓食、轉機，都是冒險","date":"2017-11-23T16:00:00.000Z","url":"/2017/11/23/2017%E6%9D%B1%E9%A6%AC%E4%BE%86%E8%A5%BF%E4%BA%9E%E6%97%85%E9%81%8A%E8%A8%98%EF%BC%88%E4%B8%80%EF%BC%89/","tags":["旅遊","非關技術","馬來西亞"],"content":" 出發前一天，我剛好先到台北找朋友，所以我就訂了台北市的民宿過夜，清晨直接從市區搭機場巴士過去。搭上車才知道，原來這是長榮營運的路線，駕駛就是長榮地勤。 TPE to BKI 出發是搭亞洲航空（AirAsia），基於兩個理由，所以我穿得像是要去參加冬季馬拉松一樣 亞洲航空含在機票內的行李重量只有 7kg，桃機又很冷，所以我必須要穿得輕薄又保暖 砂拉越日夜溫差不小，冬季慢跑服裝是最好適應的 馬來西亞室友一看到我搭亞航出發，就跟我分享：「亞航上面的椰漿飯很道地」，看一看亞航機上食物的價錢不貴，當然要買來吃看看。不像酷航可以飛機上刷卡，但可以收台幣、找馬幣。 亞庇機場（BKI）雖然是馬來西亞第 2 繁忙機場，但是國際線管制區內不像桃園機場有那麼多店可以逛，很冷清，只有賣飲料和點心的簡單小店。 BKI 換匯、買 sim 卡 因為我們傍晚才要轉機到美里機場（MYY），所以就得在這裡待上數個小時，我們有充份的時間可以慢慢吃午餐、好好的逛完這個機場。 當地機場的免費 WiFi 並不好用，只能應急，所以我們第一件事就是買 sim 卡，但機場的 digi 攤位又只收現金，所以又急。依照部落客分享的最佳換匯方法，就是帶台幣到馬來西亞機場換，可是我們還是換貴了，為什麼？之後會講。 （放匯率、換匯、買卡三張照片） BKI 吃飯、閒晃 找咖啡 我一天沒有喝上一杯無糖咖啡，就會覺得這天沒有開始過。所以找吃的以前，要先找到一杯好咖啡。 第一次來這裡，每一家當地的店我都覺得像是地雷。那喝麥當勞的咖啡呢？我又會想說「都來國外了，不就是要來冒險踩雷的嗎？還喝麥當勞就太無趣了！」 最後憑著直覺買，這杯冰拿鐵 15.9 RM，幸好口味合乎我的期望。 吃午餐 有感於太難看懂當地菜單，所以決定先從速食店開始吃午餐。馬來西亞麥當勞的菜單，幾乎和台灣麥當勞常年基本菜單無異，所以就跳過；肯德基的差異比較大，值得我們嘗試看看。 點了一個大份套餐兩人分著吃，內容是芒果汁、馬鈴薯泥、碎高麗菜沙拉、小麵包、兩塊炸雞。 這芒果汁太甜，我自己加了水還是無法喝完；炸雞比台灣的大，但是也比台灣的乾澀，肉沒什麼汁，有&quot;柴&quot;感，同樣無法吃完它… 吃晚餐 在 BKI 晃一整天也傍晚了，由於到美里也已經是晚上 9 點多的事，所以先找了一間餐廳吃晚餐。這時候膽子已經比較大，就找了間比較當地的餐廳，點了椰漿飯（其實是菜單上也只看得懂這一樣） 特別的是，這個餐盤，是編織籃子鋪上一層餐紙組成的，但椰漿飯很油，油其實會透過紙沾到桌面去。 蜂蜜檸檬水還不錯。至於我在點咖啡的時候，特別和結帳人員強調 “No sugar” 但送上來的咖啡還是有甜，我拿去抱怨，其他工作人員聽懂後，用 “No sweet” 向結帳人員解釋，才送上重做的無糖咖啡。 這一餐，雖然地雷比較多，但不論口味或服務，都開始有了「道地」的感受，這才是我心目中的旅遊。 在 BKI 消失的神祕登機口 A19 吃飽後開始前往搭乘到美里的國內線，這才發現原來是一場大冒險，因為登機口標示不良、極為不友善的可怕動線。 當時機票上寫的登機口是 A19，但是我們通關後，不管怎麼找都只有 A1~A13 的標示，可是問機場工作人員，他們又都指得出 A19 方向，於時我們兩人就拖著行李，在語言不通的狀況下，開始混亂的四處尋找登機口，過去又回來的，不知道走了幾遍。 後來才發現，A19 應該是最近擴充的登機口，但是只有距離登機口最近標示（如圖）有改而已，從通關到這個標示中間完全看不到 A14~A19 的指示。 完全沒有人跟我們解釋，純粹靠著「去 A13 看看好了」這樣的想法才知道真相。 馬航國內線 沒想到我第一次搭國內線飛機，就是在國外，這也是我第一次搭螺旋槳飛機。 一小包花生，和一小杯蘋果或柳橙汁。 美里機場硬體設施的，感覺比台中機場還要低一個 level。一出關，就看到很多防疫警告，很有熱帶國家的 fu。 MYY to 友人家中 一出機場就看到女友的當地友人開車來接送。這一路上的景色，讓我理解，原來說同學說的「美里比台東還要偏僻」是什麼樣子了。 友人家中的大女兒去新加坡（忘記是讀書還就業？），所以就把她的房間給我們用。偏僻歸偏僻，但感覺這家人的生活水準還不錯，廚房相當乾淨整齊，連廁所抽風機都是 Panasonic 的靜音風扇。 門口有一支好大隻的鋼瓶！他們說這是淨水器，當地很多戶人家都會有。 （待續）"},{"title":"2017 東馬來西亞旅遊記（零）：就是一個衝動","date":"2017-11-18T16:00:00.000Z","url":"/2017/11/18/2017%E6%9D%B1%E9%A6%AC%E4%BE%86%E8%A5%BF%E4%BA%9E%E6%97%85%E9%81%8A%E8%A8%98%EF%BC%88%E9%9B%B6%EF%BC%89/","tags":["旅遊","非關技術","馬來西亞"],"content":"在此之前，我只出國過兩次 第一次跟技術團中國大陸深圳，別人代訂機加酒+團體巴士，算半個自由行 第二次去日本東京大阪，完全自由行，但前期規劃將近一個月，看過無數旅遊書籍和部落格 第一次到動盪的開發中國家 為什麼會突然跑去馬來西亞？而且還是去自己完全不熟的國家？然後還是比較偏僻那一邊？ 其實是因為女友突然一頭熱，她就突然決定要去馬來西亞偏遠郊區找朋友，但我們都沒去過、她對這個國家也不熟，甚至出國自由行經驗還比我少。但她就是什麼都沒搞清楚的狀況下，極度想去找朋友，她說自己一定要去，也很想要我跟。 雖然說，旅遊冒險有時候就是要一種衝動，但印象中馬來西亞似乎不是政治經濟穩定、治安又好的國家，所以還是要做一些初步的認識，所以就打給我馬來西亞籍的研究所室友： 室友說：「我家是在吉隆坡，你要去的地方是砂拉越，我去是要搭飛機的！」，然後我才看了地圖，驚覺馬來西亞居然是被遙遙大海分成兩半的國家，中間的大海都可以放下一整個台灣了！繁榮首都吉隆坡的那一邊是西馬，和新加坡連在一起；偏僻的那一邊是東馬，和汶來相連。 我問他，為什麼 Google Map 上亞庇和美里的大眾運輸規劃功能都不能用？真的都沒有大眾運輸嗎？室友說：「美里很偏僻，像台東那樣，但是比台東更偏僻，想像你去的是太魯閣之類的地方。」。還好我試跑一下當地的 Uber，價錢比台灣便宜很多。 室友還提醒我，馬來西亞食物很辣而且衛生不佳，記得要帶腸胃藥。 原本查好機場有康是美，到了才發現，是松山機場才有康是美，不是桃園機場…囧。到了馬來西亞也找不到安心買藥的地方，但幸好，整趟旅程上我都沒有腸胃不適。 依照我過去自由行的經驗，我會規劃好每一天上午、下午、晚上的行程，還有行程和行程之間的第1交通方式、第2交通方式，清查每一個景點的開放時間、門票價格、注意事項。 但這次礙於女友的工作安排，其實沒有那麼多時間讓我規劃。跟她確認過，美里那邊會有她朋友們做地陪，我評估下風險後，就硬著頭皮，跟著她一起刷機票了。 買了不能退的機票以後，她才說：「我朋友他們是在美里耶，所以…我們還要再買他們亞庇到美里的國內線」 ◢▆▅▄▃ 崩╰(〒皿〒)╯潰 ▃▄▅▆◣ 我該不會第一次買了機票沒有去吧！！！ 還好，他們的國內線並不貴就是了，跟台灣的離島機票差不多。 剛好買的是早去晚回，可能我們是玩周一到周五才有辦法運氣這麼好。 （待續） 下圖是出發前的預定行程表，因為太倉促來不及規劃，所以有很多空白的地方。 "},{"title":"我從 Microprogram 離職的感言","date":"2017-10-20T16:00:00.000Z","url":"/2017/10/20/%E6%88%91%E5%BE%9EMicroprogram%E9%9B%A2%E8%81%B7%E7%9A%84%E6%84%9F%E8%A8%80/","tags":["非關技術","管理"],"content":" 本文大致上是按照我在公司內送別會的發言所寫，當時講的更仔細，這個公開版本有做過些微調整。 首先，感謝浩傑幫我弄了這個披薩送別會。 離開這裡的心情很複雜、原因也一言難盡。但比較多的是感謝，因為接下來要去的地方（知道的朋友請先為我靜悄悄），以我剛畢業時的學經歷，根本沒機會進去，所以在 MP 很多人都提升了我。 剛進公司的時候，我的期望是至少做個 2 年，立一些小功勞；做到 5 年能夠完成讓大家眼睛為之一亮的成果，會上新聞變成話題的那種。但我覺得這裡的環境很難，也有可能是我能力不夠。 那也沒關係，因為這間公司的環境算是舒適，在數據分析組也很開心，我不太說客套話，能和其他 3 個組員共事真的很棒，我遇過最好的團隊，大家的表達能力都不錯，都能互相指出問題、互相進步，我們還一起創辦內容原創的內部技術刊物－《數據分析組電子報》。離職這幾天，只要有人問我待遇加多少？我都會說：「在這團隊很棒，只加幾千元的話我根本不值得走」。 只是，我們都知道，在業界很多事情，跟做學生專題不一樣，沒辦法所有的關卡都掌握在自己手中，成敗不是某一個人、某一個團隊能決定。 之前跟行銷吵完以後，我就想：「如果大家都是這樣做事，那這種舒適可以維持多久？有未來嗎？」。於是開始往外找，9 月底收到錄取通知，那時候還覺得很不真實，想：「他們怎麼可能會用我？」，不敢提離職，想說等核薪出來再說吧。 然後就跟著大家去台南員工旅遊，心裡想說：「這十之八九會是最後一次跟大家出遊了，一切都要好好體會、好好記下來，好好記住大家不在公司上班的樣子」。 直到核薪出來，還有種疑惑：「我的人生真的要改變了嗎？」。原本某一天要講，但剛好得知還會有紙本通知，就想說等紙本到了，再提吧！ 我也是害怕改變，前面一直在給自己找藉口，但這時候已經開始整理、在寫文件，等 10/16 收到紙本的那天，看著厚厚一疊待填寫的報到資料，就知道一定要走了，新的職涯要開始了。"},{"title":"那些年我所追逐的 Windows GUI 工具(一) ：非.Net家族","date":"2017-10-18T16:00:00.000Z","url":"/2017/10/18/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E6%89%80%E8%BF%BD%E9%80%90%E7%9A%84WindowsGUI%E5%B7%A5%E5%85%B7(%E4%B8%80)%E2%80%8A%EF%BC%9A%E9%9D%9E.Net%E5%AE%B6%E6%97%8F/","tags":["Windows","GUI"],"content":"你有自己寫過 Windows 上的應用程式嗎？ 就算手機 App 當道的時代， Windows 應用程式依然是辦公室不能沒有的軟體。但是，你卻不曾看過會寫 Windows 應用程式的人？或許，這表示你太年輕了！ 我從智慧型手機還沒普及的時代，就開始寫 GUI 程式，讓我這個「老人」來說說自己追逐工具的歷史吧。 最早學的 VB6 M$ 的 VB6 我最早碰，當時在學校修「機械視覺」學的。因為先學過比較困難的 C++，所以 VB6 幾乎是無痛上手。當時修課做了一個期末作品，就是把 ADC 讀進來然後畫波形。 如下圖，畫波形的部分並沒有用到任何現成物件、或其他第三方控制項，就是自己用VB6原生的東西打造出來。 以我當時的程度來說，要這樣做其實相當困難，一門課的動力還不足以 push 到此水準（不是我太混喔，天花板效應的關係），另一個促成的原因，是要做非接觸式步態偵測裝置及方法（中華民國專利編號：I517837）的開發。 用久了，想結合影像處理，發現 VB6 捉襟見肘，遇到一些瓶頸： 沒有 OO，程式碼寫大了很難管理 很慢，不論 IDE 或是 Binary code（執行檔）都很慢 無法使用 OpenCV 所以開始需要尋找新的 GUI 工具，首要考量當然是 C++ Builder 和 C++/CLI，因為當時唯一會的 OO 語言只有 C++。 這兩個選擇之間很難決定，因為在多年前各有優缺點，沒有誰明顯佔上風。 那是個怎樣的時代？大家正在從 Windows XP 過渡到 Windows 7 的時代，很多 3C 賣場的新筆電都標榜可以從 7 或 Vista 降級到 Windows XP，而 .net 還不是任何一個 OS 的原生環境，所以 .net 家族的 C++/CLI 自然出局，build 出 Binary 在 Windows XP 上可以直接跑的 C++ Builder 就成為我第二個碰的 GUI 工具。 C++ Builder 6 有了 C++ Builder 6 之後就可以快快樂樂的使用 OO，也可呼叫 OpenCV，度過了一段短暫的快樂時光。 不過呼叫 OpenCV 卻只限於 1.X，2.0 以上的 function 因為找不到找 ”cv” 這個 namespace，無法用類似 cv::imread() 這樣 2.0 的功能，造成 C++ Builder 6 在我心中的價值感大大下降。 但 C++ Builder 6 有個特別的 class 叫做 PerformanceGraph，可以不用自己刻波形畫布（如下圖） 不過要是讓 PerformanceGraph 跑得快，波形就容易出現莫名其妙的斷點，我想這可能不是 bug，應該是規格，或許本來就不是設計給快速用途。 C++ Builder XE6 在 Borland 被收購到 Embarcadero 之後，C++ Builder 又以新版本再生，而且強化出可以只用 C++ source code 就 cross compiler 到 Android 和 iOS 的版本。 但這個版本的發展重點在寫一份 C++ 可以 build 出 Android 和 iOS。只是在大亂鬥底下，C++ Builder XE 系列愈來愈凋零了。 對我來說同樣有找不到 ”cv” 這個 namespace 的問題，就只拿來寫過幾個操作 socket 和 UART 的小程式而已。 這篇文章我從 2016 年年假就下筆了，但是從寫論文、就業以來幾乎被擱置，尤其就業後以 Linux 為作業環境，而且也沒有寫 GUI 的機會，所以就更沒有寫這篇的能量。但遲早要把寫一半的文章整理出清，不然過去的「積蓄」還會持續貶值。 若按照我使用工具的歷史發展，接下來就會轉到**(二) ：.Net家族**，但我真得寫得出來嗎？就隨緣 囉。"},{"title":"如何快速架設開發用的臨時 Line Bot？","date":"2017-10-05T16:00:00.000Z","url":"/2017/10/05/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%9E%B6%E8%A8%AD%E9%96%8B%E7%99%BC%E7%94%A8%E7%9A%84%E8%87%A8%E6%99%82%20LineBot/","tags":["佈署","後端"],"content":"這篇文章會談什麼？ 如何最方便的佈署一個 Line chatbot。要是你佈署成功了，它就只會 echo，也就是把你傳的字串吐回給你，不會產生任何新字串，證明 Server 有接收到你的訊息。 這篇文章不談什麼？ 不會談如何讓 chatbot 調皮搗蛋、生動有趣、讓你覺得 Server 上面養了一隻真人。因為那牽涉到複雜、多變，而且沒有固定作法的機器學習。也許未來會談，但這篇文章不會。 寫程式之前，要先去申請一個 Line Developer 帳號，拿到這幾樣東西： Channel secret Channel access token 到這個 repo 的 readme 照做 line-bot-sdk-python 修改 SDK 中讀取 Channel secret 和 Channel access token 的部分 把上一步拿到的 Channel secret 和 Channel access token 寫入在 *.ini 裏面，並將這兩個檔案加入 .gitignore，動態讀入 Line API 建立 https server 取得 Webhook URL Line 的用戶操作介面，是一張前端的皮，開發 Line Bot 就是自己掌握這張皮後面的邏輯思維。Webhook 是一個 function ，是「皮」和「腦」的傳輸管道。Webhook 是由 Server 端提供，所以架好 Server 才會有 Webhook。 要注意的是，Line 有限定這個 Webhook 一定要是 Https，那要怎麼架 Https Server 呢？ 我目前會採用兩種方案： ngrok 的 https local server 在開發機上 demo 測試用的，手上的電腦就是 server，關機就沒了。所以只是和暫時性的 demo 和測試。方便快速，但不能持續，因為我不能讓筆電 24 小時都開著維持連網。 GCP VM 上的 remote server 由於是雲端機器，只要用 tmux 維持 process 運作就好。雖然大多數服務要錢，但是選用最便宜的 f1-micro 免費，用來完成一個 MVP(Minimum Value Product) 應該是足夠。 注意：防火牆設定：0.0.0.0/0 tcp:5000 輸入（ngrok 好像可以不用？） 因為不想要另外弄 https certificate（MVP就是要儘量省下麻煩，能動就好，對吧！），所以我仍然會在 remote server 跑 ngrok。 我會用 tmux 維持兩個 session： ![](/content/images/佈署LineChatbot/ngrok_running.jpg) - session 2：跑 server 程式的，可能會隨著更新，時常重新啟動） ![](/content/images/佈署LineChatbot/flask_running.png) 把 ngrok 拿到的 Webhook URL 放到 Line Developer 後台 照理說，這樣應該就可以用了 "},{"title":"步上資料科學的心路歷程(二)：恐慌到自信","date":"2017-10-02T16:00:00.000Z","url":"/2017/10/02/%E6%AD%A5%E4%B8%8A%E8%B3%87%E6%96%99%E7%A7%91%E5%AD%B8%E7%9A%84%E5%BF%83%E8%B7%AF%E6%AD%B7%E7%A8%8B(%E4%BA%8C)/","tags":["學生時期","資料科學","數據分析","機器學習","MCU","AI","邊緣運算"],"content":"（續上一篇） 恐慌 在早期軍教片中，有一個喬段是這樣： 班長：「你念過書嗎？」 小王：「當然！我高中畢業，考上國立大學、主修中國文學，並寫了… 」 班長：「嗯… 」 小王語未畢，班長就點了點頭，拿著印章在名字下面蓋上兩個字：「識字」 在 2014 年在我所能看到、聽見的業界高度下，「電腦視覺」只是代表「會寫程式」而已。就算加入任何人工智慧演算法，也是只被當作學術巨塔內，不成熟的高孤玩具。業界有沒有這樣的工作？有，但我知道那些機會不是屬於我的，是屬於四大極度頂尖人才的。其他學校的人只是拿電腦視覺來出論文，因為隨便改個小細節，先射箭、再畫靶，就又是一篇新文章了。 退守傳統領域的職涯思考 所以我還是沒放棄 MCU，持續做東西、持續參加比賽。因為做一個「MCU 黑手」是我當時自認為畢業後最有可能從事的工作。但 MCU 的工作環境往往不太體面，我對於拿烙鐵已經感到相剛厭倦、也嚮往工作是一片筆電就能搞定所有事情的優雅。那時的當紅炸子雞是手機 App，每個學期都在懷疑自己： 「會寫 windows 視窗程式找得到工作嗎？好像已經沒什麼公司在徵這種人了。」 「是不是該去學個手機 App 設計？」 「自學的話，身邊沒伙伴，撐得下去嗎？」 「校內沒這個課，那我要不要休學去職訓局上課？」 當時有中壢職訓局的老師，拿著下一期的課表向我介紹，問我要不要去上？課表裡有： Cortex M 單晶片物聯網 IoT 程式設計 Android 手機應用程式設計 Web 前後端雲端ＸＸ 資料庫大數據什麼的 其他我想不起來的… 有滿滿的-大-訓-練！反正那時想得到的當紅炸子雞都有了！各種 buzzword 一應俱全，而且都是在同一個班，是一個全家桶套餐，就像中小學一樣，一周五天從早上課到晚。不是在暑假時間，所以去了這個班肯定要休學。 「哇！學會了一定不怕沒工作！」 而且都是免費！ 但最後，我還是沒去，因為我怕。 不是怕休學，而是我怕滿滿的課堂，讓自己沒有時間充份思考寫作、沒有時間細細琢磨消化，去了一定會悶死。 2014 上半年 這學期修了「多媒體系統設計」，要做期末專題，大多數同學會用機器學習套件做一些小成果，但我沒有，我用 base on rule 的 tricky 手法做了第 1 個疼痛水準辨識。雖然有點小效果，但不要問我東西在哪裡，因為以現在的技術水準來看，簡直是個笑話。 AUC = 82.3% 這門課，我沒有真的學會什麼扎實模型，只是因為 OpenCV 用得熟才做出這個東西。這門課學到比較多是辨識模型的評價方式，像 ROC、AUC、KL-divergence 之類的，還有辨識技術的論文寫作眉腳。其他就是走馬看花的東西，讓我知道情感運算、知道文字也可以計算、知道 FB 貼文也可以被計算…等等，有打開一些在機電系不太會看到的眼界。 2014 下半年 這學期我想要修「圖形辨認（Pattern Recognition）」，因為這門科目隨著時代發展，愈來愈偏向機器學習，應該有 87% 像了。但我很害怕，怕是不是又會像上次修機器學習一樣被當？ 修課之前的暑假，我把[田神的 HW0]( Learningfound17fall/doc/hw0.pdf) 拿來做，想說：「寫出這些題目，應該就有捲土重來的本錢了吧…」 當時 HW0 都是找某位經濟系的同學請教才弄懂，給我看的都是五專會計統計科的課本。我跟她說：「天啊妳有超有做 AI 的天分，只要會寫程式的話就超強惹!」。結果，她現在跑去綠地球當空姐。 然後，我覺得自己應該準備好了，就去修這門課。選課前，我還拿著 HW0 問老師：「懂這些夠嗎？」 修課以後學到特徵、資料正規化、訓練集、測試集，交叉驗證等等觀念，才慢慢建立起比較完整的資料科學觀念輪廓。 雖然考數學題的時候，成績還是很慘烈，但是老師要求我們在紙上一步步推演 Perceptron 的運作過程，推演完以後有一點點 “奇妙的” 感覺，但我說不清楚是什麼？反正我就很想要再感受一次看看，可是再推演幾次也感受不到了。 為了弄清楚，為了讓這個感覺更強烈，我用 C++ 自幹出一個 Perceptron，搭配 OpenCV 把過程視覺化。跑訓練的時候，看著自己寫的 Perceptron 不停移動，真的慢慢把兩類 sample set 切得越來愈開。我第一次感到自己寫的程式有智慧，真的會自己發現些什這麼，那種感動是難以言喻的~ 這才開始真正學到機器學習的肉。 還有學到貝氏機率、kNN、SVM 等其他模型，以及升維、降維等等一些入門的特徵工程。 期末專題，我是用 8051 蒐集人體運動學資料，把資料傳回 PC 上的 Perceptron 訓練，訓練到夠，再把 Perceptron 和參數打進 ROM code 裏面給 MCU 做邊緣運算推論。 最原始版本 機構改良版本 所以我的第一個機器學習創作，是在 8051 上完成最後推論的。看到會收斂、會分類就很開心了，根本忘記做交叉測試（Cross Validation）。這個作品，建立了我對機器學習的基本信心，因為我開始有能力自幹 Machine Learning 演算法，擺脫只是 call function 的人。 （待續）"},{"title":"步上資料科學的心路歷程(一)：動機與緣起","date":"2017-10-01T16:00:00.000Z","url":"/2017/10/01/%E6%AD%A5%E4%B8%8A%E8%B3%87%E6%96%99%E7%A7%91%E5%AD%B8%E7%9A%84%E5%BF%83%E8%B7%AF%E6%AD%B7%E7%A8%8B(%E4%B8%80)/","tags":["學生時期","資料科學","數據分析","機器學習","AI"],"content":"最近幾年資料科學正夯，你是為了什麼才進入這個領域？是跟風趕流行？還是為了其他目的？ 因為最近有網友問到我學機器學習的歷程，也剛好和同事討論到，所以我決定把這幾年的心路歷程好好寫下來。 2011 上半年 這一年我修了大學部「機械視覺」，因為我覺得能讓電腦會「看」東西很屌，這是我入門影像處理的課。要用 VB6，不依賴任何函式庫，以 pixel by pixel 的方式學習二值化、灰階化、色彩空間換算、增長侵蝕、線或圓的偵測等等。 那時候我還是用 Atom 小筆電，所以 VB6 用起來特別吃力，加上也不太喜歡 VB6 的語法，所以想要用 C++ 寫寫看，就開始入門 OpenCV。我還記得光是把 OpenCV 裝起來可以動就花了兩周。 要做期末專題，題目怎麼選呢？當時老師播了一個老舊的實驗影片，是他博班學妹的研究成果，影片中就是一個人，裝了馬達的攝影機會追蹤她的頭，不論她怎麼轉方向、用手遮蔽，攝影機就是能上下左右快速追蹤，抓到他的頭部位置正確。 看了覺得「哇～～超屌，我也想要做出這個！」 （原影片沒有獲得公開許可，所以我只能放那篇論文的截圖） 後來我用，OpenCV 內建現成的 viola jones 物件完成人臉追蹤、現成的 DAQ 完成直流馬達控制，讓這兩者可以交互回授連動，就完成了這個期末專題。當時看起來很屌，但現在回想起來很空虛，因為只是整合了影像和馬達，照一個簡單的控制邏輯互動，並沒有自己做出什麼稱得上電腦視覺的演算法，工藝水準自然也比不上上圖那篇多年前的碩論。 2011 下半年 這一年我在做大學專題，其實就繼續做那個追蹤人臉的攝影機馬達平台，嘗試做的更精密、定位更快速、更滑順。 當時 OpenCV 還沒有繁體中文書，就連簡體書都還沒有出到 2.X 版(C++ 版)，我就已經把 OpenCV 摸熟，會用這些現成電腦視覺功能，但用膩了之後想要做到更細、更靈活，會遇到很多困難。 影像部份只是 call OpenCV 所以就沒什麼難的，那時候重點，都放在解決自幹馬達控制模組的各種軔體(firmware)、硬體問題。 比賽時被一個專題評審問到：「你的馬達平台能不能分辨不同人，只追蹤特定的人？」，那是一個半導體專長的老師，我根本不知道怎麼回答他，嚇到不敢說自己只是 call function。但是這個問題，之後就一直成為我的心魔。 就算能夠存取 pixel value，自己能想得出來的方法組合也很有限，找了一些電腦視覺的書來看，發現都蠻困難的，猶豫自己是不是要去修課？ 2012 年 這一年我去讀了體育運動相關的碩士班，這是從大學參加游泳校隊、高強度身體訓練成為我生活重心以來的願望。這是原先規劃的人生方向，念得不順利以後，才發只是一個支線任務。雖然這對我人生影響不小，但我在這條支線上，沒做什麼和資料科學有關的事，所以就不細講了。 2008.6.17 彰化縣立體育場游泳池 2013 年 這一年我在機電工程系碩士班讀研究所，想做影像處理，修了電腦視覺的課，知道一些 base on rule 的影像辨識技巧。但學了之後，其實是有點失望的，因為每一個演算法都要寫很久，也很難應付特例，不管怎麼調整，都是有一好、沒兩好。 那時候天真不懂事，所以給自己想了一個很難的題目「痛苦表情辨識」。為什麼想做這個呢？ 學生的時候經常上健身房，去久了大多都是熟面孔。發現有些人只用跑步機，從來不用其他器材，跑久了速度也都沒變過。隨著一天天過去，但是有些人的表情會愈跑愈輕鬆。我心理就好奇： 「假如一開始跑很辛苦，就算速度不變，跑久了還是會體能越來越好、越來越輕鬆，直到遇到瓶頸為止。」 「如果運動表現不變，那能不能從表情變化得知體能進步水準？一開始很猙獰，到後來很輕鬆，這個變化可以用電腦視覺測量出來嗎？」 然後就開啟了這個研究。 – 這時候，我對機器學習還很陌生，只知道用在辨識很強大、可以解決很多 by rule 難以應付的特例。但機器學習的數學似乎特別困難？好像要很好的機率統計基礎？我也不知道，眼前一片未知，然後就笨笨的找了一門機器學習的課去修，先上再說。 結果就是都聽不懂，被當了，我除了 k-mean 之外什麼都沒學會。 （待續）"},{"title":"(流動筆記)資料分析文化","date":"2017-09-10T16:00:00.000Z","url":"/2017/09/10/note_%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90%E6%96%87%E5%8C%96/","tags":["筆記","資料科學","數據分析","管理"],"content":" 由於不時會在網路上看，其他資料科學工作者分享他們自己的心路歷程，看了都頗有同感。所以我決定開闢一篇文章用來收錄這些心聲。 個人實際從事資料科學工作的經驗中，發現最大的困難，不像學生時期都集中在技術面，而是文化面。文化面的障礙經驗，和當下的 context 有關，很難有意識的立即說清楚，所以特別需要筆記。 玩數據就不要玻璃心，尊重一下這場遊戲的基本邏輯 「專業和價值」只是擋箭牌，擋掉媒體人適應新變化、不得不做出改變時的心理痛苦 讓資料分析融入組織 領導團隊必須明白，成功需要勇氣，因為一旦踏上這個旅程，資料分析的見解常常會顯示，必須做出修改路線的決定。領導人必須誠實面對自己，想清楚是否願意把這些見解納入決策過程，並讓自己與團隊為這麼做負起責任。 文化抗拒也可能成為比預期更大的阻礙。 先有軟體與數據文化，才有 AI 長年缺乏的軟體環境與無結構化的資料，要如何提供養分給機器學習？業界知道資料的重要性嗎？業界的 training data 哪裡來？大數據喊了很久，業界有在積極收集、處理、分析資料嗎？ 近年深度學習（deep learning）正夯，在校園徵才時聽聞不少實驗室都開始在做深度學習，可以說，只要是理工的實驗室，做深度學習就一點也不奇怪；但我卻發現有些案例只專注於研究深度學習，其他基礎的機器學習模型並不熟、甚至不會。或許這只是特例，但我卻開始擔心這是常態。 資料專案的完整流程 1：Information-in 常常會希望跟我們合作的人有明確一點的描述，你資料的「變數」與「樣本」有哪些，對你來說什麼叫做「有趣」，你想要拿「有趣的事情」做些什麼。所以當有人直接叫我從資料找出重要的資訊時，我心中最真實的想法是：我怎麼知道要拿來幹嘛啦！！！ 這些步驟需要許多不同專業的人互相合作，才能解決實務上的問題。我認為，不應該強求成為一個「全能的資料科學家」(畢竟我並不是天才)，我想成為的是一個「T 型資料科學家」，對於所有資料分析的議題有基本認識，對於統計、電腦科學、或是領域知識其中一項有著朝深入的了解。 高質量數據集哪裡來？機器學習公司的十大數據蒐集策略 不幸的是，初創公司往往在一開始只有有限的或沒有標籤的數據，這一情況會阻礙創始人在構建數據驅動的產品方面取得重大進展。因此，在僱傭數據科學團隊或建立昂貴的核心基礎設施之前，從一開始就值得探索一套數據收集策略。 挑戰在於說服早期用戶在機器學習的好處完全發揮作用之前保持使用該產品(因為首先需要數據來訓練和微調算法)。 未来 3~5 年内，哪个方向的机器学习人才最紧缺？ 已有工作／研究經驗的朋友，要試著利用自己的工作經歷。舉例，不要做機器學習裡最擅長投資的人，而要做金融領域中最擅長機器學習的專家，這才是你的價值主張（value proposition） 「打造人工智慧團隊」筆記（2017.09.02） 科學定義 系統性 一般化 可驗證 資料科學定義 可以從資料裏面追求知識的活動 選才 這方面專長的人不太會在市場上流動 創意、細心。細心最重要 湖人隊有自己的資料分析師 建議不要外包資料分析工作，因為太難定規格。但 model training 很好定誤差，可以外包 Big Data 資料大到被逼著擺脫傳傳統單機處理，必須換到分散式架構、或其他特殊工具。 太多公司瘋 Hadoop，但絕大部分台灣公司資料量沒有多到這樣，10 萬元單機能解決就不必走分散式系統。 很多公司組完資料科學團隊，最常見就是會被誤用 資料倉儲團隊 報表產生器 看報表只是潛層應用，驅動產品或流程改變才是實在的作用 超過 3 個維度的資料被視覺化以後，都是片面的，因為視覺化最多只能呈獻 3 個維度。而絕大多數有價值的資料也超過 3 個維度，所以只靠視覺化資料做決策參考是危險的。 "},{"title":"「為什麼你的類神經模型估測結果不穩定？」","date":"2017-08-28T16:00:00.000Z","url":"/2017/08/28/%E3%80%8C%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E7%9A%84%E9%A1%9E%E7%A5%9E%E7%B6%93%E6%A8%A1%E5%9E%8B%E4%BC%B0%E6%B8%AC%E7%B5%90%E6%9E%9C%E4%B8%8D%E7%A9%A9%E5%AE%9A%EF%BC%9F%E3%80%8D/","tags":["數據分析","機器學習","深度學習","Deep Learing","類神經網路","Neural Network","線性代數","　資料科學","論文","口試"],"content":"之前我論文口試的時候，被口試委員問到：「你估測的都是連續影像，為什麼你的類神經網路辨識結果這麼不穩定？每一個 frame 跳動都這麼大？」 口委看的是這些圖和影片： 那我怎麼回答？當時沒辦法給一個很好的答案，只能說: 大概是樣本不平衡 與之比較的優秀文獻實驗結果也是這樣 文獻截圖： 我對以上回答，其實沒什麼信心。 今天正好發現一篇文章，說明這是一個普遍現象，而且有給出普遍性的幾合解釋：針對機器學習的惡意資料攻擊（一） 最早是 Szegedy et al（2013） 發現對於用 ImageNet、AlexNet 等資料集訓練出來的影像辨識模型，常常只需要輸入端的微小的變動，就可以讓輸出結果有大幅度的改變。例如取一張卡車的照片，可以被模型正確辨識，但只要改變影像中的少數像素，就可以讓模型辨識錯誤，而且前後對影像的改變非常少，對肉眼而言根本分不出差異。 原來是 2013 年就有的研究阿！要是我早點知道就好了。 你以為這樣就結束了嗎？還沒。 文中給的幾何解釋是這樣： 在 Goodfellow et al（2014） 是這樣解釋的：線性的計算基本上就是像 z=wx+b 這樣的步驟，其中 w 與 b 是 weight 與 bias，x 是 input，z 是 stimulation，w 與 x 都是向量，wx 是向量內積。因此當 d 與 w 平行時，z’=w(x+d)+b=wx+wd+b 可以因為一個微小的變動 d 產生很大的輸出結果改變（wd 很大）。當這些向量的維度很高（即 model feature 很多）的時候，wd 就可以大到造成誤判。 這個現象我們都知道，所以才要先對資料集作正規化，不是嗎？ 文章裡又說到： 這個看法可以得出幾個結果： 這解釋了過去用的 regularization 手法例如 dropout、pretraining、model average 防堵攻擊的效果不大。 但此處說的 regularization 手法都是對 model，不是對 data，所以這個解釋依舊無法讓我完全釋懷。"},{"title":"臺灣火災事件資料分析(二) - 縱火案件數量地圖","date":"2017-08-27T16:00:00.000Z","url":"/2017/08/27/%E8%87%BA%E7%81%A3%E7%81%AB%E7%81%BD%E4%BA%8B%E4%BB%B6%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90(%E4%BA%8C)/","tags":["GIS","地理資訊系統","資料視覺化","Pandas","圖表技巧","資料科學","數據分析","消防","火警","災害","救護","犯罪"],"content":"上一次發現，縱火居然是 104 年台灣火災原因排名第 2！（如下表） 104 年台灣火災原因排名 電氣因素 縱火 其他或不明 菸蒂 遺留火種 爐火烹調 車輛因素 施工不慎 燃燒廢棄物 敬神祭祖 瓦斯 機械設備 燃放爆竹煙火 自殺 蠟燭 交通事故 易燃液體接觸火源 玩火 敬神掃墓祭祖 乾燥作業 汙泥過熱 除蜂不慎 電暖器引燃可燃物 天然災害 點蚊香不慎引火 576 270 164 148 104 72 46 37 31 31 29 27 26 24 19 18 15 14 14 2 1 1 1 1 1 那麼，到底縱火都發生在哪些地區呢？ 104 年各縣市縱火數量排名表 桃園市 屏東縣 臺南市 臺中市 彰化縣 高雄市 臺北市 嘉義縣 雲林縣 苗栗縣 花蓮縣 新北市 臺東縣 南投縣 宜蘭縣 新竹縣 基隆市 澎湖縣 新竹市 嘉義市 金門縣 臺中港 連江縣 48 38 24 24 17 16 14 13 12 11 10 9 7 6 6 5 3 3 2 1 1 0 0 104 年各縣市縱火數量地圖 104 年台灣發生縱火第1多的縣市是屏東和桃園！ 屏東或桃園人可能會想說：「怎麼可能！我家這邊治安明明好得很！」 那或許是數據分層不夠細？尤其屏東是一個狹長的地區，更應該要切細來看，所以我用鄉鎮市區為分層，再做一次。 104 年各鄉鎮市區縱火數量排名表(前 20 名) 桃園市 桃園市 桃園市 臺東縣 屏東縣 雲林縣 桃園市 臺南市 桃園市 臺北市 彰化縣 彰化縣 苗栗縣 臺南市 屏東縣 屏東縣 臺南市 臺中市 臺中市 臺中市 中壢區 蘆竹區 平鎮區 臺東市 屏東市 虎尾鎮 桃園區 關廟區 觀音區 信義區 秀水鄉 鹿港鎮 苗栗市 永康區 枋寮鄉 琉球鄉 新市區 太平區 大甲區 沙鹿區 9 8 6 6 6 5 5 5 5 4 4 4 4 4 4 3 3 3 3 3 104 年各鄉鎮市區縱火數量地圖 切細以後，可以發現用縣市來看縱火案件分佈，是比較失真的，因為縱火案件只集中在少數的鄉鎮市區。（待續） 俗話說：「樹大有枯枝，人多有ＸＸ」。那麼縱火數量是不是也跟人口數目有關？ 104 年各縣市「縱火數/年底人口數」排名表(前20) &amp; 地圖 屏東縣 花蓮縣 臺南市 苗栗縣 嘉義縣 桃園市 雲林縣 彰化縣 高雄市 臺中市 南投縣 澎湖縣 宜蘭縣 臺東縣 新北市 新竹縣 臺北市 基隆市 金門縣 新竹市 0.00216 0.00061 0.00058 0.00051 0.00045 0.00033 0.00032 0.00031 0.00029 0.00027 0.00020 0.00020 0.00016 0.00011 0.00011 0.00010 0.00006 0.00005 0.00003 0.00001 104 年各鄉鎮市區「縱火數/年底人口數」排名表(前20) &amp; 地圖 春日鄉 萬榮鄉 琉球鄉 獅潭鄉 新埤鄉 枋山鄉 枋寮鄉 關廟區 來義鄉 七股區 秀林鄉 滿州鄉 西嶼鄉 南化區 水里鄉 秀水鄉 長治鄉 南庄鄉 南州鄉 鳳林鎮 0.00042 0.00031 0.00024 0.00022 0.00020 0.00018 0.00016 0.00014 0.00013 0.00013 0.00013 0.00013 0.00012 0.00011 0.00011 0.00010 0.00010 0.00009 0.00009 0.00009 是不是和土地面積有關？ 104 年各縣市「縱火數/土地面積」排名表(前20) &amp; 地圖 臺中市 屏東縣 臺北市 高雄市 桃園市 臺南市 彰化縣 基隆市 新北市 雲林縣 苗栗縣 嘉義縣 澎湖縣 花蓮縣 新竹市 宜蘭縣 新竹縣 臺東縣 南投縣 金門縣 2.02616 1.21758 1.18108 1.06173 0.78278 0.72463 0.44278 0.30946 0.25172 0.19313 0.18477 0.17429 0.11288 0.09669 0.09337 0.08446 0.06885 0.05708 0.05325 0.03350 104 年各鄉鎮市區「縱火數/土地面積」排名表(前20) &amp; 地圖 中區 新興區 琉球鄉 北區 東區 信義區 大安區 仁愛區 萬華區 西區 桃園區 秀水鄉 中正區 平鎮區 中壢區 松山區 蘆竹區 苗栗市 前鎮區 鹿港鎮 1.13598 0.50597 0.44106 0.39941 0.39425 0.35690 0.26405 0.23621 0.22593 0.20879 0.14366 0.13631 0.13146 0.12565 0.11762 0.10767 0.10596 0.10557 0.10460 0.10136 關於作者： [@LKY]() 自認不夠資格叫作 Data Scientist 的資料科學工程師，最近關注救災、救護相關的 Open Data。 "},{"title":"臺灣火災事件資料分析(一) - 動機 & 前處理踩雷的痛苦","date":"2017-08-21T16:00:00.000Z","url":"/2017/08/21/%E8%87%BA%E7%81%A3%E7%81%AB%E7%81%BD%E4%BA%8B%E4%BB%B6%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90(%E4%B8%80)/","tags":["GIS","地理資訊系統","資料視覺化","Pandas","圖表技巧","資料科學","數據分析","消防","火警","災害","救護","犯罪"],"content":" 雖然最近幾年台灣政府吹起 open data 風，各界有許多大大致力於促進政府開放資料，造福這片土地上的芸芸眾生。例如各式各樣的等公車 App，讓我們可以很清楚掌握公車動向，使搭公車不再充滿不確定性的痛苦，提高了大眾運輸的使用率，間接促進環保和交通安全，這便是 open data 的好處。 只是，畢竟 open data 還是新興意識，許多政府單位對此還是扭扭捏捏，往往用個資法當作擋箭牌，只願意釋出統計過後的結論資料。在統計知識普及的時代，只要釋出原始事件資料，眾人力量往往能做出政府主計單位意想不到的成果。 由消防署提供的火災事件資料就是一份很棒的 open data ，截至106.8.16，一共釋出了民國 103~104 年的資料，每一筆都是一個火災事件，保留了 [縣市, 鄉、鎮、市、區, 街、路段, 火災案件編號, 報案時間 (月：日：時：分) , 抵達時間 (月：日：時：分), 起火原因, 死亡人數, 受傷人數] 共 9 個維度，訊息含量相當豐富。 難得看到這麼好的資料，我就忍不住想要好好玩一下。 不想看程式碼、沒興趣了解資料科學辛酸、只想看圖表和分析結論的讀者，請直接跳到下一篇：臺灣火災事件資料分析(二) - 縱火案件數量地圖 資料合併 各縣市都是獨立的 xls 檔案，但我要一次處理全國資料，所以需要把各縣市合併。 資料清理 Noise 1：每個分頁的第 1 個 row 都是縣市名稱，第 2 個才開始是事件資料。 Noise 2：有一個檔案的 “縣市” 欄位同時出現高雄市和台南市，一看這個檔案的事件都和船有關，我才知道這個是「高雄港務消防隊」，是一個和縣市消防局同等級的單位。我服役的時候在這裡受訓，所以一看就知道。此處是高雄港管制區，但是入口在台南市。因為太過特殊且數量少，高雄港務消防隊在這次分析先不採用。 Noise 3：報案時間格式不一致 有全形冒號、半形冒號、還有的包含西元年（如下表） Noise 3：報案時間錯亂 時間是 141 點、106 分的（如下表） 表：每個縣市各抽一份資料出來觀察格式差異 縣市 鄉、鎮、市、區 街、路段 火災案件編號 報案時間 (月：日：時：分) 抵達時間 (月：日：時：分) 起火原因 死亡人數 受傷人數 高雄市 高雄市旗津區德利造船廠(CERIBU漁船) － 315C20O2 03：20：141：59 03：20：15：106 施工不慎 0 0 新北市 淡水區 竿蓁二街 H15A08D1 01:08:03:36 01:08:03:42 電氣因素 0 0 臺北市 南港區 昆陽街 A15A04J1 2015-01-04 09:53:28.593000 2015-01-04 09:58:00 其他 0 0 桃園市 大溪區 瑞源里番仔寮 I15A03I1 01 : 03 : 08 : 59 01 : 03 : 09 : 13 燃燒雜草、垃圾 0 0 臺中市 中區 成功路 E15A11C1 01：11：02：31 01：11：02：53 縱火 0 0 臺南市 中西區 中山路 G15A01X1 01:01:23:32 01:01:23:36 電氣因素 0 0 宜蘭縣 南澳鄉 金洋路 T15A04R1 01:04:17:49 01:04:18:05 烘乾機作業不慎 0 0 新竹縣 北埔鄉 水祭村8鄰麻布樹排 J15A13I1 2016-01-13 08:18:00 2016-01-13 08:23:00 敬神祭祖 0 0 苗栗縣 頭份市 市場內 K15A20B1 01：20：02：01 01：20：02：04 縱火 0 0 彰化縣 芳苑鄉 芳漢路芳二段 M15A03P1 01:03:15:40 01:03:15:51 遺留火種 0 0 南投縣 魚池鄉 水秀街 N15A16G1 01:16:06:03 01:16:06:21 瓦斯漏氣或爆炸 0 0 雲林縣 口湖鄉 埔南村 O15A02F1 01:02:05:30 01:02:05:39 電氣因素 0 0 嘉義縣 朴子市 四維路2段 P15A06M1 01：06：12：11 01：06：12：14 施工不慎 0 0 屏東縣 崁頂鄉 復興路 S15A01N1 01:01:14:00 01:01:14:08 縱火 0 0 臺東縣 臺東市 平等街 V15A25J1 01:25:09:25 01:25:09:30 縱火 0 0 花蓮縣 玉里鎮 城南十街 U15A18C1 01:18:02:21 01:18:02:30 電氣因素 0 0 澎湖縣 馬公市 鎖港里 W15B18K1 02:18:10:01 02:18:10:06 菸蒂 0 0 基隆市 七堵 俊賢路 C15A12C1 01:20:02:46 01:20:02:53 電氣因素 0 0 新竹市 東區 水利路 D15A19X1 01:19:23:39 01:19:23:45 爐火烹調 0 0 嘉義市 東區 興業東路 F15A11D1 01:11:03:44 01:11:03:49 電氣因素 0 0 金門縣 烈嶼鄉 上林至貴山路段 X15B19U1 02：19：20：15 02：19：20：15 燃放爆竹 0 0 連江縣 北竿鄉 塘岐村 Y15F12L1 06:12:11:30 06:12:11:33 電氣因素 0 0 臺中港 梧棲區 中南一路2段 215A25K1 01:25:10:32 01:25:10:36 施工不慎 0 0 補上缺失值 單一維度的 key 發生碰撞：想要分析到「鄉鎮市區」的解析度，那「鄉鎮市區」可以直接當作和地圖的 merge key 嗎？不行！因為會有重複。例如： “大安區” 台北市和台中市都有 “信義區” 台北市和基隆市都有 因此，必須用「縣市」+「鄉鎮市區」兩個 merge key 。 缺字：「鄉鎮市區」這一欄的內容，字串結尾應該是「鄉鎮市區」的任一個字，但是卻找到以下資料例外 [中山’, ‘七堵’, ‘中正’, ‘仁愛’, ‘信義’, ‘安樂’, ‘暖暖’, ‘臺西’] 所以還得自己補上區和鄉。 將手動輸入資料屬性合併：各縣市消防局事件分類不一致，很多看起來都像是使用者自由輸入。有些感受到填表人員很盡力想忠實表達現場狀況，但這也讓資料被程式自動分類難度更高。只好把所有事件的火災原因都 unique 起來，用人工的方式，憑自己認知慢慢建立分組 dict（如下 code），程式就可以依照 dict 自動分類。火災資料還算少，如果是巨量資料，大到人工做不完，那就得靠 NLP（自然語言處理） 技術協助了。 因為我不是火災專家，這些分組歸類方式或許欠佳，歡迎網友在下方給我一些 comment 原本的火災事件總共有 62 類，但我們把敘述相似的字串正規化以後，最後只剩下 25 類了。 數據分析最難的是數學建模，但最煩瑣、最多人工的部份是資料前處理 這些障礙處理起來很煩瑣、痛苦，但是要處理完才能盡情的做分析。 那我們是一次就把這障礙一口氣處理完的嗎？其實很難，不太可能做得到。 通常是先處理一點點，開始分析以後才發現踩到雷，然後回過頭來處理新發現的資料缺陷。因為先前的分析是用有缺陷的資料，所以處理完再從頭開始分析…Orz 這就是數據分析的日常。 到這裡，就可以開始把火災事件資料和臺灣地圖合併分析了！ 104 年台灣火災原因排名 電氣因素 縱火 其他或不明 菸蒂 遺留火種 爐火烹調 車輛因素 施工不慎 燃燒廢棄物 敬神祭祖 瓦斯 機械設備 燃放爆竹煙火 自殺 蠟燭 交通事故 易燃液體接觸火源 玩火 敬神掃墓祭祖 乾燥作業 汙泥過熱 除蜂不慎 電暖器引燃可燃物 天然災害 點蚊香不慎引火 576 270 164 148 104 72 46 37 31 31 29 27 26 24 19 18 15 14 14 2 1 1 1 1 1 縱火居然是排名第2？出乎意料之外！ 到底，縱火都發生在哪些地區呢？ 下一篇：臺灣火災事件資料分析(二) - 縱火案件數量地圖 關於作者： [@LKY]() 自認不夠資格叫作 Data Scientist 的資料科學工程師，最近關注救災、救護相關的 Open Data。"},{"title":"(傳送門) 軟體工程師：台灣還在「AI元年」？早在十年前就來不及了","date":"2017-08-17T16:00:00.000Z","url":"/2017/08/17/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%EF%BC%9A%E5%8F%B0%E7%81%A3%E9%82%84%E5%9C%A8%E3%80%8CAI%E5%85%83%E5%B9%B4%E3%80%8D%EF%BC%9F%E6%97%A9%E5%9C%A8%E5%8D%81%E5%B9%B4%E5%89%8D%E5%B0%B1%E4%BE%86%E4%B8%8D%E5%8F%8A%E4%BA%86/","tags":["資料科學","機器學習","靠盃","社論","AI"],"content":"[蘋果即時論壇文章] 林高遠／現職資料科學軟體工程師 你以為它在睡，其實它在養精蓄銳 以前市場上還在用 Win7、而且眾多人拒絕升級 Win8 的時代，很多傳聞說 Microsoft 已經是科技圈衰敗的退位王者，可能要倒掉，即將成為下一個柯達等等…… 那時候我正好是苦哈哈的碩士生，為了影像辨識的目的，有時要看機器學習的論文（只是有時而已，因為辨識不一定要機器學習，還有其他傳統方法可用）。機器學習的數學很難，我一直想要避開，但是看到優秀的研究都會用到，躲也躲不掉，只能硬著頭皮去看。 這些機器學習論文，有不少都是 Microsoft Research（微軟研究院）研究員寫的，還很多是早在 199x年就寫下，… (繼續閱讀，跳轉 appledaily 頁面) 後記 這篇文章有點發太急，還沒有把我想要傳達的全部說清楚。現在好好補充。 標題是編輯下的，為了媒體需要這是無可厚非。我原標題意思，並非「來不及」，是不希望整個國家都在盲目跟風。 很多人可能原本興趣不在此，在其他地方。但 AI 紅了以後，科技部在這方面獎勵聲量很大，很多教授或學生可能為了經費、為了申請過計劃、為工作機會等等各種興趣以外的因素，改研究方向。這很可惜，他們原本的興趣可能是十年、二十年以後突然暴紅的熱門領域，如果大家現在都往同一領域靠攏，那就會失去科技國力的多樣性。 跟風的教訓？看看 70 年次左右的生科人就知道了。 就算原本的興趣十幾年以後沒有暴紅，只要夠專精經驗夠久，那在人力市場上還是奇貨可居。 現在檯面上熱門的 AI 大企業、或是老牌的 AT&amp;T 與 Bell Labs，就算在 AI 研究冷門的冰河時期，也沒有中斷過相關的研發投資。要是這些機構的研究人員當初都去跟風，那就很難有今天。"},{"title":"GeoPandas 畫出生動的色塊地圖","date":"2017-08-09T16:00:00.000Z","url":"/2017/08/09/2017_0810_%E7%94%A8_GeoPandas_%E7%95%AB%E5%87%BA%E7%94%9F%E5%8B%95%E7%9A%84%E8%89%B2%E5%A1%8A%E5%9C%B0%E5%9C%96/","tags":["GIS","地理資訊系統","資料視覺化","Pandas","圖表技巧"],"content":"本文需要基礎：必須要會使用 Python，若熟悉 Pandas 則可以快至一日內上手。 問題：假如你的簡報，要同時表達台中市各區的數值（例如人口數、空氣品質之類的），並強調彼此間的差異，你會怎麼做呢？ 是表格？ 南屯區 烏日區 中區 … 龍井區 清水區 梧棲區 0.417 0.720 0.000 … 0.085 0.039 0.169 還是長條圖？ 如果直接放一張地圖呢？是不是會更加生動？ 用 Python 畫地圖的好幫手 - GeoPandas 只要 5 個步驟，畫出自己決定各區顏色的臺中地圖！ 0. 下載圖資 這個函式庫沒有內建台灣圖資喔！要到這裡下載 SHP 格式的「台灣村里界圖」 1. 安裝 GeoPandas 2. 引入必要函式庫 要是這一步執行出錯，可能是剛才沒安裝成功。 3. 讀取圖資 前 5 筆資料看起來就像這樣 _ COUNTYCODE COUNTYID COUNTYNAME TOWNCODE TOWNENG TOWNID TOWNNAME geometry dummy number 12 66000 B 臺中市 66000070 Nantun District B07 南屯區 POLYGON ((120.6080591220001 24.12669994800007,… 0.417022 13 66000 B 臺中市 66000230 Wuri District L15 烏日區 POLYGON ((120.6080591220001 24.12669994800007,… 0.720324 244 66000 B 臺中市 66000010 Zhong District B01 中區 POLYGON ((120.6857662670001 24.14327484100005,… 0.000114 245 66000 B 臺中市 66000020 E. District B02 東區 POLYGON ((120.700333524 24.15095274500004, 120… 0.302333 246 66000 B 臺中市 66000030 S. District B04 南區 POLYGON ~((120.685349072 24.12172426600006, 120… 0.146756 4. 給臺中各區數值 為了方便快速學會這個工具，本例子先用隨機亂數產生。應用上可能會是人口密度、公司行號數目等有意義的資料。 5. 畫出地圖 GeoPandas 的 GeoDataFrame，和 Pandas 的 DataFrame 同樣內建 plot() 方法，但前者 override 成直接畫出地圖。 輸出： 關於作者： @LKY 自認不夠資格叫作 Data Scientist 的資料科學工程師，最近關注救災、救護相關的 Open Data。"},{"title":"輪胎也能發電？介紹今年 6 月新通過的台灣專利","date":"2017-07-19T16:00:00.000Z","url":"/2017/07/19/2017_0720_%E8%BC%AA%E8%83%8E%E4%B9%9F%E8%83%BD%E7%99%BC%E9%9B%BB%EF%BC%9F%E4%BB%8B%E7%B4%B9%206%20%E6%9C%88%E5%89%9B%E9%80%9A%E9%81%8E%E7%9A%84%E6%96%B0%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E5%B0%88%E5%88%A9/","tags":["硬體"],"content":"你知道嗎？目前 YouBike 上的電力，是經由輪軸的發電花鼓產生能量，讓車燈發亮。 這種經由切割磁力線，產生反電動勢獲取能量，是車輛上最常見的發電方式。 但是，有另外一種你可能沒聽過發電方式－擠壓輪胎發電！ 壓電效應 簡單的說，壓電材料具有 “壓力&amp;電力” 互換的黑魔法，你壓到讓它形變就會產生電壓，或者你給它電壓自己就會形變。 輪胎上的能量互換 我們只要滾動輪胎，就會讓輪胎 360 度不斷換位置受力，發生形變。但是在一般的輪胎上，這個形變的能量只會轉換成熱，消散在空氣中浪費掉，成為再也無法利用的熱。 讓能量再飛一會兒 如果我們用壓電材料，取代一部份原本在輪胎中的橡膠或氣體，改讓壓電材料受力發生形變呢？這樣就可以在最後的熱能消散之前，多一次變成電能，增加被我們利用的機會。 這就是今年 6 月新公佈的台灣專利—「交通工具（證書號：I584975）」 （為什麼給專利取這麼奇耙的名稱一整個黑人問號？？？據說這是專利事務所考量後建議的，但怎麼考量的？我也不清楚．．．） 圖：壓電元件擺放位置圖 從旋轉機構上取出電的困難 對壓電材料反覆的拉伸與壓縮，即可產生電位交錯的交流電。所以開發團隊原先是以電刷從換向器上取電，也順便整流。 但換向器有換向期間短路的問題，造成效率不高，弄得這個計劃差點胎死腹中！因此，以內燃機為主要背景知識的開發團隊找上筆者，試圖尋求改進的方法。 經過筆者了解此構想以後，認為，既然壓電材料初始波形是交流電，其實可以採用交流感應馬達上的「老方法」: 用集電環，從旋轉機構中引出交流電，電極始終都在同一塊導體上，避免電刷機械換向期間各種不良影響（如下圖） B1:自動車輛輪胎 B2:輪胎上負集銅環 B3:輪胎上正集銅環 B4:架空式機構集電塊 B5:架空式機構導線 B6:架空式機構機構 B7:DC/DC 電路設備 B8:壓電材料 B9:壓電材料連接至銅環導線 圖：集電環 用橋式整流器，將交流電轉換成直流，不需要歷經機械性的電壓換向，效率更高 圖：系統示意圖 --- 後來筆者提出的改進，讓這個創意的發電效率大增。原團隊也以實作成果在「2011年 Nissan 創新風雲賞」獲得首獎（如下圖）。 點評：2011年生個小孩，到現在都能上小學了！你就知道申請中華民國專利是件多麼沒效率的事。 或許未來的無線胎壓偵測器，再也不用換電池 目前的無線胎壓偵測器，幾乎都是裝電池，昂貴的胎內式偵測器需要 3-5 年一次把輪胎卸下換電池、便宜的胎外式偵測器電池耗盡就只能丟棄。 如果輪胎可以自體發電，輪子上的感測器電力就可以自給自足，省去換電池所需的人工。 關於作者： @LKY 自認不夠資格叫作 Data Scientist 的資料科學工程師，最近關注救災、救護相關的 Open Data。"},{"title":"不要看 nobuy01 的理由","date":"2016-06-21T16:00:00.000Z","url":"/2016/06/21/%E4%B8%8D%E8%A6%81%E7%9C%8Bnobuy01%E7%9A%84%E7%90%86%E7%94%B1/","tags":["非關技術","靠盃","批判"],"content":"nobuy01 這個網站的主旨是「爛貨心得分享」，以討論產品缺點為號招的網站。可是他們本身就充滿缺點。 下午突然在 FB 動態看見 nobuy01 的徵稿啟事，要是不是這篇，我都差點忘了還有這個浪費我時間的網站。 會寫這篇是因為nobuy01文章的品質實在不太好，以「爛貨心得分享」的主旨來說，三分鐘熱度之不要買的理由做得比他們好很多。三分鐘熱度雖然也會提優點，但只是稍微列舉，對缺點介紹篇幅較多、較深入。 為了怕你也浪費時間，所以讓我來分享使用 nobuy01 的經驗。以下分享，都是基於我認真考慮過要買該產品．而閱讀 nobuy01 的體驗。 nobuy01 爛文一：NEXUS 9介紹 開頭先講優點 當初想買第一部平板，考慮很久之後覺得Nexus9很順眼，但是又很怕買了踩到雷。所以看到 nobuy01 上有介紹 NEXUS 9 真好，在這個葉佩雯充斥的時代下還能有這種清流。 講優點！？ 還是講優點！ 結果，跟一般開箱文差不多，講的內容都是好壞參半。結尾還來個5大優點總整理！？這是哪門子的爛貨心得分享阿~~~(翻桌) 5 大優點總整理 最後我還是買了 Nexus9，發現一堆重要缺點上面都沒寫到，寫到的都是些無關痛癢的問題。 nobuy01 爛文二：Toshiba Portege R30-A介紹 之前想換筆電的時候很認真考慮過 R30，但一台筆電不但幾萬塊，作業系統、工具軟體和資料的轉移更是大費周章。會認真考慮，當然是因為已經了解過很多 R30 的優點，這種開箱文隨便都一堆，缺點的資訊價值更高，我想這應該是 nobuy01 的價值所在吧？結果內容也是好壞參半，先用一半篇幅講 5 個優點，再說 4 個缺點。 又是假「爛貨心得分享」之名的開箱文一篇。 結論還是講優點 最後，做出一個推薦該產品的結論，這就是 nobuy01 上的「爛貨心得分享」。 之後我還是買了 R30，算是深度使用，發現很多上面缺點都沒寫到，寫到的點根本像是硬擠出來的。而且有些缺點我認為是優點： 其實耳麥同孔才好用阿！ 只要拿一般手機附的通話耳機，就可以在筆電上用了，要是耳麥分開就沒有這麼方便。孔壞掉機會極小，這根本雞蛋裡挑骨頭，要是真的壞掉，R30 本身的開放式耳麥品質也極佳，適合 skype 商務通話。 買 13 吋嫌鍵盤小，所以你買星巴克也嫌吃不飽嗎？ 以上就是我不想看 nobuy01 的理由。大多都是因為花太多篇幅講其他開箱文都有的優點；而談缺點太少，有也談得不夠到位。整體令我覺得品質很差，Nobuy01 上與「爛貨心得分享」主旨不符的文章還有很多篇。沒有拿出來批是因為： 我沒有買那幾樣東西，比較沒興趣寫。 和 Nobuy01 小編私訊後，他們表示不願意刊寫自身缺點的「爛貨心得分享」，所以也不會給我 300 元稿費，那我點到即可。 "},{"title":"我上班喝醉，你停休救災","date":"2016-02-04T16:00:00.000Z","url":"/2016/02/04/%E6%88%91%E4%B8%8A%E7%8F%AD%E5%96%9D%E9%86%89_%E4%BD%A0%E5%81%9C%E4%BC%91%E6%95%91%E7%81%BD/","tags":["非關技術","管理","社論","消防"],"content":"今年除夕夜前大地震，台南的救災人員又再次成為關注焦點之一，各種網路社群充斥「救難人員辛苦了」等感激消防人員無私奉獻的留言，更有漫畫家用短篇漫畫畫出一名已休假消防員正要去日本旅遊，期待著滑雪、泡溫泉，因為南部大地震而自願放下行李前往救災。 事實上，消防員真的都像漫畫中一樣無私奉獻嗎？真的心甘情願停休前往救災嗎？由於一般民眾不了解救災實務與警消文化，這些「感恩戴德」的看法恐怕都只是一廂情願。 停休可以救災，也可以是統治手段 重大災害發生時，各地消防隊為了人力充足，會命令休假中的消防員停休返隊、或直接前往支援地點報到。為下屬著想的長官通常會考量消防員的私人休假安排來調度。但是在講究服從與集權的公務體系中，更多的考量是年資和「聽話」與否。 論輩分－我喝醉，你停休 由於適逢年節，各地消防隊大廳往往成為許多義消、顧問等地方有力人士前往拜年交際的場所，消防車庫有時也會空出來宴客，在盛情難卻之下免不了貪杯。尤其工作紀律較差的中南部縣市，消防員值勤時間喝酒早已經是公開的秘密。由於消防員之間都能彼此照應，通常不至影響勤務。但去年底台中市消防局傳出一名小隊長酒後性侵女隊員得逞的醜聞，便是上述飲酒文化的擦槍走火。 喝醉的消防員通常年資較深，除了了解地方災害型態之外，也和地方有力人士關係良好。所謂「強龍難壓地頭蛇」，年資淺的消防主管往往只能默許。此時沒有受過搜救訓練的初任消防員，可能因資深前輩不勝酒力，被迫前往災區支援。 用停休整肅異己 筆者服役時，曾有位已計畫長途旅遊的消防員，因「不乖」而被長官在休假前半小時藉故停休，休假計畫全泡湯。用停休作為統治整肅的威力可見一般。 多年前有部電視劇《波麗士大人》演出台灣警界不為人知的黑暗面。台灣消防隊不論是人事、養成等制度皆承襲自警界，故黑暗面的辛酸並不亞於《波麗士大人》的劇情。下次看到消防員出動時，別認為每位都是無私熱血，或許跟傷患一樣想逃離災難現場。"},{"title":"救災冷漠非壞事","date":"2016-02-04T16:00:00.000Z","url":"/2016/02/04/%E6%95%91%E7%81%BD%E5%86%B7%E6%BC%A0%E9%9D%9E%E5%A3%9E%E4%BA%8B/","tags":["非關技術","管理","社論","消防"],"content":"偶有民眾反映消防員值勤時缺乏同理心。但根據筆者實際從事緊急救護的經驗，對等待救援的傷患來說，缺乏同理心未嘗不是一件壞事。 筆者雖然只以替代役男的身分在消防隊服務 10 個月，但由於當地救災勤務繁重，因此將為危險性較低、專業養成時間較短的EMT(緊急救護技術員)工作以極高比重分配給替代役男。 平均每月出勤約 100 次救護的工作量之下，不到 3 個月對於各種斷肢、肚破腸流等血肉模糊的場面已經習慣，甚至對平交道上被腰斬的傷患也能處之泰然徒手評估生命徵象。資深專職消防員更不用說，那只是他們日常生活的一部分。由於適應各種災害場面，因此偶有民眾反映消防員值勤時缺乏同理心。 其實救災專業會要求同理心養成，但不是把悲天憫人的表情寫在臉上、或講「他沒事」「一定會好起來」等不負責任的安慰話術，而是清楚交代處置手法、給予舒適調整。 上述消防員的職業性適應，或許會被解讀為「冷血」，但面對複雜又急促的情況，能不受一旁家屬哭天號地的極端情緒影響，迅速準確執行 SOP 才能讓傷患有最高存活機會。"},{"title":"2015 東京大阪 7 日遊 - 寫給泳者看的：Osaka Pool 朝聖","date":"2015-11-29T16:00:00.000Z","url":"/2015/11/29/2015%E6%9D%B1%E4%BA%AC%E5%A4%A7%E9%98%AA7%E6%97%A5%E9%81%8A-%E5%AF%AB%E7%B5%A6%E6%B3%B3%E8%80%85%E7%9C%8B%E7%9A%84%EF%BC%9AOsaka%20Pool%E6%9C%9D%E8%81%96/","tags":["日本","旅遊","運動","游泳","非關技術","學生時期"],"content":"再忙，也要找個時間游泳 因為在東京行程太忙碌的關係，所以來不及去知名的「東京辰巳国際水泳場」朝聖。到了大阪之後，我並沒有放棄要達成「在日本游泳」的目標。 即便大阪物價較低，但要達成這個目標還是不太容易，因為日本大部分的游泳池都是在社區內的，不像台灣都市地區有比較多公共游泳池。而我在大阪唯一找到的公共游泳池，就是位在大阪體育館的 Osaka Pool。 下了朝潮橋地鐵站的某個出口（忘了是幾號）就可以看到的招牌 選手留念和吉祥物 我算是晚來了一步。因為現在已經夠冷，所以他們已經把 50m 大池改成滑冰場，能游泳的剩下 25m 小池。門口除了可愛的 Osaka Pool 吉祥物之外，還有一些各國選手的簽名展示。 這邊的售票方法就和其他日本大多數的拉麵店或蓋飯店一樣，都是用自動售票機。大人一次的票價是 700 日圓。進到更衣室之前有個交誼廳，這邊有大阪府警察的招募廣告。 從入場到更衣室前的各種光景，售票機、洗手處、大阪府警察招募海報。還有販賣機和沙發啦，不過忘記拍了。 更衣室裡的收費置物櫃。 前往泳池的路上開始發現更特別的地方，不過從這裡開始就不能拍照，故以下僅能用文字敘述。 從泳池設計，再度發現日本人的貼心與細心 更衣室往泳池的路上有個玻璃門，沒想到門後面居然是暖氣阿~~~！雖然來日本這麼多天，我已經知道這裡到處都是暖氣了，但是沒想到連游泳池都有。 過了玻璃門，後面就是飲水機。日本的飲水機不多，但若是有看到的話，通常都不是用手按壓出水，而是會做好幾個很大的按鈕在水盆外緣，用身體靠過去按壓其中一個就會出水，我想這應該為了方便身障人士設計的。 到泳池前的最後一關，是個水幕，沒有其他通道，也就是強迫泳客下水前要先淋浴。台灣有些比較好的泳池也會有這種設計，但是對泳客來說往往體驗不好。但是在 Osaka Pool 卻完全不會，這是為什麼呢？ 淋浴通道在有暖氣的空間。 出來的是溫水。 所以淋浴過程不但很舒適，而且還會想在這裡多沖水一下。由於整個泳池都有暖氣，走出通道後也不怕會冷到。 而且我還特地去 try 過淋浴通道的感應器，要從往泳池方的方向經過才會淋浴，若往離開泳池的方向走就不會。我試過很多次，確認不是誤動作的巧合，是真的會辨識泳客經過方向。因為泳客離開的時候不需要再浪費水淨身，所以這種設計可以省下不必要的浪費，雖然這是淺顯易懂的事實，不過要是在台灣，設計施工的人大概會想：「幹嘛這麼麻煩？反正泳池都用這麼多水了，業主也不會在乎多一倍的短暫淋浴吧。」 這裡的水道一樣有分快慢不同等級，每個水道頭都有指示牌，寫上各等級要注意的事情。每個牌子除了日文，還有英、中 、 韓三種語言，看來會來這邊游泳的外國人還不少。水道方向一樣是右去左回，並沒有因為日本是右駕就與台灣相反。 牆上可以看到大大的溫度記錄，目前水和空氣都是 31 度 C，沒錯！就是 31 度 C！台灣的溫水游泳池只要把水加熱到 20 度 C 就算數了，在日本可是水和空氣都超過 30 度 C 啊！好處是不管天氣多冷，只要走得到泳池，都可以開開心心下水、開開心心上岸，不用下水怕冷、上岸也怕冷。壞處是游起來真的很沒力，溫溫的游起來很沒水感，所以我只游了一個很爛的超級 500 就收工，有點不夠值回票價的遺憾。 或許是因為有來這裡游泳， 即使今晚睡膠囊旅館，還是睡得非常好。"},{"title":"2015 東京大阪 7 日遊 - 寫給跑者看的：皇居、Raffine、與 CW-X 朝聖","date":"2015-11-29T16:00:00.000Z","url":"/2015/11/29/2015%E6%9D%B1%E4%BA%AC%E5%A4%A7%E9%98%AA7%E6%97%A5%E9%81%8A-%E5%AF%AB%E7%B5%A6%E8%B7%91%E8%80%85%E7%9C%8B%E7%9A%84%EF%BC%9A%E7%9A%87%E5%B1%85%E3%80%81Raffine%E3%80%81%E8%88%87CW-X%E6%9C%9D%E8%81%96/","tags":["日本","旅遊","運動","非關技術","學生時期","慢跑"],"content":"對我來說，到東京就是要去皇居跑步阿！ 在台灣規畫行程時，東京過夜處我就特別選在離皇居不會太遠，價格又便宜的民宿。實際到皇居跑步時，其實附近有不少高級飯店，但我這個背包客當然住不起。 雖然上午就到成田機場，不過等我 check-in 又買好 sim 卡都已經是傍晚了，到皇居朝聖就成了我在日本第一天的唯一觀光行程。我住的地方在神田車站附近，走一段路可以到 Raffine 神田店（www.raffine-rs.com），Raffine 主要是提供皇居跑者洗澡、寄物、甚至休息和社交的場所。大安森林公園附近的森林跑站則是這個月才開始營運，我也去體驗過，下面表格做簡單比較： 森林跑站 Raffine 神田店 基本收費 500日圓(折合135台幣) 250台幣 飲水 販賣機 含在基本收費 租毛巾 110日圓(折合台幣30) 含在基本收費 租鞋子 110日圓(折合台幣30) 不提供 食物 不提供（附近有24hr松屋） 除了貝果都蠻貴 浴室 這兩間都不錯，洗劑品質都相當好，不是一般旅館爛爛洗不乾淨的那種，可以不用自己帶。 社交空間 小，下班時間非常擠，連坐都沒得坐 大，不過沒在晚上去過 位置 在小巷子裡不好找，跑個幾百公尺才能到皇居 在大馬路邊，門口就能看到大安森林公園 備註 有男店員。另外有個女店員超像江祖平，她好像是唯一能說英文的。有脫水機。附設整骨所(日本到處都有整骨所) 好像沒有男店員 我在東京的三天行程中，有兩天晚上都去 Raffine &amp; 皇居。 以當時的氣溫來說，在台灣還是很多人都會穿短袖跑。不過日本因為普遍有暖氣，甚至連車站、車廂等，只要不是露天的地方都有暖氣，不像在台灣只有老人、病人、還有寒流時期才會用暖氣。所以日本人可以說是被暖氣寵壞了，其實更怕冷，因此這兩天看到的日本跑者幾乎都是長褲+長上衣。 皇居周邊的店家其實很少，都是辦公大樓、高級飯店、還有閘道口（東京很多交流道在市區）。繞皇居一圈剛好 5km，不會像大安森林公園那樣很難計算，而且這 5km 上會經過好幾個不同線的地鐵站入口。但皇居周邊一開始就不是用來設計運動用，不像大安森林公園有考量到運動功能，所以某些路段非常窄容易撞到人、也可能會滑倒，也有可能手機掉了就直接滾進河裡。皇居是個相對適合慢跑的地方，但我認為還稱不上是跑者天堂。 版上以前有人去朝聖過了，的確就像版友說的，皇居的跑者都很認真，幾乎每個都比我快、裝備也都比我漂亮，相較之下覺得自己像個偶爾才到公園運動的阿伯。 也因為跑者都很積極，不論 Raffine 店內或皇居周圍都有很多標語，寫著「皇居周辺の歩道はランナー専用ではありません。 歩行者に気をつけましょう！」（皇居周邊不是跑者專用，注意行人！） 個人覺得 Raffine 特別方便的地方是有提供租鞋，女鞋選擇少，男鞋則是從 over pronation 到 under pronation 都有提供。第二天我有租一雙來穿穿看，但我剛開始試穿換了好幾雙都覺得怪怪，哪裡不對勁？後來我想，應該是都被穿爛了，所以包覆性都蠻差的，像我這樣腳很挑鞋子的人不建議租。還鞋之後他們會馬上噴除臭劑。 特別要注意的是，日本很多東西都是分開收錢的，也不像台灣到處有飲水機，也不像大安森林公園四周都有便利商店，來這裡之前記得要先把水帶夠。 在皇居運動完，洗個澡後，到附近的松屋吃晚餐，真是蠻放鬆的享受，在日本的第一個晚上睡得非常好。 結束東京三天的行程後，來到大阪，其中半天在難波的大葉高島屋亂晃，晃啊晃居然就看到 CW-X 專櫃！這一定要過去看看的。 由於本魯連半馬都跑不進三小時，衣物穿迪卡儂就覺得夠好了，倒是有兩款慢跑腰包很吸引我的眼光。 這款蠻有忍者的 fu，中間有一個可調的間隔帶，可以把空間一分為二，而且任意調整大小，令人覺得蠻用心的巧思。（如下圖） 這款吸引我，是因為有設計放水壺的空間。（如下圖） 一直以來我都有慢跑帶水不便的困擾，一般的慢跑腰包放水壺又晃得太厲害；迪卡儂的幾款水壺腰包都有專用水壺，沒得替換，且剩下空間只能放鑰匙，無法放手機。CW-X的這款腰包水壺袋設計的非常棒，很好放寶特瓶（日本寶特瓶偏小，適合放 400~500cc，台灣常見的 600cc 會有點卡），拉鍊袋內的空間不小，可以放得下 6 吋手機、還有鑰匙勾。也有斜肩背的設計，店員還糾正我水壺要背在胸前才對。 算一算折合台幣小貴，不過一來可以解決帶水問題，二來加上 CW-X 的潮度和設計感，我覺得也值得。 正要結帳時，店員跟我說，大葉高島屋有給外國遊客折扣，買滿 3000 日圓可以折扣 5%，只要他們看過護照就可以了。同時也不知不覺得幫你辦好國外旅客專用折扣卡 () 所以最後結帳價格是 3000 日圓*1.08(日本消費稅)*0.95=3078 日圓。 使用感想 實際使用後，發現我的期待錯誤，放水時並不適合斜肩背，震動會一直讓肩上的部份往脖子跑。應該要有一條帶子繞過腋下固定才對，其實迪卡儂就有一款慢跑包是這樣設計，不過沒有放水的空間。（如下圖） 但是作為腰包放水的時候就不錯，不需要束很緊也不會太晃，看來斜肩背應該是店員誤解，而非原廠設計的功能之一。"},{"title":"旅遊的內在善來自碰壁和破關","date":"2015-11-26T16:00:00.000Z","url":"/2015/11/26/%E6%97%85%E9%81%8A%E7%9A%84%E5%85%A7%E5%9C%A8%E5%96%84%E4%BE%86%E8%87%AA%E7%A2%B0%E5%A3%81%E5%92%8C%E7%A0%B4%E9%97%9C/","tags":["日本","旅遊","非關技術","學生時期"],"content":"在東京和大阪遊蕩時，處處可以見到英文、中文的指示，不少店家或旅遊諮詢台也都有服務周到的中國大陸人（例如Bikyou Lin），幫助我順利的購物、搭車、完成各種旅遊子目標，這種感覺雖然友善，但不真實。 到了郊區或傳統市場，中英文都不通，看到漢字的機會也變少，想吃一樣東西，不知道怎麼點？不知道裡面包什麼？日本人明知你聽不懂，還是硬要講日文講到他自己不耐煩，才來跟你比手畫腳。雖然日本人會直接把不耐煩秀在臉上，但是他們不曾拒絕服務。 看到其他客人點的菜，覺得好像不錯，我也想吃。 怎麼點？用手指著別人的食物嗎？好像很蠢。 想知道多少錢？指著別人的食物，再拿鈔票出來擺出疑惑的表情嗎？好像更蠢。 「 How much is it？」在喉嚨裡蠢蠢欲動，可是明知講了沒用，只能壓抑住。 想喝飲料看不出來有糖還是無糖？買了就知道。萬一太甜，只能喝幾口記住味道，自己腦補去糖的味覺，然後忍痛丟掉。 不論買咖啡請店員去冰、或是拉麵攤的冰水我自己去冰，都可以看到日本店員的眼中射出鄙視與不屑，令我驚嚇而不解。這些疑惑沒解開，就一直帶回國，回國後才知道，日本人覺得喝冷水不加冰塊不衛生，就像是在台灣生吃雞蛋那種fu。 像琦玉這種外國觀光客還不夠多的地方，日本人依舊維持他們的民族性。有一間武里的菓子店，東西看起來都很好吃，但是真的想買個幾樣，又看不出來數量、口味、保存期限等等，不管問什麼一樣硬是跟你回日文，因為店員只有一個白髮老婆婆。只能想辦法從眉目和舉手投足之間，盡可能找出我要的資訊。有時候對、有時候錯，反正命中了就是小確幸、猜錯了就是旅途中的驚喜。 搭夜行巴士不像鐵道車站，有大量動態和靜態的指示牌，可以看到哪一班車多久要開？ 夜巴車站=露天停車場+兩張桌子+手持擴音器。除了專心聽擴音器，沒有其他能用視覺獲得發車資訊的管道，只好把「京都・梅田・心斎橋」用google翻成日文後再發音，然後不斷repeat跟著唸，想辦法記住那串聲音。 晚上10點多，在又冷又下雨的露天車站（其實只是個有廁所的停車場），揹著將近10kg的背包，仔細對比每一次廣播的音節。萬一錯過，不但已經刷卡的4000日圓車票會憑空消失，今晚也得在露宿東京街頭。一聽到「Kyōto Umeda shinsaibashi」趕快湊上前去，拿出全日文的電子車票和司機確認，看到司機點頭請我上車的時候，都快哭出來了。 在日本的最後一次正餐，是在關西機場的すき家(SuKiYa) 吃傳統日式早餐。想說日本納豆好像很特別，就點了鮭納豆朝食。套餐中有一顆帶殼蛋，我想說應該是水煮蛋吧，日本早餐還真是清淡，結果蛋殼一敲，挖勒～居然沒熟。 我拿去給店員看，雖然是在機場的店，但店員依然不會（或不願意）說英文，他只給我一臉「叫你吃就給我吃」的表情。我不死心又多問幾次，店員終於比出「把蛋和醬油配白飯吃」的動作，我才硬著頭皮吃看看，最後還是無法吃完這碗又冷又黏的飯。 回國後好多人問我「出去玩幹嘛那麼累？」「你去日本當乞丐喔」。 當你一路上吃好住好、搭很多日本人搭不起的新幹線、吃多數日本人平時吃不起的生魚片、都往華人多又有中文標示的地方走，你的記憶和體驗不會與日本人差異太大嗎？你所理解的日本，還會是日本人眼中的日本嗎？這樣真的是去觀光？還是坐飛機到另一個地方去當大爺呢？"},{"title":"第一天到日本，東京處處充滿驚奇","date":"2015-11-09T16:00:00.000Z","url":"/2015/11/09/%E7%AC%AC%E4%B8%80%E5%A4%A9%E5%88%B0%E6%97%A5%E6%9C%AC_%E6%9D%B1%E4%BA%AC%E8%99%95%E8%99%95%E5%85%85%E6%BB%BF%E9%A9%9A%E5%A5%87/","tags":["日本","旅遊","非關技術","學生時期"],"content":" 因為這裡的地鐵系統很複雜，有一百年歷史，所以站內轉車也很恐怖。同一站內轉別條線可能要走一公里，所以指示牌會寫說轉某條線預估要走多久？而且每到一個路口就會提示還剩下幾百公尺。 到處都是精緻的日用品，不只是電器，連單純的五金雜貨都可以看出很多貼心與創意，例如像是我住的民宿，衣架有變形多功能。可是台灣人往往只想帶吃的回去。 他們的皇居類似大安森林公園，是一個在大城市中間的小森林，會有一堆人在這裡跑步，周邊有好幾家給跑者寄物洗澡的店，收費低廉設備好。但很多跑者並沒有寄物，就直接把個人物品丟在公園樹下的椅子，治安之好可見一般。 我在東京吃第一餐是 980 日圓的拉麵，我還刻意挑一間人很少、沒中文指示、沒在網路上看過的、然後還是大馬路旁邊得連鎖店。結果媽呀根本好吃到炸掉！湯都不是湯了，濃的像是醬一樣，麵條和肉也都有入味。以前在台灣很難理解為什麼日本拉麵會變成一種文化風氣，因為根本不知道麵可以這麼好吃。難怪在日本拉麵都比飯貴，他們的飯吃起來就真的是台灣吉野家那樣（我吃松屋480日元的飯），是最低等的外食，連店員看起來都很魯，不像拉麵店店員都是充滿自信的人。 松屋點餐會附上一杯熱抹茶，非常清香好喝！沒想到東京最粗俗的餐廳會有這種小卻幸。 晚餐時間的車站，充滿穿西裝提公事包的上班族，他們很喜歡在車站外互相鞠躬個不停、像是感謝對方照顧、一副捨不得走的樣子。 神田車站這邊到處是給人下班後應酬的居酒屋，有些一群上班族剛從這家出來、又從那家進去。路上到處都是皮條客，多到政府還立牌警告惡性拉客。 或許因為大城市，破英文在這裡溝通還是很好用。只是我有時因為文法詞不達意，日本人則是偶爾因為發音讓我聽不懂，要請他們多說幾次。不過買東西常出現一種狀況，就是：我一講英文，男店員就呆掉，然後旁邊的女店員就會幫忙解釋。 在 Airbub 找的這間在皇居與東京車站附近，格局就像台北那些出租給學生的雅房，通風採光都好，床具也不錯，看起來可以睡得很好。缺點就是沒桌子櫃子，用筆電不方便，而且在5樓沒電梯。不過平均一晚 1100TWD 而已，而且房東還讓我最後一天可以晚上退房。 東京不像台灣到處有飲水機，這裡要喝水常常得花錢買。（房東剛剛才告訴我自來水可以喝XD） "},{"title":"旅行的意義","date":"2015-11-07T16:00:00.000Z","url":"/2015/11/07/%E6%97%85%E8%A1%8C%E7%9A%84%E6%84%8F%E7%BE%A9/","tags":["旅遊","非關技術","學生時期"],"content":"最近有種想去日本旅遊的衝動，所以我這幾天一直在思考旅行的意義。不是因為陳綺貞，是因為錢難賺，去了就要花在刀口上，盡量不要有後悔的機會。我去日本旅遊要的是什麼？去了就可以得到嗎？ 前幾天去永康街吃飯，整條街不管走到哪裡都有日本人，而且走到東門站那端，還可以看到一大群日本遊客聚眾，像是演唱會開場一樣，人多的溢出到馬路上去。發生什麼事呢？原來是一群在鼎泰豐外面等叫號碼的日本遊客。（當時我正要前往旁邊的書店，去聽人渣文本的新書簽講會。在看出他們是日本人之前，我還以為周偉航人氣有這麼高哩XD） 最近台北有名的小吃店，都可以看到日本人在排隊，不過像東門鼎泰豐這麼誇張還是第一次看到。會這麼熱門，應該是日本的什麼部落客或電視節目介紹之後的效果。 永康街的物價高&amp;品質低已經到了不像樣的程度，整個就是觀光客帶造成。很多店家為了迎合陸客，也都以賣日本貨為號召；加上很多店家為了搶日客，在門口用日語攬客。試想，日本人大老遠跑來台灣觀光，結果看到一堆日貨店、四處都聽到日語、還有眼裡滿滿的日本人，會有什麼感覺？ 我爸跟我分享，他前陣子跟團到上海玩了五天四夜，團費一萬五。這在我聽來就蠻空虛的，都已經到了同文同種、語言溝通無礙的國家，為什麼不自己去探索呢？而且都好不容易花錢出國了，結果大多數時間也在跟台灣人相處，這樣除了看看風景之外，有何收穫？我說，想去日本旅遊，他跟我說不要浪費錢，上網看一看就好。他以為我跟他一樣，花錢出國就只是用眼睛看看而已。 我先前去深圳一趟，雖然比較像是商務旅行，有對價關係的：別人出旅費，而我有特定任務要完成（結果完成了一個糟糕作品XD）。在我完成任務之餘，還是盡量抓緊空白時間自由行，多和當地人互動、摸熟當地大眾運輸、去買票、去問路、去殺價、去搭訕、去逛台灣沒有的店、去了解文化衝突、去吃一些有點奇怪但又吃不死的東西、避免窩起來只跟台灣人相處、避免只吃那些台灣人都放心吃得正常食物。 深圳這一趟，雖然到處都在放台灣流行歌，但我清楚，那不是放給我們聽的，只是因為我們同文同種，所以中國大陸人也愛聽（深圳是工商業為主的都市，幾乎沒觀光業，連大眾運輸都沒有給觀光客用的票）。以前去過泰國畢業旅行的朋友告訴我，他們去的泰國景點也都在放台灣流行歌，難道這會是泰國人自己愛聽的嗎？「他國遊客到此觀光」的行為就已經是一種對觀光地文化的肯定，如果沒有堅持住自己的框架，反而想把觀光客母國的文化帶進來，這不是貼心，反而是種令人作噁的討好。甚至餐廳都不該為了觀光客調整口味，廚師應該要有一種「本地人吃什麼，你就給我吃什麼！嫌難吃就不要來」的堅固框架。 所謂對觀光客的貼心，應該是展現在公共設施、或是一些遊客容易求助無門、踩到紅線的地方，像是交通號誌、大眾運輸、藥局、銀行、插座、廁所、無線網路、飯店等等地方。 觀光的深刻價值，就是體會不同的價值觀（庸俗的說法叫做「異國風情」），甚至最好是能夠有點安全的小衝突（像殺價）、小挑戰（例如搭訕），因為在衝突和挑戰之中更能了解一個人，了解越多樣本，就越了解中國大陸這個母群體。 雖然日本是不同語言的國家，但是靠著簡單英文與漢字，我有把握可以獨立完成一個觀光客想完成的事。只是，最近去日本旅遊這麼夯，我也擔心自己會不會像永康街的日本人一樣？大老遠跑去日本，結果日本街上都台灣人、店員講中文、商家標示都標中文？好好的觀光勝地被庸俗化了。但若是要去日本的二線都市或鄉下，除了機票較貴，也怕交通住宿不方便，真是兩難。很想跟這些日本人說：「永康街早就沒有傳統台灣味了！饒河夜市又太壅擠，請搭高鐵去豐原廟東吃有本土特色的小吃吧！」"},{"title":"2015 深圳創客馬拉松 Day 1","date":"2015-10-30T16:00:00.000Z","url":"/2015/10/30/2015%E6%B7%B1%E5%9C%B3%E5%89%B5%E5%AE%A2%E9%A6%AC%E6%8B%89%E6%9D%BEDay1/","tags":["旅遊","學生時期","大陸","Hackathon"],"content":"行前準備 10/10(六) 下午在 Hackathon Taiwan 的粉絲專頁看到活動訊息，我毫不猶豫的就報名了，因為： 住宿機票全免，但是我沒出過國、也沒搭過飛機，所以更加期待 可以有和強國人交流的機會，見識強國的民情風俗 不過，對於這種天上掉下來的好事，我是抱著買樂透的心態而已，所以根本不擔心還沒有護照和台胞證的問題。沒想到 10/12(一) 中午我就收到入選通知了！真是興奮的想大叫，我居然有這個機會可以讓別人出錢搭飛機出國！幸虧 Hackathon Taiwan 的入選通知書也蠻細心地寫了要去哪裡辦護照和台胞證、大約要多久時間、要多趕等等之類的資訊。這些訊息要是讓我自己找，這次可能就來不及去了。 收到信之後我就急急忙忙地先向老師請下周一的假，下午趕快去重新拍照辦護照，幸好外交部很近，這件事一個下午就搞定，隔天就能領到護照。 重新拍照：350元 護照費用：1300元 護照加快 3 天急件費：900元 拿到護照這天已經是 10/13(二)，我又直接去燦星旅社辦卡式台胞證最速件，在 10/16(五) 傍晚拿到。 燦星卡式台胞證最速件：2000元 在等台胞證的這幾天也沒閒著，除了先把未來出境這幾天的事情做完，也不斷查詢各種資料： 出境、搭飛機要注意的事情 轉換插座 行李限制細節 換外幣 深圳當地民情風俗、食安治安等等可能會踩到的地雷 準備可能需要的藥物 先去看牙齒，檢查看看有沒有在一周內可能牙痛的部位，先處理掉 深怕漏了哪一點，到機場或國外之後才後悔。 老實說，從入選到看見行前通知中間的這幾天，我一度懷疑是不是新型詐騙？因為活動相關資訊太少、聯絡人的電話又經常打不通、email 回得很慢，甚至懷疑是不是只有我一個人去？加上護照和台胞證辦急件要多加的費用不少，這個錢花得有點心驚驚。後來忍不住打電話給工作人員，才知道這個活動是由於中國大陸官方委託的單位出包了，所以才很倉促的從台灣找人參加。Hackathon Taiwan已經有一部分人先去對岸接洽，所以工作人員也忙到爆了。 想到我上一次參加 Hackathon Taiwan 的活動，和組織的核心人物聊過，感覺他們是一群蠻正派的人，就算被騙了也有一群好人陪我被騙 XD，就放心地去準備了。 前往桃園機場 到出發前的 10/17(六) 這天晚上，因為太興奮了，害怕睡過頭，而且又對機場覺得好奇，聽說好像很多好玩的設施，所以選擇先到機場過夜，出發前當然也好好的查了一下機場過夜攻略。雖然看完知道機場半夜很冷，大熱天也要帶大外套和充氣枕頭，結果帶了還是不夠，因為可以躺的地方都太冰冷。早上起床睡不好就算了，還有要感冒的 fu，立刻就把帶來的感冒藥吃下去，才沒惡化，真是自找罪受。其他部落格上都把在機場過夜寫得太美化，以後沒事不在機場過夜了~ 天亮集合登機 早上六點多，我先按照行前通知，拿護照去領個人機票。因為是第一次，而且機票也是別人先訂好，訂的人又忘了把機票資訊寄給我，所以讓我一直搞不清楚狀況，到處向地勤問東問西，華航地勤就蠻不耐煩的，一副「你快滾」的態度，國泰地勤就蠻細心誠懇的服務，讓我在不清不楚的狀況下順利拿到機票。 早上八點多，在國泰航空的報到櫃台才慢慢看到同行的大家，雖然有些人說在 HackNTU 2015 看過我，但我對他們都沒印象，那幾天太專注在解決 Intel Edison 的問題了，沒有注意到其他的活躍份子。 之後到上飛機的每一關，對我來說都是非常新鮮的體驗，尤其看著飛機加速、起飛、窗外景色逐漸變小傾斜，最後在一片白雲之上時覺得好美，這不是電視上才會出現的畫面嗎？ 到達香港國際機場 大約中午左右到達，並沒有如想像中的看到古惑仔，就算香港的機場依然是個乾淨整齊、管理嚴密的地方。從這邊轉入中國大陸海關到深圳，是個蠻麻煩的過程，不斷重複排隊、重複上下車，難怪這麼多人想要兩岸直航，即便是到離香港最近的深圳，走這些關卡還是蠻折磨人的。入境中國大陸之後，大家就搭著遊覽車到市區，中間大約一個小時的路程兩旁都是海，沒網路，遊覽車座位又小不像統聯那樣大方舒適。不過在凡事第一次的前提下，新鮮感可以蓋過一切的無趣。 到達深圳大學旁的7天酒店 大約下午 3 點左右到達，給大家一個小時辦理入住後，集合前往活動會場。 7 天酒店是中國大陸當地的連鎖廉價旅館，各主要城市都有。房裡沒有飲用水（有開水壺可以自己煮）、沒有冰箱、沒有牙膏牙刷梳子刮鬍刀等、衛生紙只有馬桶旁邊有。鑰匙是 RFID 鎖，比大多數台灣旅館先進。本來想用厚紙卡片騙過旅館房間門口的電力開關，結果沒用，發現那個開關也是 RFID，不像台灣都是機械式的。 行前通知有請大家帶 300RMB 押金入住用，我相信同團 30 幾個台灣人都帶了，結果到飯店門口發現收這筆錢工程浩大，請領導講一下，就不用押了。 剛踏上中國大陸市區的土地，一切都很好奇，就算不到一小時的空檔也想要到處看看，我就和幾個剛認識的夥伴去對面的星巴克，但光是過馬路就很驚奇！有紅綠燈，但是沒用，大家都沒在看的，路口有個行動派出所，但是他們的警察只是在站路發呆。 走進星巴克，突然有種穿過任意門走到台灣的感覺，因為不管是擺設、裝潢、音樂、菜單、價格、甚至店裡顧客的氣質和穿著打扮、所做的事（拿 Mac 的文青）全都和台灣一樣，只有文字變成簡體字而已。我們在這邊買了一杯咖啡，走出門後突然覺得自己很蠢，來這裡喝和台灣一樣的東西，價錢還一樣貴。但是剛踏上這塊食物不太可靠的土地上，能信任的，也只有眼前這家星巴克了。 前往創客馬拉松會場 大約下午 5 點半到達，這時才發現是一個好大好大的活動，整個活動會場是在深圳軟件產業基地裡面，應該是個類似工業園區的地方，布置真是壯觀。原來這是一個中國大陸當地叫做「全國大眾創業萬眾創新活動周」的活動，在中國大陸各主要城市同步舉辦，我們眼前所及的壯觀只不過是深圳分會場，在北京、上海等更大的城市還有其他會場，也許是我們無法想像的盛大吧。 未來這三天的黑客松場地，是在園區裡一個叫做「IC 咖啡廳」的小地方（沒錯，此 IC 就是積體電路的那個 IC），以活動人數來說稍嫌擠，不過有些人傍晚後就會先離開，所以也還好。我想要用最清醒的精神，好好去體會這個城市的民情風俗，所以這幾天我沒打算熬夜，最晚 12 點就離開了。三餐、宵夜、點心都會由 IC 咖啡廳提供。 危機也是轉機：沒有 Google 大家找好位置坐下來，打開電腦後，才發現事情大條了！沒有 Google 可用，包括像是 Gmail 或Google Map 等，任何 Google 相關的服務全都 GG。我自己則是先用師大的 VPN 就可以翻牆了，但是才翻沒幾分鐘 VPN 就斷了，後來就再也連不上去。 現場其他人也是一樣，大家都無法找到一個穩定的翻牆方法。最後只有用 3G/4G 漫遊的台灣人可以搞定這個問題。幸好我事先在台灣做過申請漫遊的功課，清楚程序和價錢，按流量計費，中華電信申請一次 72 小時內的收費上限是 999 元。算一算 72 小時可以用到我回台灣的那時候，除了呼吸自由的網路外，還可以讓我趴趴造時有地圖可看，只好給他花下去了。 現場氣氛可以感受得到，不少人因為這件事情，讓創作的熱情有點受挫。但是不能上 FB，我覺得某種程度上也是幫助自己專注。有人說沒有 Google 就像武功都廢了，但我反而覺得這是個機會，一個靜下來好好檢視自己內功的機會，看看在難以查資料的情況下，自己到底能寫出多少東西？以前在台灣時時可以查 Google，就像呼吸一樣，所以有些東西就會容易囫圇吞棗，想說「到時候再 Google 就好」，到了查的時候，查到的又大多是破碎、片段、重複的資訊，查得心浮氣躁，還容易分心，點去看別的東西。 有漫遊的人用漫遊、翻牆翻得過的高手也不會一下子就輕易搞定、都沒有的人，只好慢慢適應這邊的網路，看是要用 bing、baidu 還是 yahoo。總之第一天光是適應環境就累了，很少人開始進入創作的狀況。 第一天晚上回旅館 而我是吃完晚餐就先回旅館。因為行李重量和液體通關的規定，所以牙膏和刮鬍泡我都沒帶，加上不想用旅館提供的沐浴乳，要趕快趁當地超市關門前去買。這超市我是怎麼知道的呢？ 雖然7天酒店隔壁就有一間藥妝店，但我下午去說要買牙膏時，店員就先主動拿了一條給我，當下覺得不太對勁，問說：店裡不會只有這一種吧？去找才發現店員拿了一條最貴的給我，在我尋尋覓覓時，店員還不斷說她拿的那條是最有名的等等。這個經驗讓我對當地購物的戒心大為提高，也就沒在那間藥妝店買過任何東西。幸好當地人有給我們一點指引，說是往某個方向多走一段路會有一間大超市，類似台灣的全聯，那邊可以買到所有需要的平價日用品。這個訊息真是幫了我們一行人大忙，才沒有在深圳被當成肥羊宰。 這間超市叫做人人樂，其實比較像大買家或愛買之類的，因為有熟食區和散裝乾貨區，東西的確普遍是比台灣便宜一些，我買了藥皂、小罐刮鬍泡、小條牙膏、礦泉水、一盒水果。第一天就這樣結束了。 要創作什麼？先睡飽，明天早上再想吧。 "},{"title":"2015 深圳創客馬拉松 Day 2","date":"2015-10-30T16:00:00.000Z","url":"/2015/10/30/2015%E6%B7%B1%E5%9C%B3%E5%89%B5%E5%AE%A2%E9%A6%AC%E6%8B%89%E6%9D%BEDay2/","tags":["旅遊","學生時期","大陸","Hackathon"],"content":"繞路至深圳大學 這天早上七點半起床，去吃旅館的早餐。就跟廉航一樣，所有非必要服務都是選配，另外收錢。早餐價 10RMB，但是領導「關照」過了所以不用。讓我有種被禮遇的感覺，這感覺不錯。問題是，這個「關照」是領導幫我們出錢？還是叫業者吞下去？如果是後者，那我會覺得在這裡做生意風險蠻高的。 出門後我並沒有直接去活動會場，而是繞路到深圳大學，想說沒看過中國大陸的大學，去裡面看看是什麼樣子？雖然是在鬧區裡，但是校園很大，建築物都是舊舊髒髒的。原本以為在深圳的大學應該是以理工為主，但沒想到女生還不少，我性別比想應該是一半一半。或許是眼睛小的關係，覺得他們好像沒什麼精神？男生大多乾乾瘦瘦的，穿著荷葉邊 POLO 衫，女生則是比台灣更用力打扮（但不是更會打扮）、更敢穿，不過皮膚普遍差。 女學生整體而言可以分為兩種： 不化妝，看得出來皮膚很差。 化妝畫到像女鬼一樣。 台灣的大學裡，不管多鄉下的學校，在人群中總是可以看到少數幾個亮眼的潮男潮女。 但是在深圳大學的這個早上，都沒有，我直直穿過整個校園，印象中連一個都沒看到。所以我大膽猜測：前一天晚上應該是當地夜店的學生之夜。 到達活動會場 到活動會場已經早上九點半了，沒想到這裡也有供早餐！ 是全麥肉蛋三明治和麥片牛奶，三明治不錯，尤其我又喜歡吃全麥，但是那牛奶味道很重，重到有點噁心感，喝不習慣。 這是牛奶的問題嗎？還是我的問題？看看四周，很多人都有喝，但是大多都沒喝完，我想應該只是水土不服、口味差異的問題。 但是在中國大陸，所有關於食物的任何不適應，心裡都免不了會毛毛的。 要做什麼主題？ 我在臺北的時候想了很久。 以技術熟悉度來說，MCU 相關應用是優先考慮，實體本身也可以做到極小，帶過去再寫程式就好。但是又有很多的顧慮在我心中冒出來： 硬體萬一掛了，在人生地不熟的地方很難找到替代品，以前比賽已經吃過這個虧。 MCU 只需要最熟的那一種。但在主題還不確定的情況下，可能會用到的周邊有百百種。 由於沒出國、搭機的經驗，我必須盡量簡化所有流程，因此不托運，打算一個背包裝全部行李，這時候連一個三用電表都嫌麻煩。 但只要牽涉到電子電路，缺儀器就會發生一些困難，要克難的用很多模糊資訊去夾擠一個問題，有如瞎子摸象，而且每個角度的瞎子要自己分時多工去扮演，這是有時間才能做的 debug，對黑客松這種時間吃緊的活動很不利。 基於以上這些限制，我決定放棄 MCU 和其他電子電路等硬體，做一個只要筆電就能解決的純軟題目。 那這樣不是更難發揮了嗎？黑客松精神就是快速做出雛形，創意比完整度更重要，而且中國大陸的社會這麼大、問題這麼多，如果能夠好好觀察、體會、甚至融入在地人生活，一定可以察覺到某些能用軟體改善的問題。 一開始想到早上去深圳大學的經驗，是不是可以做個「驅鬼神器」？讓女鬼般的大學生知道自己化妝化過頭。 雖然有些初步的影像演算法已經在我心中打轉，但剩下不多的時間裡，我卻不是很有把握做出來，或許影像處理的底子不夠深厚吧？ 加上我剛重灌，連 OpenCV 和 Visual Studio 都還沒裝。然後，又想到之前抓了一個強國人寫的 windows 小軟體「天天科研」，我是不是可以把一部分功能寫成 web 版？ 這樣可以減少 *.exe 帶來的疑慮，也讓其他平台也受惠。這兩個主題，我都一度動手開始 coding，但不管怎麼想，都覺得「好像可行，但是不太有把握，做了會哪裡怪怪的」，反正都有一種說不出來的心理障礙。 想到這裡，已經是午餐時間了，出席率越來越高，場地也變得很擠，我就想： 「那下午就出去走走找靈感吧！晚上回來人就少了，正好可以專心寫作。」 「若要觀光就應該趁白天去，比較安全，看得也多。」 吃完午餐後，我就將筆電託給場地內的小夥伴保管，自己帶著平板和水瓶就出門了。喔對了，這天午餐有好吃的牛肉飯（雖然這裡的口味還是偏鹹偏辣），還有好喝的金桔檸檬茶，據店員所說沒有使用任何濃縮汁，都是現榨，但是價格頗貴，若自費的話一杯要台幣一百元。 至於上圖的左下角，那就是一個不能說的故事了 XD 深圳市區大地遊戲 我在淘寶上買過最多的東西，就是迪卡儂的商品。 迪卡儂是法商的廉價運動用品品牌，在台灣最早只有台中市一間小小 outlet，主要賣國外剩下的過季款。是當替代役時，經由喜歡登山的前輩介紹得知。 因為商品總是物美價廉、設計極富創意，但當時在台灣款式極少，所以我都會上淘寶買台灣沒有的款式。 那時候在淘寶上和中國大陸賣家周旋，是我和強國人的第一次互動。所以，第一站打算先去僑城北地鐵站的迪卡儂朝聖，雖然這不是最近的一間，卻是步行距離最近的一間。就算台灣已經有許多間大型迪卡儂分店，我還是想去強國看看。 出了僑城北地鐵站之後，第一個先看到的是迪卡儂，但不是賣東西的商場，而是辦公室！ 從外面看進去有一面小布告欄，上面貼滿了快樂員工的照片，這裡的工作氣氛似乎不錯？然後循著地圖找迪卡儂商場，我拿著平板看地圖，邊看邊走，發現 GPS 在這裡的定位精度普遍比台灣還差。 在台灣的定位精度，讓你連在馬路的哪一邊都知道，讓你搭公車不會搭錯邊，可是在中國大陸的定位誤差往往達到好幾倍馬路寬度，所以很容易搞不清楚自己在馬路的那一側？要用附近的地標對比才行。 都繞完一個街區了，還是找不到，開始懷疑是我的問題嗎？還是店收了？可是店址已經在迪卡儂中國大陸官網確認過了耶。 這時候經過一個廢墟，看起來被附近的建築工人拿來當作工寮，而且這個廢墟是藍白色的！廢墟是藍白色的！廢墟是藍白色的！（很重要所以說三次） 就算看到藍白色廢墟，我還是不死心，走進迪卡儂辦公室向櫃台詢問，才知道當地賣場真的已經撤掉了。於是我只好失望的請求他們，讓我跟辦公室門口合照一張，否則就這樣走掉實在不甘心。 這個經驗告訴我：中國大陸的各種資訊都不太可靠，甚至是外商的官方資訊可信度也要打折。 後來，照著迪卡儂辦公室員工的建議，打滴（搭計程車）到迪卡儂沙河店。 雖然蛇口店離深圳軟件產業基地比較近，但迪卡儂員工說沙河店是當地最大的店面，而且我一看地圖，還發現沙河店附近還有好幾間大賣場，要再去當地觀光景點「世界之窗」也比較順路。 強國大賣場體驗 搭車前往迪卡儂沙河店的路上，是第一次體驗在中國大陸搭計程車，雖然中國大陸計程車外觀普遍暗暗的，不像台灣計程車都會打蠟打得發亮，但是又便宜又好，價格大約只有台灣一半，舒適度和速度都一樣，算是當地服務業當中，少數做得比台灣還棒的。 步入迪卡儂沙河店後，一樣的商品和擺設，又讓我重新感受那種穿過任意門回到台灣的 fu，直到我看見價格為止… 因為，幾乎都比台灣貴，連中國大陸製的東西都是。 出國前為了買護照包、盥洗包、充氣枕頭等等，我才去過一趟中和迪卡儂，所以台灣的價錢大致清楚，發現在中國大陸迪卡儂還比較貴，少數品項甚至可以貴到台灣的 1.5 倍（來第二天，我已經練成看到價錢自動乘 5.1 倍匯率的功力）。 不過可以選的品項有比台灣多一點。因為這幾天走路走得腳有點痛，所以我買了一雙高張力襪（比台灣貴，但現在就需要）、兩包能量膠（很便宜）。 結帳之後，又到了對面的 IKEA，和台灣不同的是，進店裡會先看到餐廳，應該是針對強國做出的不同行銷策略吧？ 我很快速地繞了一圈出來，發現也是都跟台灣一樣，只是： 客群年輕人居多。 餐廳很多人在長時間用筆電，可見 IKEA 在這裡的功能更接近速食店。 這個廣場裡還有一間叫做「順電」的大賣場，走進去看果然是賣 3C 的，不過裝潢看起來走精品路線，和順發 3C 應該沒什麼關係。 至於價錢，一樣通通都比台灣貴。這裡可以看到三星和中國大陸本土牌的筆電，蠻特別的。 最特別的是有賣類似 segaway 的交通工具，而有且阿嬤級員工直接在賣場裡玩給你看，強國阿嬤們玩得臉上笑呵呵呢～要是在台灣應該會被強力客訴吧！說是嚇到客人、不重視顧客安全等等。 走出順電後，我又到廣場裡的 KFC，KFC 和台灣差異就很大，在地化做得很深。我買了一串軟骨雞肉，覺得蠻難吃的，台灣小吃店要是做這種水準應該會倒掉吧。 然後再搭計程車到世界之窗，世界之窗是一個很大的廣場，很多人在這裡拍照、也有不少小販就拿著一把自拍棒在這邊賣。 特別的地方是，地上有一些立牌，寫著旅遊糾紛多，謹防詐騙等等標語。 周圍賣吃的有一間是永和豆漿，不過台灣的永和豆漿差異頗大（如照片），有賣牛肉麵、榨醬麵等。台灣的永和豆漿會把食物擺滿桌，讓人看了就非常有食慾的店面，世界之窗的這間永和豆漿檯面上都空空，真好奇他們要怎麼把食物變出來？ 另一間台灣小吃是 CoCo，店面完全一樣，菜單內容沒仔細看（腳酸了懶得走過去），遠遠看到海報上寫著珍珠奶茶一杯是 9RMB，差不多是 46 元台幣。 台北深圳上班族差異 世界之窗還有更裡面要門票的部分，附近好像還有個電器城什麼的，不過天色暗了，我也累了，懶得再看，就搭地鐵回去產業軟件基地。 這一路上正好是下班時間，看到許多上班族。 過去我有一陣子在中和遠東世紀廣場上下班，這裡的上班族的樣貌，和我當時看到的差異不小： 台灣上班族體型有蠻多偏胖，深圳幾乎沒有胖子，偏瘦的較多。 台灣騎機車上下班的人很多，深圳上班族幾乎只有開車或大眾運輸兩種選項。機車不像台灣那麼多，以工人為主。 深圳上班族的穿著是黑白灰基調為主，大多西裝；台灣有蠻多人穿牛仔褲運動鞋上班的。 台灣上班族當中，有不少人下了班還是會戴「狗牌」，看「狗鏈」就可以知道是哪家公司的人，深圳幾乎沒看到，難道他們很怕人知道自己任職的公司？ 強，是為了保護寂寞玻璃心 我坐在 IC 咖啡館，裡回憶這一整天的趴趴造，發現眼前這個社會充滿了冷漠、欺騙、不信任（到處都是防騙防竊的標語、資訊不可靠、搭地鐵包包也要過掃描機），但能和我談上話的那些在地人，其實都有一顆善良的心，只是為了躲避機率不高的風險而將自己武裝起來。 強國人雖然外表強悍，但內心卻是玻璃做的，他們渴望接觸彼此，卻害怕把內心給碰壞了。 尤其深圳是一個工作的城市，充滿了從內地離鄉背井來打拼、咬牙生活，渴望衣錦還鄉的遷徙人口。 他們比台灣人更殷切需要內心滋潤、豐富寂寞的心靈。人如海綿，滋潤後方能柔軟。 明天下午一點就是 demo 時間，也許我無法在一個晚上就灌溉他們，但我想可以試著拋磚引玉。只是剩下時間不多，我打算拿過去作品來改。 走累了，人也少，正好可以專心 coding。 等我做好，大約是半夜一點了，打算先回旅館睡，明天早上再來做簡報，不過正好有香噴噴的宵夜出爐，就晚一點再回去瞜．．．（待續） "},{"title":"誰比騎 YouBike 上武嶺的羅姓男子更有公德心？","date":"2013-06-22T16:00:00.000Z","url":"/2013/06/22/%E8%AA%B0%E6%AF%94%E9%A8%8EYouBike%E4%B8%8A%E6%AD%A6%E5%B6%BA%E7%9A%84%E7%BE%85%E5%A7%93%E7%94%B7%E5%AD%90%E6%9B%B4%E6%9C%89%E5%85%AC%E5%BE%B7%E5%BF%83%EF%BC%9F/","tags":["運動","非關技術","學生時期","批判","社論","經濟學","YouBike","公共運輸","單車"],"content":"日前一名羅姓男子，騎乘台北市公共自行車 YouBike 登上台灣公路最高點-武嶺，引發爭議。不少人批評羅姓男子為了炫耀肌肉，竟糟蹋公物，將大眾運輸短程接駁公共自行車用來登山，就算羅姓男子為了騎上武嶺期間，依約計價支付八百多元的租金，仍然認為他行徑惡劣；更因承包 YouBike 的捷安特公司，檢修該輛 YouBike 後表示踏板軸心歪斜、煞車皮與輪胎磨光，令羅男遭受「破壞公共財」的嚴厲指責。 這些批評的聲音，可能來自刷了悠遊卡就把 YouBike 借走，只在前 30 分鐘免費時限內短程騎乘的車友，僅淺度使用，從未仔細探究過 YouBike 的費率結構與機械設計。 YouBike設計精良，北市交通局不應自我設限 筆者以私人的國產美利達單車通勤一年多，近日自住處附近的 YouBike 租借站啟用以來，深感 YouBike 除了租用流程方便外，機構設計更是舒適耐用，不輸時下流行的高價單車，因此將私人單車冷落在家，改以 YouBike 通勤。 淑女車外型的 YouBike，除了採用知名品牌的高價坐墊及踏板，更採用極少見且昂貴的內變速機構。與常見的外變速機構相比，內變速不易弄髒褲管、換速舒適、不易「烙輪」、故障率極低、對承包商來說更能省下大幅的維修人力成本。羅男將 YouBike 騎上挑戰嚴峻的武嶺，只不過正好向社會大眾傳達筆者看法。 然而，北市交通局王局長卻以「YouBike 是提供市區短程接駁移動」為由，研議採累進費率，避免羅男行為引發 YouBike 長途使用的風潮。然而，單車長途使用下，最先被取代的私人運具將是會排放廢氣的機車。此舉不但令 YouBike 這個增加市府收入的管道自廢武功，更與交通部「抑制私人運具成長」的方向背道而馳。政策目標與施政行為的不協調，實在令人費解。 目前市中心各 YouBike 租借站均有上下班時段車輛不足；冷門時段卻又車輛過多，無處可停的問題。若長時間使用，將可降低 YouBike 在冷門時段的空車率，不但可提高北市府營收，也使承包廠商有誘因設置更多租借站，不論短程接駁或長途使用的車友都將受益，其他用路人也會因汽機車的減少，而間接享受 YouBike 的好處。 「公德心」不應是慷他人之慨 從經濟分析的角度來看，前 30 分鐘免費雖然是為了鼓勵市民使用大眾運輸，免除「走路太遠、搭車太近」的尷尬距離，但這並非台北市交通局政策的原貌，原定費率是 10元/30 分鐘，現行前 30 分鐘的免費是靠環保署補助到 102 年底。 換句話說，民國 103 年之前，受惠於 YouBike 並只在 30 分鐘內短程接駁，這些自認「有公德心」的車友們享受極高比例的政府補貼，不只完全慷全體納稅人之慨、補貼費用更來自北高兩市以外，全台其他縣市無優質大眾運輸人民所繳的稅金，只為了替已經相當便利的台北市通勤市民，再錦上添花。甚至可以懷疑，補助並非社會福利性質的 YouBike，可能是環保署圖利捷安特公司的「制度性貪汙」。 反觀，為了登上武嶺，因此單次租借 YouBike 長達數十小時的羅先生，依約守法的歸還車輛，並自行支付 800 多元的租金，僅耗損踏板、煞車皮與輪胎等短程通勤仍需更換的經常性消耗品，其他民眾支付稅金租用 YouBike 的比例卻極為稀少。論公德心，北市廣大的通勤族中，誰比得過這位騎 YouBike 上武嶺的羅先生？ 筆者為台灣師範大學運動競技系運動科學碩士班研究生，研究興趣為運動器材"},{"title":"C# 自動偵測 serialPort","date":"2013-06-18T16:00:00.000Z","url":"/2013/06/18/C_Sharp%E8%87%AA%E5%8B%95%E5%81%B5%E6%B8%ACserialPort/","tags":[".Net","C#","serialPort","COMPort","RS232"],"content":"之前放上來的版本，發現只能用於 2 位數的 COM Port號碼，若1位數的則會通通辨認成 &quot;1″；所以這次做了點改進：切割字串以前先判斷 COM Port 號碼是幾位數？ "},{"title":"Open CV 2.0 影像存檔(How to save cv::Mat as File, such as JPG, PNG, BMP)","date":"2013-05-22T16:00:00.000Z","url":"/2013/05/22/OpenCV2.0%E5%BD%B1%E5%83%8F%E5%AD%98%E6%AA%94/","tags":["C++","OpenCV","影像處理"],"content":"好不容易寫了一些影像處理的程式碼，要如何把運算完的結果儲存下來呢？ 這次要談如何把 cv::Mat 存為 JPG 或 PNG 等格式的檔案，用以下的程式碼和註解說明 "},{"title":"Open CV 2.0 四種複製 cv::Mat 型別影像的方法(How to copy cv::Mat)","date":"2013-05-17T16:00:00.000Z","url":"/2013/05/17/OpenCV2.0%E5%9B%9B%E7%A8%AE%E8%A4%87%E8%A3%BDMat%E5%9E%8B%E5%88%A5%E5%BD%B1%E5%83%8F%E7%9A%84%E6%96%B9%E6%B3%95/","tags":["C++","OpenCV","影像處理"],"content":"這次要談複製 cv::Mat 型別影像的方式，方法有好幾種，用以下這段程式碼當作例子 不知道這四種複製方法有什麼不同呢？ "},{"title":"何謂中斷？從外部事件觸發的角度解釋","date":"2013-05-15T16:00:00.000Z","url":"/2013/05/15/%E4%BD%95%E8%AC%82%E4%B8%AD%E6%96%B7%EF%BC%9F%E5%BE%9E%E5%A4%96%E9%83%A8%E4%BA%8B%E4%BB%B6%E8%A7%B8%E7%99%BC%E7%9A%84%E8%A7%92%E5%BA%A6%E8%A7%A3%E9%87%8B/","tags":["C","MCU","8051","Context Switch","Interrupt"],"content":"以前一起修 C 語言的好友，最近正在上 8051 單晶片的課程，他問我何謂中斷？這真的難倒我了。難的不是中斷的概念，而是如何在大半夜地透過網路解釋？沒辦法當面畫圖比手畫腳地說，實在很難讓人懂。 一般我們初學在 8051 中所寫的 C 語言都是長這樣： 沒意外的話，整個程式就會 123, 123, 123,… 無限循環的執行，因為結束之後系統會自動 Reset，程式重新來過。每個地方停留的時間完全取決於 CPU 全速衝刺的速度有多快。 有可能今天的程式是這樣： 那CPU每次都要去查看手機是否有新訊息?，有才執行 statement_1，這種方式叫做輪詢（Polling）。因為每次都要問，很沒有效率，如果你每毫秒都拿手機起來看，看有沒有簡訊？有沒有未接來電？有沒有 FB 訊息？這樣不是很沒效率嗎？你也不用上班、不用睡覺了，一直看手機就好了，這樣是多浪費生命，多沒意義的事啊。 通常 8051 的入門課程會教大家這樣做： 在delay1ms( );的過程中，CPU 還是全速的在衝刺，只是一些無意義的運算去消耗 CPU 時間而已。這樣雖然你就不用持續盯著手機，一秒鐘才看一次，但還是會衍生其他問題 statement_2 與 3 可能是很忙碌的運算，雖然沒有即時處理的需求，但最好能全速衝刺，例如浮點運算或是和女朋友XX。可是這種寫法，後面的程式全部都會被延遲1秒才執行（此處是自動 Reset 的無限迴圈，所以不管寫在前面或後面，所有的程式都會被延遲 1 秒才執行）。如果你一秒鐘才X一次，每次X一下之前還要檢查手機有沒有新訊息（輪詢的行為），你能不被踢下床嗎？ 你的大腦在 delay1ms(1000)的過程中，並不是真的 delay，還是一樣全速運轉，但想的都是些沒營養的事情像是 SOD，這樣不是太浪費人生了嗎？ 這時候如果把程式改成這樣： 這樣的話，我們就可以不斷地在 main() 全速衝刺！當鈴聲響起時，main() 會暫停，CPU 就不會照著原先的順序執行，先跑去執行 ISR_int0()，做完之後再從 main()暫停的地方繼續往下執行，這種機制就叫做「中斷」，因為 main() 被中斷了。雖然必須把大部分的時間放在和女朋友XX，但是有些事情… 外部觸發(INT)：更重要，不馬上處理不行，否則後果可能很嚴重（例如她老爸敲門） 定時要做(Timer)：交作業 deadline 到了，不交會被當 溢位(Overflow)：滿出來了要趕快清理（8051 好像只有 Timer 暫存器會因溢位而中斷） 以上這幾件事情都有時效性，很緊急，要趕快處理！ 但是中斷的同時可能又有中斷！你能想像她老爸敲門的同時，助教又打電話來催交作業嗎？這時候就是蠟燭兩頭燒！所以中斷函式要盡量減短，盡早結束。 中斷的觀念解釋完了，至於中斷正確的設定方式，隨每家MCU的不同而不同，8051 based 的基本上都差不多，AT89S5x 則與標準型 8051 完全相同，這部分就請看自己的課本吧！"},{"title":"課後補習","date":"2006-10-15T16:00:00.000Z","url":"/2006/10/15/%E8%AA%B2%E5%BE%8C%E8%A3%9C%E7%BF%92/","tags":["非關技術","學生時期","社論","公視"],"content":"2006-10-16 刊登於立報 我國中時有課後補習的事情，就和《危險心靈》是一樣的。 當時我的學校並沒有強制大家參加，也沒有只讓成績好的學生參加，所以我不覺得有什麼不妥。一直到我看見回條上的名義是「才藝輔導」，我才知道這是違法的。 就算一直到現在，我還是不覺得當初學校這樣做有什麼不妥。也許有些國中是強制的，也許當初我有些同學是被家長逼來的，所以才會引起反彈吧！ 可是課後補習很明顯的違法，我一直在想為什麼？或許從學理來看，課後補習會導致教育無法正常化，所以這些滿腹學理，想要為教育盡一份心力的上位者，就訂定課後補習是違法的事情。 但不可否認的是，都市化程度比較低的地方，學生的基本學力確實有比較差，他們家長大多也不懂小孩課本上的問題，所以這些人回家之後，也許沒人教他們怎麼讀書，沒人替他們解決疑惑。他們就需要花更多的時間，才能和都會區的學生學得一樣好，學會國中這些很基本又很重要的東西。加上學校的收費又來得比私立補習班更低廉，更能 顧到每一個人。這對學習弱勢的人來說，無疑是一個階級向上流動的好機會。 也許你會說，來學校不只是讀考試需要的科目，還有很多課業以外的東西要學習。可是就像劇中說的一樣，每個人想要的都不一樣，學理上的說法就叫做「個別差異」。就好像《危險心靈》中的小傑不想課後補習，可是的確也不少人發自內心的想補習，這些想要補習的人，他們內心也和小傑一樣，都有自己的想法不是嗎？ 偏偏我們那些在上位者決策的大官，大部分都是出於都會區學習優勢的地方，大部分都是社經地位高的家庭。 我小時候，因為參考書上有一題不會，正被媽媽打到痛哭流涕的時候，這些家庭教育良好的大官父母，正在耐心的和他們解釋牛頓運動定律。這些家庭教育長期累積下來，就變成了我們看到的城鄉差距。 當然就像前面所說的，每個人都不一樣，不是每個人都想要，「必要」以外的東西不能 去要求每一個人。所以我覺得「課後補習」也不能強制，但是應該要給彈性的實施空間。 其實教育大部分的問題，追究到最後都是家庭教育，這是令站在教育前線的人感到最無奈的事情，不管一個老師再怎麼努力，不管再怎麼付出時間與心力，家庭教育卻還是難以改變或干涉，但這幾乎可以說是問題根源！ 就好像劇中的課後補習，完全是出自於家長要求，而這些家長也不知道這種行為叫做「罷課」，他們也不知道謝政傑做了什麼，也不知道應該要知道，只是一味想保護小孩。 家長大部分都是愚味的，而教學主體卻是他們的小孩，通常是家長會有錢有勢的那些人主導學校政策，所以教學政策只好被這些家長牽著鼻子走。 林高遠（台師大學生）"},{"title":"(流動筆記)Hexo Blog 建置踩雷紀錄","date":"1998-12-31T16:00:00.000Z","url":"/1998/12/31/Hexo_Blog_%E5%BB%BA%E7%BD%AE%E8%B8%A9%E9%9B%B7%E7%B4%80%E9%8C%84/","tags":["筆記","Hexo","Blog","前端"],"content":" 圖片目錄結構  加上 leancloud 的 app id 和 key 之後，瀏覽數字還是轉圈圈  文章無圖的時候放預設圖片  gitment 尚未搞定 Error: Validation Failed 重新註冊，在 _config.yml 裏面換成和 blog 相同的 repo 就馬上好了 _config.yml 裏面 gitment labels: 要給東西，不然又會 Error: Validation Failed leancloud.cn 文章瀏覽計數(by GeekaholicLin) 新建 BlogCounter 的时候需要选择无限制选项，这样你才有回写的权限，否则你只有读取阅读人数的权限。 而至于安全控制，需要到设置添加 Web 安全域名，把你当前的域名添加进去（尤其 github.io 是 https 的更要加）。 如果你一开始忘记选择了&quot;无限制&quot;，印象中是无法再修改了的。你可以删除BlogCounter再重新创建一个Class。 右下角連結圖標 應有盡有 "},{"title":"個人圖床","date":"1998-12-31T16:00:00.000Z","url":"/1998/12/31/PersonalPictureBed/","tags":["測試"],"content":"完全由我主导与负责的产品与交付物（主導項目心智圖） "},{"title":"測試 Blog 播放聲音","date":"1998-12-31T16:00:00.000Z","url":"/1998/12/31/audio_play_demo/","tags":["測試"],"content":"[連結 bug 測試] 右邊半形括號結尾 markdown 超連結 (%E4%BA%8C) .button { border-top: 1px solid #96d1f8; background: #65a9d7; background: -webkit-gradient(linear, left top, left bottom, from(#3e779d), to(#65a9d7)); background: -webkit-linear-gradient(top, #3e779d, #65a9d7); background: -moz-linear-gradient(top, #3e779d, #65a9d7); background: -ms-linear-gradient(top, #3e779d, #65a9d7); background: -o-linear-gradient(top, #3e779d, #65a9d7); padding: 5px 10px; -webkit-border-radius: 8px; -moz-border-radius: 8px; border-radius: 8px; -webkit-box-shadow: rgba(0,0,0,1) 0 1px 0; -moz-box-shadow: rgba(0,0,0,1) 0 1px 0; box-shadow: rgba(0,0,0,1) 0 1px 0; text-shadow: rgba(0,0,0,.4) 0 1px 0; color: white; font-size: 14px; font-family: Helvetica, Arial, Sans-Serif; text-decoration: none; vertical-align: middle; } .button:hover { border-top-color: #28597a; background: #28597a; color: #ccc; } .button:active { border-top-color: #1b435e; background: #1b435e; } 臺鐵花蓮站 鯉魚潭潭北遊客中心 嵌入 YouTube 影片 嵌入 medium 文章 "}]